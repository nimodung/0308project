
arduino_uno.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  0000073a  000007ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000073a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000209  00800124  00800124  000007f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000824  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00000864  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014fe  00000000  00000000  000009dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cdc  00000000  00000000  00001eda  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bc8  00000000  00000000  00002bb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003a8  00000000  00000000  00003780  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006e1  00000000  00000000  00003b28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a15  00000000  00000000  00004209  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  00004c1e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__vector_1>
   8:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 92 00 	jmp	0x124	; 0x124 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e3       	ldi	r30, 0x3A	; 58
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 32       	cpi	r26, 0x24	; 36
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	23 e0       	ldi	r18, 0x03	; 3
  8c:	a4 e2       	ldi	r26, 0x24	; 36
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 32       	cpi	r26, 0x2D	; 45
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 8e 00 	call	0x11c	; 0x11c <main>
  9e:	0c 94 9b 03 	jmp	0x736	; 0x736 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <FND_shift_out>:
	return;
}

void FND_shift_out(char data)
{
	FND_DATA_PORT &= ~(1 << RClk); 
  a6:	44 98       	cbi	0x08, 4	; 8
	for(int i = 0; i < 8; i++) //data 한개씩 넣는걸 8번
  a8:	40 e0       	ldi	r20, 0x00	; 0
  aa:	50 e0       	ldi	r21, 0x00	; 0
	{
		FND_DATA_PORT &= ~(1 << SRClk);
		FND_DATA_PORT &= ~(1 << SER); //일단 0으로 떨어트려
		FND_DATA_PORT |= ((data >> i) & 1) << SER; //받아온 data 값을 0 아니면 1
  ac:	68 2f       	mov	r22, r24
  ae:	70 e0       	ldi	r23, 0x00	; 0
void FND_shift_out(char data)
{
	FND_DATA_PORT &= ~(1 << RClk); 
	for(int i = 0; i < 8; i++) //data 한개씩 넣는걸 8번
	{
		FND_DATA_PORT &= ~(1 << SRClk);
  b0:	45 98       	cbi	0x08, 5	; 8
		FND_DATA_PORT &= ~(1 << SER); //일단 0으로 떨어트려
  b2:	43 98       	cbi	0x08, 3	; 8
		FND_DATA_PORT |= ((data >> i) & 1) << SER; //받아온 data 값을 0 아니면 1
  b4:	98 b1       	in	r25, 0x08	; 8
  b6:	9b 01       	movw	r18, r22
  b8:	04 2e       	mov	r0, r20
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <FND_shift_out+0x1a>
  bc:	35 95       	asr	r19
  be:	27 95       	ror	r18
  c0:	0a 94       	dec	r0
  c2:	e2 f7       	brpl	.-8      	; 0xbc <FND_shift_out+0x16>
  c4:	21 70       	andi	r18, 0x01	; 1
  c6:	33 27       	eor	r19, r19
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	22 0f       	add	r18, r18
  ce:	33 1f       	adc	r19, r19
  d0:	22 0f       	add	r18, r18
  d2:	33 1f       	adc	r19, r19
  d4:	29 2b       	or	r18, r25
  d6:	28 b9       	out	0x08, r18	; 8
		FND_DATA_PORT |= 1 << SRClk;//0b00100000; //상승 edge
  d8:	45 9a       	sbi	0x08, 5	; 8
}

void FND_shift_out(char data)
{
	FND_DATA_PORT &= ~(1 << RClk); 
	for(int i = 0; i < 8; i++) //data 한개씩 넣는걸 8번
  da:	4f 5f       	subi	r20, 0xFF	; 255
  dc:	5f 4f       	sbci	r21, 0xFF	; 255
  de:	48 30       	cpi	r20, 0x08	; 8
  e0:	51 05       	cpc	r21, r1
  e2:	31 f7       	brne	.-52     	; 0xb0 <FND_shift_out+0xa>
		FND_DATA_PORT &= ~(1 << SRClk);
		FND_DATA_PORT &= ~(1 << SER); //일단 0으로 떨어트려
		FND_DATA_PORT |= ((data >> i) & 1) << SER; //받아온 data 값을 0 아니면 1
		FND_DATA_PORT |= 1 << SRClk;//0b00100000; //상승 edge
	}
	FND_DATA_PORT |= 1 << RClk; //RClk 상승 edge
  e4:	44 9a       	sbi	0x08, 4	; 8
  e6:	08 95       	ret

000000e8 <__vector_1>:

char echo_time;


ISR(INT0_vect)  /* External Interrupt Request 0 */ //RISING 엣지 //timer 0으로 초기화
{
  e8:	1f 92       	push	r1
  ea:	0f 92       	push	r0
  ec:	0f b6       	in	r0, 0x3f	; 63
  ee:	0f 92       	push	r0
  f0:	11 24       	eor	r1, r1
	TCNT0 = 0;
  f2:	16 bc       	out	0x26, r1	; 38
}
  f4:	0f 90       	pop	r0
  f6:	0f be       	out	0x3f, r0	; 63
  f8:	0f 90       	pop	r0
  fa:	1f 90       	pop	r1
  fc:	18 95       	reti

000000fe <__vector_2>:

ISR(INT1_vect)  /* External Interrupt Request 1 */ //falling 엣지 // timer 값 읽기
{
  fe:	1f 92       	push	r1
 100:	0f 92       	push	r0
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	0f 92       	push	r0
 106:	11 24       	eor	r1, r1
 108:	8f 93       	push	r24
	echo_time = TCNT0;  //16,000,000 (1초에 들어오는 클락) / 1024분주 = 1초에 15625클락 들어옴 //1클락당 1
 10a:	86 b5       	in	r24, 0x26	; 38
 10c:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <echo_time>
	
	//(1/(160000000 / 1024)) = 0.000064  // 갔다 오는데 걸린 시간
	//((echo_time * (1/(160000000 / 1024)) / 2 ) * 340)  // 거리 계산
	
}
 110:	8f 91       	pop	r24
 112:	0f 90       	pop	r0
 114:	0f be       	out	0x3f, r0	; 63
 116:	0f 90       	pop	r0
 118:	1f 90       	pop	r1
 11a:	18 95       	reti

0000011c <main>:
int main(void)
{
	//FND_init();
	//FND4digit_init();
	
	sei();				//먼저해야징 fnd4digit_main()들어가면 while에서 못나옴
 11c:	78 94       	sei
	//FND4digit_main();
	//Bluetooth_main();
	//Dot_matrix_main();
	//Timer_main();
    Uart_main();
 11e:	0e 94 86 01 	call	0x30c	; 0x30c <Uart_main>
 122:	ff cf       	rjmp	.-2      	; 0x122 <main+0x6>

00000124 <__vector_14>:
volatile char i = 0, sec = 0, min = 0;							//volatile : 워킹레지스터에 선언하지말고 RAM에다가 할당하라는 의미(휘발성)
																			//전역변수 선언시에 많이 사용

//isr은 가급적 빨리 실행해야 되기 때문에 딜레이 x, 함수호출x ...
ISR(TIMER0_COMPA_vect)						//interrupt 걸리면 실행하는 내용 //Interrupt Service Routine
{	
 124:	1f 92       	push	r1
 126:	0f 92       	push	r0
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	0f 92       	push	r0
 12c:	11 24       	eor	r1, r1
 12e:	2f 93       	push	r18
 130:	3f 93       	push	r19
 132:	4f 93       	push	r20
 134:	5f 93       	push	r21
 136:	6f 93       	push	r22
 138:	7f 93       	push	r23
 13a:	8f 93       	push	r24
 13c:	9f 93       	push	r25
 13e:	af 93       	push	r26
 140:	bf 93       	push	r27
 142:	ef 93       	push	r30
 144:	ff 93       	push	r31
		sec = 0;
		min = 0;
	}
*/
	//FND를 실제로 출력시키는 
	i++;
 146:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
 14a:	8f 5f       	subi	r24, 0xFF	; 255
 14c:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__data_end>
 	
 	if(i >=4) i = 0;
 150:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
 154:	84 30       	cpi	r24, 0x04	; 4
 156:	10 f0       	brcs	.+4      	; 0x15c <__vector_14+0x38>
 158:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__data_end>
	
	//끄고 데이터 주고 끄고
	FND_COM_PORT &= 0b00001111; //상위 4비트 끄고
 15c:	8b b1       	in	r24, 0x0b	; 11
 15e:	8f 70       	andi	r24, 0x0F	; 15
 160:	8b b9       	out	0x0b, r24	; 11
	FND_shift_out(FND[i]);
 162:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <__data_end>
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	e9 5d       	subi	r30, 0xD9	; 217
 16a:	fe 4f       	sbci	r31, 0xFE	; 254
 16c:	80 81       	ld	r24, Z
 16e:	0e 94 53 00 	call	0xa6	; 0xa6 <FND_shift_out>
	FND_COM_PORT |= FND4digit_digit[i]; //< FND_shift_out보다 먼저하면 이전 데이터가 출력돼서 정확한 출력이 나오지 않음
 172:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <__data_end>
 176:	9b b1       	in	r25, 0x0b	; 11
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	ea 5f       	subi	r30, 0xFA	; 250
 17c:	fe 4f       	sbci	r31, 0xFE	; 254
 17e:	80 81       	ld	r24, Z
 180:	89 2b       	or	r24, r25
 182:	8b b9       	out	0x0b, r24	; 11
		dot_matrix_data_PORT = dotmatrix_row[i];
	*/
	
	//if(!(msec % 500))						//아두이노 우노 상의 led 출력 //인터럽트 잘 걸리는지 확인용
	//	PORTB ^= (1<<PORTB5);				// (1<<PORTB5) == 0b00100000 //토글 켜져있으면 끄고 꺼져있으면 켠다
} 
 184:	ff 91       	pop	r31
 186:	ef 91       	pop	r30
 188:	bf 91       	pop	r27
 18a:	af 91       	pop	r26
 18c:	9f 91       	pop	r25
 18e:	8f 91       	pop	r24
 190:	7f 91       	pop	r23
 192:	6f 91       	pop	r22
 194:	5f 91       	pop	r21
 196:	4f 91       	pop	r20
 198:	3f 91       	pop	r19
 19a:	2f 91       	pop	r18
 19c:	0f 90       	pop	r0
 19e:	0f be       	out	0x3f, r0	; 63
 1a0:	0f 90       	pop	r0
 1a2:	1f 90       	pop	r1
 1a4:	18 95       	reti

000001a6 <TX0_char>:
//한 문자 송신 TX
void TX0_char(char data) //ascii
{
	//상태 읽기 / UCSR0A
	//UDRE0 : USART 데이터 레지스터가 비어있으면 1로 set / initial value : 1 
	while(!(UCSR0A & (1 << UDRE0))); //0b00100000 //0이면 기다려서 1이 될때까지 (준비가 될 때까지)
 1a6:	e0 ec       	ldi	r30, 0xC0	; 192
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	90 81       	ld	r25, Z
 1ac:	95 ff       	sbrs	r25, 5
 1ae:	fd cf       	rjmp	.-6      	; 0x1aa <TX0_char+0x4>
	
	UDR0 = data; //데이터 보낸 것
 1b0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 1b4:	08 95       	ret

000001b6 <__vector_18>:
	CR : \R 커서 맨 앞으로
	LF : \N 줄 바꿈
	=> ENTER
	터미널 프로그램마다 설정 다름
*/
ISR(USART_RX_vect) { /* USART Rx Complete */
 1b6:	1f 92       	push	r1
 1b8:	0f 92       	push	r0
 1ba:	0f b6       	in	r0, 0x3f	; 63
 1bc:	0f 92       	push	r0
 1be:	11 24       	eor	r1, r1
 1c0:	2f 93       	push	r18
 1c2:	3f 93       	push	r19
 1c4:	4f 93       	push	r20
 1c6:	5f 93       	push	r21
 1c8:	6f 93       	push	r22
 1ca:	7f 93       	push	r23
 1cc:	8f 93       	push	r24
 1ce:	9f 93       	push	r25
 1d0:	af 93       	push	r26
 1d2:	bf 93       	push	r27
 1d4:	ef 93       	push	r30
 1d6:	ff 93       	push	r31
	static char idx = 0, buf_idx = 0; //명령어 배열 index 제어 
	RX_data = UDR0;
 1d8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 1dc:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <RX_data>
	
	if(idx < BUFFER_MAX && RX_cmd_count <= COMMAND_MAX) {
 1e0:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <idx.2082>
 1e4:	82 33       	cpi	r24, 0x32	; 50
 1e6:	08 f0       	brcs	.+2      	; 0x1ea <__vector_18+0x34>
 1e8:	40 c0       	rjmp	.+128    	; 0x26a <__vector_18+0xb4>
 1ea:	90 91 21 03 	lds	r25, 0x0321	; 0x800321 <RX_cmd_count>
 1ee:	9b 30       	cpi	r25, 0x0B	; 11
 1f0:	e0 f5       	brcc	.+120    	; 0x26a <__vector_18+0xb4>
		if(RX_data == '\r' || RX_data == '\n') { //명령이 들어옴
 1f2:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <RX_data>
 1f6:	9d 30       	cpi	r25, 0x0D	; 13
 1f8:	21 f0       	breq	.+8      	; 0x202 <__vector_18+0x4c>
 1fa:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <RX_data>
 1fe:	9a 30       	cpi	r25, 0x0A	; 10
 200:	19 f5       	brne	.+70     	; 0x248 <__vector_18+0x92>
			buffer[buf_idx][idx] = 0; //or '\0' //문자열의 마지막에 null 넣어주기
 202:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <buf_idx.2083>
 206:	22 e3       	ldi	r18, 0x32	; 50
 208:	92 9f       	mul	r25, r18
 20a:	f0 01       	movw	r30, r0
 20c:	11 24       	eor	r1, r1
 20e:	e3 5d       	subi	r30, 0xD3	; 211
 210:	fe 4f       	sbci	r31, 0xFE	; 254
 212:	e8 0f       	add	r30, r24
 214:	f1 1d       	adc	r31, r1
 216:	10 82       	st	Z, r1
			idx = 0; //다음 명령어를 받기위한 clear
 218:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <idx.2082>
			RX_cmd_count++;
 21c:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <RX_cmd_count>
 220:	8f 5f       	subi	r24, 0xFF	; 255
 222:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <RX_cmd_count>
			
			buf_idx++;
			buf_idx = buf_idx % COMMAND_MAX;
 226:	9f 5f       	subi	r25, 0xFF	; 255
 228:	8d ec       	ldi	r24, 0xCD	; 205
 22a:	98 9f       	mul	r25, r24
 22c:	81 2d       	mov	r24, r1
 22e:	11 24       	eor	r1, r1
 230:	86 95       	lsr	r24
 232:	86 95       	lsr	r24
 234:	86 95       	lsr	r24
 236:	88 0f       	add	r24, r24
 238:	28 2f       	mov	r18, r24
 23a:	22 0f       	add	r18, r18
 23c:	22 0f       	add	r18, r18
 23e:	82 0f       	add	r24, r18
 240:	98 1b       	sub	r25, r24
 242:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <buf_idx.2083>
 246:	11 c0       	rjmp	.+34     	; 0x26a <__vector_18+0xb4>
		}
		else buffer[buf_idx][idx++] = RX_data;
 248:	e0 91 25 01 	lds	r30, 0x0125	; 0x800125 <buf_idx.2083>
 24c:	91 e0       	ldi	r25, 0x01	; 1
 24e:	98 0f       	add	r25, r24
 250:	90 93 26 01 	sts	0x0126, r25	; 0x800126 <idx.2082>
 254:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <RX_data>
 258:	22 e3       	ldi	r18, 0x32	; 50
 25a:	e2 9f       	mul	r30, r18
 25c:	f0 01       	movw	r30, r0
 25e:	11 24       	eor	r1, r1
 260:	e3 5d       	subi	r30, 0xD3	; 211
 262:	fe 4f       	sbci	r31, 0xFE	; 254
 264:	e8 0f       	add	r30, r24
 266:	f1 1d       	adc	r31, r1
 268:	90 83       	st	Z, r25
	}
	
	TX0_char(RX_data);
 26a:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <RX_data>
 26e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <TX0_char>
	RX_flag = 1;
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	80 93 22 03 	sts	0x0322, r24	; 0x800322 <RX_flag>
}
 278:	ff 91       	pop	r31
 27a:	ef 91       	pop	r30
 27c:	bf 91       	pop	r27
 27e:	af 91       	pop	r26
 280:	9f 91       	pop	r25
 282:	8f 91       	pop	r24
 284:	7f 91       	pop	r23
 286:	6f 91       	pop	r22
 288:	5f 91       	pop	r21
 28a:	4f 91       	pop	r20
 28c:	3f 91       	pop	r19
 28e:	2f 91       	pop	r18
 290:	0f 90       	pop	r0
 292:	0f be       	out	0x3f, r0	; 63
 294:	0f 90       	pop	r0
 296:	1f 90       	pop	r1
 298:	18 95       	reti

0000029a <UART0_init>:
	
	return 0;
}

void UART0_init(unsigned long baud)
{
 29a:	cf 92       	push	r12
 29c:	df 92       	push	r13
 29e:	ef 92       	push	r14
 2a0:	ff 92       	push	r15
 2a2:	6b 01       	movw	r12, r22
 2a4:	7c 01       	movw	r14, r24
	char i;
	FILE* fpStdio = fdevopen(TX0_char, NULL);
 2a6:	60 e0       	ldi	r22, 0x00	; 0
 2a8:	70 e0       	ldi	r23, 0x00	; 0
 2aa:	83 ed       	ldi	r24, 0xD3	; 211
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	0e 94 0c 02 	call	0x418	; 0x418 <fdevopen>
	
	UCSR0B |= ((1 << RXCIE0) | (1<< RXEN0) | (1<< TXEN0));	//송신, 수신 , 수신 인터럽트 활성화
 2b2:	e1 ec       	ldi	r30, 0xC1	; 193
 2b4:	f0 e0       	ldi	r31, 0x00	; 0
 2b6:	80 81       	ld	r24, Z
 2b8:	88 69       	ori	r24, 0x98	; 152
 2ba:	80 83       	st	Z, r24
	/*
		//0b10011000; //bit7 : Rx complete interrupt enable, bit 4 : receiver enable , bit 3 : transmitter enable
		//7~2 bit 제어 레지스터 , 0~1 bit 데이터 레지스터
		//UCSZ 0~2 : char size / 2 -> UCSR0B , 0,1 -> UCSR0C / ASCII 8bit /9bit 통신 UCSR0B의 0, 1bit 사용(알아서된당)
	*/
	UCSR0C |= ((1 << UCSZ01) | (1 << UCSZ00));				//8bit 통신
 2bc:	e2 ec       	ldi	r30, 0xC2	; 194
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	80 81       	ld	r24, Z
 2c2:	86 60       	ori	r24, 0x06	; 6
 2c4:	80 83       	st	Z, r24
	/*
		//UCSR0C
		//7,6bit 0 0 -> Asynchronous 
	*/
	UBRR0H = ((F_CPU/16/baud)-1) >> 8; //상위 8bit
 2c6:	60 e4       	ldi	r22, 0x40	; 64
 2c8:	72 e4       	ldi	r23, 0x42	; 66
 2ca:	8f e0       	ldi	r24, 0x0F	; 15
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	a7 01       	movw	r20, r14
 2d0:	96 01       	movw	r18, r12
 2d2:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <__udivmodsi4>
 2d6:	da 01       	movw	r26, r20
 2d8:	c9 01       	movw	r24, r18
 2da:	01 97       	sbiw	r24, 0x01	; 1
 2dc:	a1 09       	sbc	r26, r1
 2de:	b1 09       	sbc	r27, r1
 2e0:	89 2f       	mov	r24, r25
 2e2:	9a 2f       	mov	r25, r26
 2e4:	ab 2f       	mov	r26, r27
 2e6:	bb 27       	eor	r27, r27
 2e8:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L =  ((F_CPU/16/baud)-1) & 0xFF; //하위 8bit//0x00FF//0b0000000011111111 //상위 8bit는 자리가 없어서 &안해줘도 안들어감
 2ec:	21 50       	subi	r18, 0x01	; 1
 2ee:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	/*
		// 9600은 우리가 설정해준 속도
		//Asynchronous Normal mode(U2X0 = 0으로 설정했음)
		//UBRR0L(low), UBRR0H(high) : 보호 레이트 레지스터 , 송수신 속도 맞춰주는
	*/
	i = UDR0; //수신 버퍼 비우기 // 한번 읽으면 비워지기 때문에 읽어주는 것 
 2f2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2f6:	8f e9       	ldi	r24, 0x9F	; 159
 2f8:	9f e0       	ldi	r25, 0x0F	; 15
 2fa:	01 97       	sbiw	r24, 0x01	; 1
 2fc:	f1 f7       	brne	.-4      	; 0x2fa <UART0_init+0x60>
 2fe:	00 c0       	rjmp	.+0      	; 0x300 <UART0_init+0x66>
 300:	00 00       	nop
			//송신, 수신 레지스터 이름을 같이 쓰는데 컴파일러가 알아서 구분해줌
	
	_delay_ms(1); //약간의 딜레이
	
	return;
}
 302:	ff 90       	pop	r15
 304:	ef 90       	pop	r14
 306:	df 90       	pop	r13
 308:	cf 90       	pop	r12
 30a:	08 95       	ret

0000030c <Uart_main>:
}
int Uart_main(void)
{
	//char long_key_flag = 0;
	char cmd_idx = 0;//명령어 처리를 위한 index
	UART0_init(9600);
 30c:	60 e8       	ldi	r22, 0x80	; 128
 30e:	75 e2       	ldi	r23, 0x25	; 37
 310:	80 e0       	ldi	r24, 0x00	; 0
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	0e 94 4d 01 	call	0x29a	; 0x29a <UART0_init>
 318:	8f e9       	ldi	r24, 0x9F	; 159
 31a:	9f e0       	ldi	r25, 0x0F	; 15
 31c:	01 97       	sbiw	r24, 0x01	; 1
 31e:	f1 f7       	brne	.-4      	; 0x31c <Uart_main+0x10>
 320:	00 c0       	rjmp	.+0      	; 0x322 <Uart_main+0x16>
 322:	00 00       	nop
	_delay_ms(1);
	DDRB |= 1 << PORTB5;
 324:	25 9a       	sbi	0x04, 5	; 4
	PORTB &= ~(1 << PORTB5);
 326:	2d 98       	cbi	0x05, 5	; 5
	sei();
 328:	78 94       	sei
	RX_flag = 1;
}
int Uart_main(void)
{
	//char long_key_flag = 0;
	char cmd_idx = 0;//명령어 처리를 위한 index
 32a:	c0 e0       	ldi	r28, 0x00	; 0
	
	while(1)
	{
		if(RX_cmd_count) {
			RX_cmd_count--;
			if(!strcmp(buffer[cmd_idx], "led on")) { //strcmp() : 비교해서 같으면 return 0
 32c:	0f 2e       	mov	r0, r31
 32e:	f2 e3       	ldi	r31, 0x32	; 50
 330:	ff 2e       	mov	r15, r31
 332:	f0 2d       	mov	r31, r0
			else if(!strcmp(buffer[cmd_idx], "led off")) { 
				PORTB &= ~(1 << PORTB5);
				
			}
			else if(!strcmp(buffer[cmd_idx], "led toggle")) {
				PORTB ^= 1 << PORTB5;
 334:	68 94       	set
 336:	ee 24       	eor	r14, r14
 338:	e5 f8       	bld	r14, 5
				
			}
			_delay_ms(1000);	
			cmd_idx++;
			cmd_idx = cmd_idx % COMMAND_MAX;
 33a:	dd ec       	ldi	r29, 0xCD	; 205
	PORTB &= ~(1 << PORTB5);
	sei();
	
	while(1)
	{
		if(RX_cmd_count) {
 33c:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <RX_cmd_count>
 340:	88 23       	and	r24, r24
 342:	e1 f3       	breq	.-8      	; 0x33c <Uart_main+0x30>
			RX_cmd_count--;
 344:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <RX_cmd_count>
 348:	81 50       	subi	r24, 0x01	; 1
 34a:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <RX_cmd_count>
			if(!strcmp(buffer[cmd_idx], "led on")) { //strcmp() : 비교해서 같으면 return 0
 34e:	fc 9e       	mul	r15, r28
 350:	80 01       	movw	r16, r0
 352:	11 24       	eor	r1, r1
 354:	03 5d       	subi	r16, 0xD3	; 211
 356:	1e 4f       	sbci	r17, 0xFE	; 254
 358:	6a e0       	ldi	r22, 0x0A	; 10
 35a:	71 e0       	ldi	r23, 0x01	; 1
 35c:	c8 01       	movw	r24, r16
 35e:	0e 94 03 02 	call	0x406	; 0x406 <strcmp>
 362:	89 2b       	or	r24, r25
 364:	11 f4       	brne	.+4      	; 0x36a <Uart_main+0x5e>
				PORTB |= 1 << PORTB5;
 366:	2d 9a       	sbi	0x05, 5	; 5
 368:	13 c0       	rjmp	.+38     	; 0x390 <Uart_main+0x84>
				
			}
			else if(!strcmp(buffer[cmd_idx], "led off")) { 
 36a:	61 e1       	ldi	r22, 0x11	; 17
 36c:	71 e0       	ldi	r23, 0x01	; 1
 36e:	c8 01       	movw	r24, r16
 370:	0e 94 03 02 	call	0x406	; 0x406 <strcmp>
 374:	89 2b       	or	r24, r25
 376:	11 f4       	brne	.+4      	; 0x37c <Uart_main+0x70>
				PORTB &= ~(1 << PORTB5);
 378:	2d 98       	cbi	0x05, 5	; 5
 37a:	0a c0       	rjmp	.+20     	; 0x390 <Uart_main+0x84>
				
			}
			else if(!strcmp(buffer[cmd_idx], "led toggle")) {
 37c:	69 e1       	ldi	r22, 0x19	; 25
 37e:	71 e0       	ldi	r23, 0x01	; 1
 380:	c8 01       	movw	r24, r16
 382:	0e 94 03 02 	call	0x406	; 0x406 <strcmp>
 386:	89 2b       	or	r24, r25
 388:	19 f4       	brne	.+6      	; 0x390 <Uart_main+0x84>
				PORTB ^= 1 << PORTB5;
 38a:	85 b1       	in	r24, 0x05	; 5
 38c:	8e 25       	eor	r24, r14
 38e:	85 b9       	out	0x05, r24	; 5
 390:	9f ef       	ldi	r25, 0xFF	; 255
 392:	23 ed       	ldi	r18, 0xD3	; 211
 394:	80 e3       	ldi	r24, 0x30	; 48
 396:	91 50       	subi	r25, 0x01	; 1
 398:	20 40       	sbci	r18, 0x00	; 0
 39a:	80 40       	sbci	r24, 0x00	; 0
 39c:	e1 f7       	brne	.-8      	; 0x396 <Uart_main+0x8a>
 39e:	00 c0       	rjmp	.+0      	; 0x3a0 <Uart_main+0x94>
 3a0:	00 00       	nop
				
			}
			_delay_ms(1000);	
			cmd_idx++;
 3a2:	91 e0       	ldi	r25, 0x01	; 1
 3a4:	9c 0f       	add	r25, r28
			cmd_idx = cmd_idx % COMMAND_MAX;
 3a6:	9d 9f       	mul	r25, r29
 3a8:	c1 2d       	mov	r28, r1
 3aa:	11 24       	eor	r1, r1
 3ac:	c6 95       	lsr	r28
 3ae:	c6 95       	lsr	r28
 3b0:	c6 95       	lsr	r28
 3b2:	cc 0f       	add	r28, r28
 3b4:	8c 2f       	mov	r24, r28
 3b6:	88 0f       	add	r24, r24
 3b8:	88 0f       	add	r24, r24
 3ba:	c8 0f       	add	r28, r24
 3bc:	9c 1b       	sub	r25, r28
 3be:	c9 2f       	mov	r28, r25
 3c0:	bd cf       	rjmp	.-134    	; 0x33c <Uart_main+0x30>

000003c2 <__udivmodsi4>:
 3c2:	a1 e2       	ldi	r26, 0x21	; 33
 3c4:	1a 2e       	mov	r1, r26
 3c6:	aa 1b       	sub	r26, r26
 3c8:	bb 1b       	sub	r27, r27
 3ca:	fd 01       	movw	r30, r26
 3cc:	0d c0       	rjmp	.+26     	; 0x3e8 <__udivmodsi4_ep>

000003ce <__udivmodsi4_loop>:
 3ce:	aa 1f       	adc	r26, r26
 3d0:	bb 1f       	adc	r27, r27
 3d2:	ee 1f       	adc	r30, r30
 3d4:	ff 1f       	adc	r31, r31
 3d6:	a2 17       	cp	r26, r18
 3d8:	b3 07       	cpc	r27, r19
 3da:	e4 07       	cpc	r30, r20
 3dc:	f5 07       	cpc	r31, r21
 3de:	20 f0       	brcs	.+8      	; 0x3e8 <__udivmodsi4_ep>
 3e0:	a2 1b       	sub	r26, r18
 3e2:	b3 0b       	sbc	r27, r19
 3e4:	e4 0b       	sbc	r30, r20
 3e6:	f5 0b       	sbc	r31, r21

000003e8 <__udivmodsi4_ep>:
 3e8:	66 1f       	adc	r22, r22
 3ea:	77 1f       	adc	r23, r23
 3ec:	88 1f       	adc	r24, r24
 3ee:	99 1f       	adc	r25, r25
 3f0:	1a 94       	dec	r1
 3f2:	69 f7       	brne	.-38     	; 0x3ce <__udivmodsi4_loop>
 3f4:	60 95       	com	r22
 3f6:	70 95       	com	r23
 3f8:	80 95       	com	r24
 3fa:	90 95       	com	r25
 3fc:	9b 01       	movw	r18, r22
 3fe:	ac 01       	movw	r20, r24
 400:	bd 01       	movw	r22, r26
 402:	cf 01       	movw	r24, r30
 404:	08 95       	ret

00000406 <strcmp>:
 406:	fb 01       	movw	r30, r22
 408:	dc 01       	movw	r26, r24
 40a:	8d 91       	ld	r24, X+
 40c:	01 90       	ld	r0, Z+
 40e:	80 19       	sub	r24, r0
 410:	01 10       	cpse	r0, r1
 412:	d9 f3       	breq	.-10     	; 0x40a <strcmp+0x4>
 414:	99 0b       	sbc	r25, r25
 416:	08 95       	ret

00000418 <fdevopen>:
 418:	0f 93       	push	r16
 41a:	1f 93       	push	r17
 41c:	cf 93       	push	r28
 41e:	df 93       	push	r29
 420:	00 97       	sbiw	r24, 0x00	; 0
 422:	31 f4       	brne	.+12     	; 0x430 <fdevopen+0x18>
 424:	61 15       	cp	r22, r1
 426:	71 05       	cpc	r23, r1
 428:	19 f4       	brne	.+6      	; 0x430 <fdevopen+0x18>
 42a:	80 e0       	ldi	r24, 0x00	; 0
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	3a c0       	rjmp	.+116    	; 0x4a4 <fdevopen+0x8c>
 430:	8b 01       	movw	r16, r22
 432:	ec 01       	movw	r28, r24
 434:	6e e0       	ldi	r22, 0x0E	; 14
 436:	70 e0       	ldi	r23, 0x00	; 0
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	0e 94 57 02 	call	0x4ae	; 0x4ae <calloc>
 440:	fc 01       	movw	r30, r24
 442:	89 2b       	or	r24, r25
 444:	91 f3       	breq	.-28     	; 0x42a <fdevopen+0x12>
 446:	80 e8       	ldi	r24, 0x80	; 128
 448:	83 83       	std	Z+3, r24	; 0x03
 44a:	01 15       	cp	r16, r1
 44c:	11 05       	cpc	r17, r1
 44e:	71 f0       	breq	.+28     	; 0x46c <fdevopen+0x54>
 450:	13 87       	std	Z+11, r17	; 0x0b
 452:	02 87       	std	Z+10, r16	; 0x0a
 454:	81 e8       	ldi	r24, 0x81	; 129
 456:	83 83       	std	Z+3, r24	; 0x03
 458:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <__iob>
 45c:	90 91 24 03 	lds	r25, 0x0324	; 0x800324 <__iob+0x1>
 460:	89 2b       	or	r24, r25
 462:	21 f4       	brne	.+8      	; 0x46c <fdevopen+0x54>
 464:	f0 93 24 03 	sts	0x0324, r31	; 0x800324 <__iob+0x1>
 468:	e0 93 23 03 	sts	0x0323, r30	; 0x800323 <__iob>
 46c:	20 97       	sbiw	r28, 0x00	; 0
 46e:	c9 f0       	breq	.+50     	; 0x4a2 <fdevopen+0x8a>
 470:	d1 87       	std	Z+9, r29	; 0x09
 472:	c0 87       	std	Z+8, r28	; 0x08
 474:	83 81       	ldd	r24, Z+3	; 0x03
 476:	82 60       	ori	r24, 0x02	; 2
 478:	83 83       	std	Z+3, r24	; 0x03
 47a:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <__iob+0x2>
 47e:	90 91 26 03 	lds	r25, 0x0326	; 0x800326 <__iob+0x3>
 482:	89 2b       	or	r24, r25
 484:	71 f4       	brne	.+28     	; 0x4a2 <fdevopen+0x8a>
 486:	f0 93 26 03 	sts	0x0326, r31	; 0x800326 <__iob+0x3>
 48a:	e0 93 25 03 	sts	0x0325, r30	; 0x800325 <__iob+0x2>
 48e:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <__iob+0x4>
 492:	90 91 28 03 	lds	r25, 0x0328	; 0x800328 <__iob+0x5>
 496:	89 2b       	or	r24, r25
 498:	21 f4       	brne	.+8      	; 0x4a2 <fdevopen+0x8a>
 49a:	f0 93 28 03 	sts	0x0328, r31	; 0x800328 <__iob+0x5>
 49e:	e0 93 27 03 	sts	0x0327, r30	; 0x800327 <__iob+0x4>
 4a2:	cf 01       	movw	r24, r30
 4a4:	df 91       	pop	r29
 4a6:	cf 91       	pop	r28
 4a8:	1f 91       	pop	r17
 4aa:	0f 91       	pop	r16
 4ac:	08 95       	ret

000004ae <calloc>:
 4ae:	0f 93       	push	r16
 4b0:	1f 93       	push	r17
 4b2:	cf 93       	push	r28
 4b4:	df 93       	push	r29
 4b6:	86 9f       	mul	r24, r22
 4b8:	80 01       	movw	r16, r0
 4ba:	87 9f       	mul	r24, r23
 4bc:	10 0d       	add	r17, r0
 4be:	96 9f       	mul	r25, r22
 4c0:	10 0d       	add	r17, r0
 4c2:	11 24       	eor	r1, r1
 4c4:	c8 01       	movw	r24, r16
 4c6:	0e 94 73 02 	call	0x4e6	; 0x4e6 <malloc>
 4ca:	ec 01       	movw	r28, r24
 4cc:	00 97       	sbiw	r24, 0x00	; 0
 4ce:	29 f0       	breq	.+10     	; 0x4da <calloc+0x2c>
 4d0:	a8 01       	movw	r20, r16
 4d2:	60 e0       	ldi	r22, 0x00	; 0
 4d4:	70 e0       	ldi	r23, 0x00	; 0
 4d6:	0e 94 94 03 	call	0x728	; 0x728 <memset>
 4da:	ce 01       	movw	r24, r28
 4dc:	df 91       	pop	r29
 4de:	cf 91       	pop	r28
 4e0:	1f 91       	pop	r17
 4e2:	0f 91       	pop	r16
 4e4:	08 95       	ret

000004e6 <malloc>:
 4e6:	0f 93       	push	r16
 4e8:	1f 93       	push	r17
 4ea:	cf 93       	push	r28
 4ec:	df 93       	push	r29
 4ee:	82 30       	cpi	r24, 0x02	; 2
 4f0:	91 05       	cpc	r25, r1
 4f2:	10 f4       	brcc	.+4      	; 0x4f8 <malloc+0x12>
 4f4:	82 e0       	ldi	r24, 0x02	; 2
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	e0 91 2b 03 	lds	r30, 0x032B	; 0x80032b <__flp>
 4fc:	f0 91 2c 03 	lds	r31, 0x032C	; 0x80032c <__flp+0x1>
 500:	20 e0       	ldi	r18, 0x00	; 0
 502:	30 e0       	ldi	r19, 0x00	; 0
 504:	a0 e0       	ldi	r26, 0x00	; 0
 506:	b0 e0       	ldi	r27, 0x00	; 0
 508:	30 97       	sbiw	r30, 0x00	; 0
 50a:	19 f1       	breq	.+70     	; 0x552 <malloc+0x6c>
 50c:	40 81       	ld	r20, Z
 50e:	51 81       	ldd	r21, Z+1	; 0x01
 510:	02 81       	ldd	r16, Z+2	; 0x02
 512:	13 81       	ldd	r17, Z+3	; 0x03
 514:	48 17       	cp	r20, r24
 516:	59 07       	cpc	r21, r25
 518:	c8 f0       	brcs	.+50     	; 0x54c <malloc+0x66>
 51a:	84 17       	cp	r24, r20
 51c:	95 07       	cpc	r25, r21
 51e:	69 f4       	brne	.+26     	; 0x53a <malloc+0x54>
 520:	10 97       	sbiw	r26, 0x00	; 0
 522:	31 f0       	breq	.+12     	; 0x530 <malloc+0x4a>
 524:	12 96       	adiw	r26, 0x02	; 2
 526:	0c 93       	st	X, r16
 528:	12 97       	sbiw	r26, 0x02	; 2
 52a:	13 96       	adiw	r26, 0x03	; 3
 52c:	1c 93       	st	X, r17
 52e:	27 c0       	rjmp	.+78     	; 0x57e <malloc+0x98>
 530:	00 93 2b 03 	sts	0x032B, r16	; 0x80032b <__flp>
 534:	10 93 2c 03 	sts	0x032C, r17	; 0x80032c <__flp+0x1>
 538:	22 c0       	rjmp	.+68     	; 0x57e <malloc+0x98>
 53a:	21 15       	cp	r18, r1
 53c:	31 05       	cpc	r19, r1
 53e:	19 f0       	breq	.+6      	; 0x546 <malloc+0x60>
 540:	42 17       	cp	r20, r18
 542:	53 07       	cpc	r21, r19
 544:	18 f4       	brcc	.+6      	; 0x54c <malloc+0x66>
 546:	9a 01       	movw	r18, r20
 548:	bd 01       	movw	r22, r26
 54a:	ef 01       	movw	r28, r30
 54c:	df 01       	movw	r26, r30
 54e:	f8 01       	movw	r30, r16
 550:	db cf       	rjmp	.-74     	; 0x508 <malloc+0x22>
 552:	21 15       	cp	r18, r1
 554:	31 05       	cpc	r19, r1
 556:	f9 f0       	breq	.+62     	; 0x596 <malloc+0xb0>
 558:	28 1b       	sub	r18, r24
 55a:	39 0b       	sbc	r19, r25
 55c:	24 30       	cpi	r18, 0x04	; 4
 55e:	31 05       	cpc	r19, r1
 560:	80 f4       	brcc	.+32     	; 0x582 <malloc+0x9c>
 562:	8a 81       	ldd	r24, Y+2	; 0x02
 564:	9b 81       	ldd	r25, Y+3	; 0x03
 566:	61 15       	cp	r22, r1
 568:	71 05       	cpc	r23, r1
 56a:	21 f0       	breq	.+8      	; 0x574 <malloc+0x8e>
 56c:	fb 01       	movw	r30, r22
 56e:	93 83       	std	Z+3, r25	; 0x03
 570:	82 83       	std	Z+2, r24	; 0x02
 572:	04 c0       	rjmp	.+8      	; 0x57c <malloc+0x96>
 574:	90 93 2c 03 	sts	0x032C, r25	; 0x80032c <__flp+0x1>
 578:	80 93 2b 03 	sts	0x032B, r24	; 0x80032b <__flp>
 57c:	fe 01       	movw	r30, r28
 57e:	32 96       	adiw	r30, 0x02	; 2
 580:	44 c0       	rjmp	.+136    	; 0x60a <malloc+0x124>
 582:	fe 01       	movw	r30, r28
 584:	e2 0f       	add	r30, r18
 586:	f3 1f       	adc	r31, r19
 588:	81 93       	st	Z+, r24
 58a:	91 93       	st	Z+, r25
 58c:	22 50       	subi	r18, 0x02	; 2
 58e:	31 09       	sbc	r19, r1
 590:	39 83       	std	Y+1, r19	; 0x01
 592:	28 83       	st	Y, r18
 594:	3a c0       	rjmp	.+116    	; 0x60a <malloc+0x124>
 596:	20 91 29 03 	lds	r18, 0x0329	; 0x800329 <__brkval>
 59a:	30 91 2a 03 	lds	r19, 0x032A	; 0x80032a <__brkval+0x1>
 59e:	23 2b       	or	r18, r19
 5a0:	41 f4       	brne	.+16     	; 0x5b2 <malloc+0xcc>
 5a2:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 5a6:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 5aa:	30 93 2a 03 	sts	0x032A, r19	; 0x80032a <__brkval+0x1>
 5ae:	20 93 29 03 	sts	0x0329, r18	; 0x800329 <__brkval>
 5b2:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 5b6:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 5ba:	21 15       	cp	r18, r1
 5bc:	31 05       	cpc	r19, r1
 5be:	41 f4       	brne	.+16     	; 0x5d0 <malloc+0xea>
 5c0:	2d b7       	in	r18, 0x3d	; 61
 5c2:	3e b7       	in	r19, 0x3e	; 62
 5c4:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 5c8:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 5cc:	24 1b       	sub	r18, r20
 5ce:	35 0b       	sbc	r19, r21
 5d0:	e0 91 29 03 	lds	r30, 0x0329	; 0x800329 <__brkval>
 5d4:	f0 91 2a 03 	lds	r31, 0x032A	; 0x80032a <__brkval+0x1>
 5d8:	e2 17       	cp	r30, r18
 5da:	f3 07       	cpc	r31, r19
 5dc:	a0 f4       	brcc	.+40     	; 0x606 <malloc+0x120>
 5de:	2e 1b       	sub	r18, r30
 5e0:	3f 0b       	sbc	r19, r31
 5e2:	28 17       	cp	r18, r24
 5e4:	39 07       	cpc	r19, r25
 5e6:	78 f0       	brcs	.+30     	; 0x606 <malloc+0x120>
 5e8:	ac 01       	movw	r20, r24
 5ea:	4e 5f       	subi	r20, 0xFE	; 254
 5ec:	5f 4f       	sbci	r21, 0xFF	; 255
 5ee:	24 17       	cp	r18, r20
 5f0:	35 07       	cpc	r19, r21
 5f2:	48 f0       	brcs	.+18     	; 0x606 <malloc+0x120>
 5f4:	4e 0f       	add	r20, r30
 5f6:	5f 1f       	adc	r21, r31
 5f8:	50 93 2a 03 	sts	0x032A, r21	; 0x80032a <__brkval+0x1>
 5fc:	40 93 29 03 	sts	0x0329, r20	; 0x800329 <__brkval>
 600:	81 93       	st	Z+, r24
 602:	91 93       	st	Z+, r25
 604:	02 c0       	rjmp	.+4      	; 0x60a <malloc+0x124>
 606:	e0 e0       	ldi	r30, 0x00	; 0
 608:	f0 e0       	ldi	r31, 0x00	; 0
 60a:	cf 01       	movw	r24, r30
 60c:	df 91       	pop	r29
 60e:	cf 91       	pop	r28
 610:	1f 91       	pop	r17
 612:	0f 91       	pop	r16
 614:	08 95       	ret

00000616 <free>:
 616:	cf 93       	push	r28
 618:	df 93       	push	r29
 61a:	00 97       	sbiw	r24, 0x00	; 0
 61c:	09 f4       	brne	.+2      	; 0x620 <free+0xa>
 61e:	81 c0       	rjmp	.+258    	; 0x722 <free+0x10c>
 620:	fc 01       	movw	r30, r24
 622:	32 97       	sbiw	r30, 0x02	; 2
 624:	13 82       	std	Z+3, r1	; 0x03
 626:	12 82       	std	Z+2, r1	; 0x02
 628:	a0 91 2b 03 	lds	r26, 0x032B	; 0x80032b <__flp>
 62c:	b0 91 2c 03 	lds	r27, 0x032C	; 0x80032c <__flp+0x1>
 630:	10 97       	sbiw	r26, 0x00	; 0
 632:	81 f4       	brne	.+32     	; 0x654 <free+0x3e>
 634:	20 81       	ld	r18, Z
 636:	31 81       	ldd	r19, Z+1	; 0x01
 638:	82 0f       	add	r24, r18
 63a:	93 1f       	adc	r25, r19
 63c:	20 91 29 03 	lds	r18, 0x0329	; 0x800329 <__brkval>
 640:	30 91 2a 03 	lds	r19, 0x032A	; 0x80032a <__brkval+0x1>
 644:	28 17       	cp	r18, r24
 646:	39 07       	cpc	r19, r25
 648:	51 f5       	brne	.+84     	; 0x69e <free+0x88>
 64a:	f0 93 2a 03 	sts	0x032A, r31	; 0x80032a <__brkval+0x1>
 64e:	e0 93 29 03 	sts	0x0329, r30	; 0x800329 <__brkval>
 652:	67 c0       	rjmp	.+206    	; 0x722 <free+0x10c>
 654:	ed 01       	movw	r28, r26
 656:	20 e0       	ldi	r18, 0x00	; 0
 658:	30 e0       	ldi	r19, 0x00	; 0
 65a:	ce 17       	cp	r28, r30
 65c:	df 07       	cpc	r29, r31
 65e:	40 f4       	brcc	.+16     	; 0x670 <free+0x5a>
 660:	4a 81       	ldd	r20, Y+2	; 0x02
 662:	5b 81       	ldd	r21, Y+3	; 0x03
 664:	9e 01       	movw	r18, r28
 666:	41 15       	cp	r20, r1
 668:	51 05       	cpc	r21, r1
 66a:	f1 f0       	breq	.+60     	; 0x6a8 <free+0x92>
 66c:	ea 01       	movw	r28, r20
 66e:	f5 cf       	rjmp	.-22     	; 0x65a <free+0x44>
 670:	d3 83       	std	Z+3, r29	; 0x03
 672:	c2 83       	std	Z+2, r28	; 0x02
 674:	40 81       	ld	r20, Z
 676:	51 81       	ldd	r21, Z+1	; 0x01
 678:	84 0f       	add	r24, r20
 67a:	95 1f       	adc	r25, r21
 67c:	c8 17       	cp	r28, r24
 67e:	d9 07       	cpc	r29, r25
 680:	59 f4       	brne	.+22     	; 0x698 <free+0x82>
 682:	88 81       	ld	r24, Y
 684:	99 81       	ldd	r25, Y+1	; 0x01
 686:	84 0f       	add	r24, r20
 688:	95 1f       	adc	r25, r21
 68a:	02 96       	adiw	r24, 0x02	; 2
 68c:	91 83       	std	Z+1, r25	; 0x01
 68e:	80 83       	st	Z, r24
 690:	8a 81       	ldd	r24, Y+2	; 0x02
 692:	9b 81       	ldd	r25, Y+3	; 0x03
 694:	93 83       	std	Z+3, r25	; 0x03
 696:	82 83       	std	Z+2, r24	; 0x02
 698:	21 15       	cp	r18, r1
 69a:	31 05       	cpc	r19, r1
 69c:	29 f4       	brne	.+10     	; 0x6a8 <free+0x92>
 69e:	f0 93 2c 03 	sts	0x032C, r31	; 0x80032c <__flp+0x1>
 6a2:	e0 93 2b 03 	sts	0x032B, r30	; 0x80032b <__flp>
 6a6:	3d c0       	rjmp	.+122    	; 0x722 <free+0x10c>
 6a8:	e9 01       	movw	r28, r18
 6aa:	fb 83       	std	Y+3, r31	; 0x03
 6ac:	ea 83       	std	Y+2, r30	; 0x02
 6ae:	49 91       	ld	r20, Y+
 6b0:	59 91       	ld	r21, Y+
 6b2:	c4 0f       	add	r28, r20
 6b4:	d5 1f       	adc	r29, r21
 6b6:	ec 17       	cp	r30, r28
 6b8:	fd 07       	cpc	r31, r29
 6ba:	61 f4       	brne	.+24     	; 0x6d4 <free+0xbe>
 6bc:	80 81       	ld	r24, Z
 6be:	91 81       	ldd	r25, Z+1	; 0x01
 6c0:	84 0f       	add	r24, r20
 6c2:	95 1f       	adc	r25, r21
 6c4:	02 96       	adiw	r24, 0x02	; 2
 6c6:	e9 01       	movw	r28, r18
 6c8:	99 83       	std	Y+1, r25	; 0x01
 6ca:	88 83       	st	Y, r24
 6cc:	82 81       	ldd	r24, Z+2	; 0x02
 6ce:	93 81       	ldd	r25, Z+3	; 0x03
 6d0:	9b 83       	std	Y+3, r25	; 0x03
 6d2:	8a 83       	std	Y+2, r24	; 0x02
 6d4:	e0 e0       	ldi	r30, 0x00	; 0
 6d6:	f0 e0       	ldi	r31, 0x00	; 0
 6d8:	12 96       	adiw	r26, 0x02	; 2
 6da:	8d 91       	ld	r24, X+
 6dc:	9c 91       	ld	r25, X
 6de:	13 97       	sbiw	r26, 0x03	; 3
 6e0:	00 97       	sbiw	r24, 0x00	; 0
 6e2:	19 f0       	breq	.+6      	; 0x6ea <free+0xd4>
 6e4:	fd 01       	movw	r30, r26
 6e6:	dc 01       	movw	r26, r24
 6e8:	f7 cf       	rjmp	.-18     	; 0x6d8 <free+0xc2>
 6ea:	8d 91       	ld	r24, X+
 6ec:	9c 91       	ld	r25, X
 6ee:	11 97       	sbiw	r26, 0x01	; 1
 6f0:	9d 01       	movw	r18, r26
 6f2:	2e 5f       	subi	r18, 0xFE	; 254
 6f4:	3f 4f       	sbci	r19, 0xFF	; 255
 6f6:	82 0f       	add	r24, r18
 6f8:	93 1f       	adc	r25, r19
 6fa:	20 91 29 03 	lds	r18, 0x0329	; 0x800329 <__brkval>
 6fe:	30 91 2a 03 	lds	r19, 0x032A	; 0x80032a <__brkval+0x1>
 702:	28 17       	cp	r18, r24
 704:	39 07       	cpc	r19, r25
 706:	69 f4       	brne	.+26     	; 0x722 <free+0x10c>
 708:	30 97       	sbiw	r30, 0x00	; 0
 70a:	29 f4       	brne	.+10     	; 0x716 <free+0x100>
 70c:	10 92 2c 03 	sts	0x032C, r1	; 0x80032c <__flp+0x1>
 710:	10 92 2b 03 	sts	0x032B, r1	; 0x80032b <__flp>
 714:	02 c0       	rjmp	.+4      	; 0x71a <free+0x104>
 716:	13 82       	std	Z+3, r1	; 0x03
 718:	12 82       	std	Z+2, r1	; 0x02
 71a:	b0 93 2a 03 	sts	0x032A, r27	; 0x80032a <__brkval+0x1>
 71e:	a0 93 29 03 	sts	0x0329, r26	; 0x800329 <__brkval>
 722:	df 91       	pop	r29
 724:	cf 91       	pop	r28
 726:	08 95       	ret

00000728 <memset>:
 728:	dc 01       	movw	r26, r24
 72a:	01 c0       	rjmp	.+2      	; 0x72e <memset+0x6>
 72c:	6d 93       	st	X+, r22
 72e:	41 50       	subi	r20, 0x01	; 1
 730:	50 40       	sbci	r21, 0x00	; 0
 732:	e0 f7       	brcc	.-8      	; 0x72c <memset+0x4>
 734:	08 95       	ret

00000736 <_exit>:
 736:	f8 94       	cli

00000738 <__stop_program>:
 738:	ff cf       	rjmp	.-2      	; 0x738 <__stop_program>
