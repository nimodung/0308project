
KeypadMatchGame.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000010e  00800100  00000e54  00000ee8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e54  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003f  0080020e  0080020e  00000ff6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ff6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001028  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00001068  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019ee  00000000  00000000  000011d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d4a  00000000  00000000  00002bc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001120  00000000  00000000  00003910  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003dc  00000000  00000000  00004a30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007b9  00000000  00000000  00004e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e83  00000000  00000000  000055c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  00006448  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 69 03 	jmp	0x6d2	; 0x6d2 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e5       	ldi	r30, 0x54	; 84
  7c:	fe e0       	ldi	r31, 0x0E	; 14
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 34       	cpi	r26, 0x4D	; 77
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ad 02 	call	0x55a	; 0x55a <main>
  9e:	0c 94 28 07 	jmp	0xe50	; 0xe50 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <FND4digit_init_shiftR>:
	FND[0] = FND4digit_font[msec /10 % 10];
	FND[1] = FND4digit_font[msec /100 % 10];
	FND[2] = FND4digit_font[sec % 10] & (~(1<< FND_p));
	FND[3] = FND4digit_font[sec /10 % 10];
	return;
}
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	80 6f       	ori	r24, 0xF0	; 240
  aa:	8a b9       	out	0x0a, r24	; 10
  ac:	8b b1       	in	r24, 0x0b	; 11
  ae:	8f 70       	andi	r24, 0x0F	; 15
  b0:	8b b9       	out	0x0b, r24	; 11
  b2:	87 b1       	in	r24, 0x07	; 7
  b4:	88 63       	ori	r24, 0x38	; 56
  b6:	87 b9       	out	0x07, r24	; 7
  b8:	44 9a       	sbi	0x08, 4	; 8
  ba:	08 95       	ret

000000bc <FND_shift_out>:
  bc:	44 98       	cbi	0x08, 4	; 8
  be:	40 e0       	ldi	r20, 0x00	; 0
  c0:	50 e0       	ldi	r21, 0x00	; 0
  c2:	68 2f       	mov	r22, r24
  c4:	70 e0       	ldi	r23, 0x00	; 0
  c6:	45 98       	cbi	0x08, 5	; 8
  c8:	43 98       	cbi	0x08, 3	; 8
  ca:	98 b1       	in	r25, 0x08	; 8
  cc:	9b 01       	movw	r18, r22
  ce:	04 2e       	mov	r0, r20
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <FND_shift_out+0x1a>
  d2:	35 95       	asr	r19
  d4:	27 95       	ror	r18
  d6:	0a 94       	dec	r0
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <FND_shift_out+0x16>
  da:	21 70       	andi	r18, 0x01	; 1
  dc:	33 27       	eor	r19, r19
  de:	22 0f       	add	r18, r18
  e0:	33 1f       	adc	r19, r19
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	22 0f       	add	r18, r18
  e8:	33 1f       	adc	r19, r19
  ea:	29 2b       	or	r18, r25
  ec:	28 b9       	out	0x08, r18	; 8
  ee:	45 9a       	sbi	0x08, 5	; 8
  f0:	4f 5f       	subi	r20, 0xFF	; 255
  f2:	5f 4f       	sbci	r21, 0xFF	; 255
  f4:	48 30       	cpi	r20, 0x08	; 8
  f6:	51 05       	cpc	r21, r1
  f8:	31 f7       	brne	.-52     	; 0xc6 <FND_shift_out+0xa>
  fa:	44 9a       	sbi	0x08, 4	; 8
  fc:	08 95       	ret

000000fe <FND_update_word>:
  fe:	cf 93       	push	r28
 100:	df 93       	push	r29
 102:	ec 01       	movw	r28, r24
 104:	ae e3       	ldi	r26, 0x3E	; 62
 106:	b2 e0       	ldi	r27, 0x02	; 2
 108:	2a e3       	ldi	r18, 0x3A	; 58
 10a:	32 e0       	ldi	r19, 0x02	; 2
 10c:	e9 91       	ld	r30, Y+
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	e9 55       	subi	r30, 0x59	; 89
 112:	ff 4f       	sbci	r31, 0xFF	; 255
 114:	80 81       	ld	r24, Z
 116:	8e 93       	st	-X, r24
 118:	a2 17       	cp	r26, r18
 11a:	b3 07       	cpc	r27, r19
 11c:	b9 f7       	brne	.-18     	; 0x10c <FND_update_word+0xe>
 11e:	df 91       	pop	r29
 120:	cf 91       	pop	r28
 122:	08 95       	ret

00000124 <FND_clock>:

void FND_clock(char sec, char min)
{
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
	FND[0] = FND4digit_font[sec % 10];
 128:	aa e3       	ldi	r26, 0x3A	; 58
 12a:	b2 e0       	ldi	r27, 0x02	; 2
 12c:	9d ec       	ldi	r25, 0xCD	; 205
 12e:	89 9f       	mul	r24, r25
 130:	e1 2d       	mov	r30, r1
 132:	11 24       	eor	r1, r1
 134:	e6 95       	lsr	r30
 136:	e6 95       	lsr	r30
 138:	e6 95       	lsr	r30
 13a:	3e 2f       	mov	r19, r30
 13c:	33 0f       	add	r19, r19
 13e:	23 2f       	mov	r18, r19
 140:	22 0f       	add	r18, r18
 142:	22 0f       	add	r18, r18
 144:	23 0f       	add	r18, r19
 146:	82 1b       	sub	r24, r18
 148:	c8 2f       	mov	r28, r24
 14a:	d0 e0       	ldi	r29, 0x00	; 0
 14c:	ce 5d       	subi	r28, 0xDE	; 222
 14e:	de 4f       	sbci	r29, 0xFE	; 254
 150:	88 81       	ld	r24, Y
 152:	8c 93       	st	X, r24
	FND[1] = FND4digit_font[sec /10 % 10];
 154:	e9 9f       	mul	r30, r25
 156:	81 2d       	mov	r24, r1
 158:	11 24       	eor	r1, r1
 15a:	86 95       	lsr	r24
 15c:	86 95       	lsr	r24
 15e:	86 95       	lsr	r24
 160:	88 0f       	add	r24, r24
 162:	28 2f       	mov	r18, r24
 164:	22 0f       	add	r18, r18
 166:	22 0f       	add	r18, r18
 168:	82 0f       	add	r24, r18
 16a:	e8 1b       	sub	r30, r24
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	ee 5d       	subi	r30, 0xDE	; 222
 170:	fe 4f       	sbci	r31, 0xFE	; 254
 172:	80 81       	ld	r24, Z
 174:	11 96       	adiw	r26, 0x01	; 1
 176:	8c 93       	st	X, r24
 178:	11 97       	sbiw	r26, 0x01	; 1
	FND[2] = FND4digit_font[min % 10] & (~(1<< FND_p));
 17a:	69 9f       	mul	r22, r25
 17c:	e1 2d       	mov	r30, r1
 17e:	11 24       	eor	r1, r1
 180:	e6 95       	lsr	r30
 182:	e6 95       	lsr	r30
 184:	e6 95       	lsr	r30
 186:	2e 2f       	mov	r18, r30
 188:	22 0f       	add	r18, r18
 18a:	82 2f       	mov	r24, r18
 18c:	88 0f       	add	r24, r24
 18e:	88 0f       	add	r24, r24
 190:	82 0f       	add	r24, r18
 192:	68 1b       	sub	r22, r24
 194:	c6 2f       	mov	r28, r22
 196:	d0 e0       	ldi	r29, 0x00	; 0
 198:	ce 5d       	subi	r28, 0xDE	; 222
 19a:	de 4f       	sbci	r29, 0xFE	; 254
 19c:	88 81       	ld	r24, Y
 19e:	8d 7f       	andi	r24, 0xFD	; 253
 1a0:	12 96       	adiw	r26, 0x02	; 2
 1a2:	8c 93       	st	X, r24
 1a4:	12 97       	sbiw	r26, 0x02	; 2
	FND[3] = FND4digit_font[min /10 % 10];
 1a6:	e9 9f       	mul	r30, r25
 1a8:	91 2d       	mov	r25, r1
 1aa:	11 24       	eor	r1, r1
 1ac:	96 95       	lsr	r25
 1ae:	96 95       	lsr	r25
 1b0:	96 95       	lsr	r25
 1b2:	99 0f       	add	r25, r25
 1b4:	89 2f       	mov	r24, r25
 1b6:	88 0f       	add	r24, r24
 1b8:	88 0f       	add	r24, r24
 1ba:	98 0f       	add	r25, r24
 1bc:	e9 1b       	sub	r30, r25
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	ee 5d       	subi	r30, 0xDE	; 222
 1c2:	fe 4f       	sbci	r31, 0xFE	; 254
 1c4:	80 81       	ld	r24, Z
 1c6:	13 96       	adiw	r26, 0x03	; 3
 1c8:	8c 93       	st	X, r24
	return;
}
 1ca:	df 91       	pop	r29
 1cc:	cf 91       	pop	r28
 1ce:	08 95       	ret

000001d0 <FND_off>:

void FND_off(void) {
	FND[0] = 255;
 1d0:	ea e3       	ldi	r30, 0x3A	; 58
 1d2:	f2 e0       	ldi	r31, 0x02	; 2
 1d4:	8f ef       	ldi	r24, 0xFF	; 255
 1d6:	80 83       	st	Z, r24
	FND[1] = 255;
 1d8:	81 83       	std	Z+1, r24	; 0x01
	FND[2] = 255;
 1da:	82 83       	std	Z+2, r24	; 0x02
	FND[3] = 255;
 1dc:	83 83       	std	Z+3, r24	; 0x03
 1de:	08 95       	ret

000001e0 <Keypad_init>:

#include "Keypad.h"

void Keypad_init(void)
{
	Keypad_PORT_DDR |= 0b00001111; //포트D 상위 4bit 출력으로 설정
 1e0:	8a b1       	in	r24, 0x0a	; 10
 1e2:	8f 60       	ori	r24, 0x0F	; 15
 1e4:	8a b9       	out	0x0a, r24	; 10
	Keypad_PORT |= 0b00001111; // 상위 4bit 끄고 시작(풀업저항)
 1e6:	8b b1       	in	r24, 0x0b	; 11
 1e8:	8f 60       	ori	r24, 0x0F	; 15
 1ea:	8b b9       	out	0x0b, r24	; 11
	Keypad_PIN_DDR &= 0b11000011; //포트B 하위 4bit 입력으로 설정
 1ec:	84 b1       	in	r24, 0x04	; 4
 1ee:	83 7c       	andi	r24, 0xC3	; 195
 1f0:	84 b9       	out	0x04, r24	; 4
	Keypad_PIN_PORT |= 0b00111100;
 1f2:	85 b1       	in	r24, 0x05	; 5
 1f4:	8c 63       	ori	r24, 0x3C	; 60
 1f6:	85 b9       	out	0x05, r24	; 5
 1f8:	08 95       	ret

000001fa <Keyscan_sub>:
	return;
}

char Keyscan_sub(void)
{
	if(!(Keypad_PIN & 0b00000100)) return 1; //키가 눌렸을때
 1fa:	1a 9b       	sbis	0x03, 2	; 3
 1fc:	08 c0       	rjmp	.+16     	; 0x20e <Keyscan_sub+0x14>
	else if(!(Keypad_PIN & 0b00001000)) return 2;
 1fe:	1b 9b       	sbis	0x03, 3	; 3
 200:	08 c0       	rjmp	.+16     	; 0x212 <Keyscan_sub+0x18>
	else if(!(Keypad_PIN & 0b00010000)) return 3;
 202:	1c 9b       	sbis	0x03, 4	; 3
 204:	08 c0       	rjmp	.+16     	; 0x216 <Keyscan_sub+0x1c>
	else if(!(Keypad_PIN & 0b00100000)) return 4;
 206:	1d 9b       	sbis	0x03, 5	; 3
 208:	08 c0       	rjmp	.+16     	; 0x21a <Keyscan_sub+0x20>
	else return 0;
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	08 95       	ret
	return;
}

char Keyscan_sub(void)
{
	if(!(Keypad_PIN & 0b00000100)) return 1; //키가 눌렸을때
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	08 95       	ret
	else if(!(Keypad_PIN & 0b00001000)) return 2;
 212:	82 e0       	ldi	r24, 0x02	; 2
 214:	08 95       	ret
	else if(!(Keypad_PIN & 0b00010000)) return 3;
 216:	83 e0       	ldi	r24, 0x03	; 3
 218:	08 95       	ret
	else if(!(Keypad_PIN & 0b00100000)) return 4;
 21a:	84 e0       	ldi	r24, 0x04	; 4
	else return 0;
}
 21c:	08 95       	ret

0000021e <Keyscan>:

char Keyscan(void)
{
 21e:	0f 93       	push	r16
 220:	1f 93       	push	r17
 222:	cf 93       	push	r28
 224:	df 93       	push	r29
	for(int i = 0; i < 4; i++)
 226:	c0 e0       	ldi	r28, 0x00	; 0
 228:	d0 e0       	ldi	r29, 0x00	; 0
	{
		Keypad_PORT |= 0b00001111;
		Keypad_PORT &= ~(0b00001000 >> i); //clear &=
 22a:	08 e0       	ldi	r16, 0x08	; 8
 22c:	10 e0       	ldi	r17, 0x00	; 0

char Keyscan(void)
{
	for(int i = 0; i < 4; i++)
	{
		Keypad_PORT |= 0b00001111;
 22e:	8b b1       	in	r24, 0x0b	; 11
 230:	8f 60       	ori	r24, 0x0F	; 15
 232:	8b b9       	out	0x0b, r24	; 11
		Keypad_PORT &= ~(0b00001000 >> i); //clear &=
 234:	9b b1       	in	r25, 0x0b	; 11
 236:	98 01       	movw	r18, r16
 238:	0c 2e       	mov	r0, r28
 23a:	02 c0       	rjmp	.+4      	; 0x240 <Keyscan+0x22>
 23c:	35 95       	asr	r19
 23e:	27 95       	ror	r18
 240:	0a 94       	dec	r0
 242:	e2 f7       	brpl	.-8      	; 0x23c <Keyscan+0x1e>
 244:	82 2f       	mov	r24, r18
 246:	80 95       	com	r24
 248:	89 23       	and	r24, r25
 24a:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 24c:	8f e9       	ldi	r24, 0x9F	; 159
 24e:	9f e0       	ldi	r25, 0x0F	; 15
 250:	01 97       	sbiw	r24, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <Keyscan+0x32>
 254:	00 c0       	rjmp	.+0      	; 0x256 <Keyscan+0x38>
 256:	00 00       	nop
		_delay_ms(1);
		if(Keyscan_sub()) return 'A' + Keyscan_sub() + (i*4);
 258:	0e 94 fd 00 	call	0x1fa	; 0x1fa <Keyscan_sub>
 25c:	88 23       	and	r24, r24
 25e:	39 f0       	breq	.+14     	; 0x26e <Keyscan+0x50>
 260:	0e 94 fd 00 	call	0x1fa	; 0x1fa <Keyscan_sub>
 264:	8f 5b       	subi	r24, 0xBF	; 191
 266:	cc 0f       	add	r28, r28
 268:	cc 0f       	add	r28, r28
 26a:	8c 0f       	add	r24, r28
 26c:	05 c0       	rjmp	.+10     	; 0x278 <Keyscan+0x5a>
	else return 0;
}

char Keyscan(void)
{
	for(int i = 0; i < 4; i++)
 26e:	21 96       	adiw	r28, 0x01	; 1
 270:	c4 30       	cpi	r28, 0x04	; 4
 272:	d1 05       	cpc	r29, r1
 274:	e1 f6       	brne	.-72     	; 0x22e <Keyscan+0x10>
		Keypad_PORT &= ~(0b00001000 >> i); //clear &=
		_delay_ms(1);
		if(Keyscan_sub()) return 'A' + Keyscan_sub() + (i*4);
	}
	
	return 'A'; //아무것도 눌리지 않았음
 276:	81 e4       	ldi	r24, 0x41	; 65
}
 278:	df 91       	pop	r29
 27a:	cf 91       	pop	r28
 27c:	1f 91       	pop	r17
 27e:	0f 91       	pop	r16
 280:	08 95       	ret

00000282 <print_FND_word_flow>:
		_delay_ms(10);	
		
    }
}

void print_FND_word_flow(char *words) {
 282:	6f 92       	push	r6
 284:	7f 92       	push	r7
 286:	8f 92       	push	r8
 288:	9f 92       	push	r9
 28a:	af 92       	push	r10
 28c:	bf 92       	push	r11
 28e:	cf 92       	push	r12
 290:	df 92       	push	r13
 292:	ef 92       	push	r14
 294:	ff 92       	push	r15
 296:	0f 93       	push	r16
 298:	1f 93       	push	r17
 29a:	cf 93       	push	r28
 29c:	df 93       	push	r29
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 29e:	af e1       	ldi	r26, 0x1F	; 31
 2a0:	b3 e0       	ldi	r27, 0x03	; 3
 2a2:	11 97       	sbiw	r26, 0x01	; 1
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <print_FND_word_flow+0x20>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <print_FND_word_flow+0x26>
 2a8:	00 00       	nop
 2aa:	7c 01       	movw	r14, r24
 2ac:	5c 01       	movw	r10, r24
 2ae:	bd e0       	ldi	r27, 0x0D	; 13
 2b0:	ab 0e       	add	r10, r27
 2b2:	b1 1c       	adc	r11, r1
	char long_key_flag = 0;
 2b4:	91 2c       	mov	r9, r1
 2b6:	0f 2e       	mov	r0, r31
 2b8:	f6 e3       	ldi	r31, 0x36	; 54
 2ba:	cf 2e       	mov	r12, r31
 2bc:	f2 e0       	ldi	r31, 0x02	; 2
 2be:	df 2e       	mov	r13, r31
 2c0:	f0 2d       	mov	r31, r0
				FND[3-i] = 255;
			}
			else {
				FND[3-i] = FND4digit_font_alphabet[*(words +i +j) - 'a'];
			}*/
			if(!time_flag) FND[3-i] = (*(words + i + j) == ' ')?255:FND4digit_font_alphabet[*(words +i +j) - 'a'];
 2c2:	66 24       	eor	r6, r6
 2c4:	6a 94       	dec	r6
 2c6:	88 24       	eor	r8, r8
 2c8:	83 94       	inc	r8
 2ca:	71 2c       	mov	r7, r1
 2cc:	30 c0       	rjmp	.+96     	; 0x32e <print_FND_word_flow+0xac>
 2ce:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <time_flag>
 2d2:	81 11       	cpse	r24, r1
 2d4:	0b c0       	rjmp	.+22     	; 0x2ec <print_FND_word_flow+0x6a>
 2d6:	d8 01       	movw	r26, r16
 2d8:	ec 91       	ld	r30, X
 2da:	e0 32       	cpi	r30, 0x20	; 32
 2dc:	29 f0       	breq	.+10     	; 0x2e8 <print_FND_word_flow+0x66>
 2de:	f0 e0       	ldi	r31, 0x00	; 0
 2e0:	e9 55       	subi	r30, 0x59	; 89
 2e2:	ff 4f       	sbci	r31, 0xFF	; 255
 2e4:	80 81       	ld	r24, Z
 2e6:	01 c0       	rjmp	.+2      	; 0x2ea <print_FND_word_flow+0x68>
 2e8:	86 2d       	mov	r24, r6
 2ea:	8b 83       	std	Y+3, r24	; 0x03
			
			if(long_key_flag)
 2ec:	99 20       	and	r9, r9
 2ee:	39 f0       	breq	.+14     	; 0x2fe <print_FND_word_flow+0x7c>
			{	
				if(Keyscan() != 'A')
 2f0:	0e 94 0f 01 	call	0x21e	; 0x21e <Keyscan>
 2f4:	81 34       	cpi	r24, 0x41	; 65
 2f6:	49 f0       	breq	.+18     	; 0x30a <print_FND_word_flow+0x88>
				{
					startInfo_flag = 0;
 2f8:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <startInfo_flag>
					long_key_flag = 0;
					return; 
 2fc:	1c c0       	rjmp	.+56     	; 0x336 <print_FND_word_flow+0xb4>
				}
			}
			else
			{
				if(Keyscan() == 'A') //스위치를 안누를 때 -> 연산 결과가 16 //pinb = 00010000
 2fe:	0e 94 0f 01 	call	0x21e	; 0x21e <Keyscan>
 302:	98 2c       	mov	r9, r8
 304:	81 34       	cpi	r24, 0x41	; 65
 306:	09 f0       	breq	.+2      	; 0x30a <print_FND_word_flow+0x88>
 308:	97 2c       	mov	r9, r7
 30a:	21 97       	sbiw	r28, 0x01	; 1
 30c:	0f 5f       	subi	r16, 0xFF	; 255
 30e:	1f 4f       	sbci	r17, 0xFF	; 255
void print_FND_word_flow(char *words) {
	char long_key_flag = 0;
	
	_delay_us(200);
	for(int j = 0; j < 13; j++) {
		for(int i = 0; i < 4; i++) {
 310:	cc 15       	cp	r28, r12
 312:	dd 05       	cpc	r29, r13
 314:	e1 f6       	brne	.-72     	; 0x2ce <print_FND_word_flow+0x4c>
				{
					long_key_flag = 1;
				}
			}				
		}
		time_flag = 1;
 316:	80 92 40 02 	sts	0x0240, r8	; 0x800240 <time_flag>
		while(time_flag);	
 31a:	90 91 40 02 	lds	r25, 0x0240	; 0x800240 <time_flag>
 31e:	91 11       	cpse	r25, r1
 320:	fc cf       	rjmp	.-8      	; 0x31a <print_FND_word_flow+0x98>
 322:	bf ef       	ldi	r27, 0xFF	; 255
 324:	eb 1a       	sub	r14, r27
 326:	fb 0a       	sbc	r15, r27

void print_FND_word_flow(char *words) {
	char long_key_flag = 0;
	
	_delay_us(200);
	for(int j = 0; j < 13; j++) {
 328:	ea 14       	cp	r14, r10
 32a:	fb 04       	cpc	r15, r11
 32c:	21 f0       	breq	.+8      	; 0x336 <print_FND_word_flow+0xb4>
 32e:	ca e3       	ldi	r28, 0x3A	; 58
 330:	d2 e0       	ldi	r29, 0x02	; 2
		_delay_ms(10);	
		
    }
}

void print_FND_word_flow(char *words) {
 332:	87 01       	movw	r16, r14
 334:	cc cf       	rjmp	.-104    	; 0x2ce <print_FND_word_flow+0x4c>
		while(time_flag);	
	}
		
	return;
	
}
 336:	df 91       	pop	r29
 338:	cf 91       	pop	r28
 33a:	1f 91       	pop	r17
 33c:	0f 91       	pop	r16
 33e:	ff 90       	pop	r15
 340:	ef 90       	pop	r14
 342:	df 90       	pop	r13
 344:	cf 90       	pop	r12
 346:	bf 90       	pop	r11
 348:	af 90       	pop	r10
 34a:	9f 90       	pop	r9
 34c:	8f 90       	pop	r8
 34e:	7f 90       	pop	r7
 350:	6f 90       	pop	r6
 352:	08 95       	ret

00000354 <words_Shuffle>:

void words_Shuffle(void) {
 354:	0f 93       	push	r16
 356:	1f 93       	push	r17
 358:	cf 93       	push	r28
 35a:	df 93       	push	r29
 35c:	a1 e2       	ldi	r26, 0x21	; 33
 35e:	b2 e0       	ldi	r27, 0x02	; 2
 360:	e1 e1       	ldi	r30, 0x11	; 17
 362:	f2 e0       	ldi	r31, 0x02	; 2
	int x, y, temp = 0;
	
	for(int j = 0; j < 16; j++) {
 364:	80 e0       	ldi	r24, 0x00	; 0
 366:	90 e0       	ldi	r25, 0x00	; 0
		key_words[j] = j/2;	
		disable_keypad[j] = WORD_DISMATCH;
 368:	41 e0       	ldi	r20, 0x01	; 1

void words_Shuffle(void) {
	int x, y, temp = 0;
	
	for(int j = 0; j < 16; j++) {
		key_words[j] = j/2;	
 36a:	9c 01       	movw	r18, r24
 36c:	99 23       	and	r25, r25
 36e:	14 f4       	brge	.+4      	; 0x374 <words_Shuffle+0x20>
 370:	2f 5f       	subi	r18, 0xFF	; 255
 372:	3f 4f       	sbci	r19, 0xFF	; 255
 374:	35 95       	asr	r19
 376:	27 95       	ror	r18
 378:	2d 93       	st	X+, r18
		disable_keypad[j] = WORD_DISMATCH;
 37a:	41 93       	st	Z+, r20
}

void words_Shuffle(void) {
	int x, y, temp = 0;
	
	for(int j = 0; j < 16; j++) {
 37c:	01 96       	adiw	r24, 0x01	; 1
 37e:	80 31       	cpi	r24, 0x10	; 16
 380:	91 05       	cpc	r25, r1
 382:	99 f7       	brne	.-26     	; 0x36a <words_Shuffle+0x16>
 384:	04 e6       	ldi	r16, 0x64	; 100
 386:	10 e0       	ldi	r17, 0x00	; 0
		disable_keypad[j] = WORD_DISMATCH;
	}
	
	//srandom(msec);
	for(int i = 0; i < 100; i++) {
		x = random()%16; //0~15 
 388:	0e 94 87 06 	call	0xd0e	; 0xd0e <random>
 38c:	dc 01       	movw	r26, r24
 38e:	cb 01       	movw	r24, r22
 390:	8f 70       	andi	r24, 0x0F	; 15
 392:	99 27       	eor	r25, r25
 394:	aa 27       	eor	r26, r26
 396:	b0 78       	andi	r27, 0x80	; 128
 398:	bb 23       	and	r27, r27
 39a:	54 f4       	brge	.+20     	; 0x3b0 <words_Shuffle+0x5c>
 39c:	01 97       	sbiw	r24, 0x01	; 1
 39e:	a1 09       	sbc	r26, r1
 3a0:	b1 09       	sbc	r27, r1
 3a2:	80 6f       	ori	r24, 0xF0	; 240
 3a4:	9f 6f       	ori	r25, 0xFF	; 255
 3a6:	af 6f       	ori	r26, 0xFF	; 255
 3a8:	bf 6f       	ori	r27, 0xFF	; 255
 3aa:	01 96       	adiw	r24, 0x01	; 1
 3ac:	a1 1d       	adc	r26, r1
 3ae:	b1 1d       	adc	r27, r1
 3b0:	ec 01       	movw	r28, r24
		y = random()%16;
 3b2:	0e 94 87 06 	call	0xd0e	; 0xd0e <random>
 3b6:	dc 01       	movw	r26, r24
 3b8:	cb 01       	movw	r24, r22
 3ba:	8f 70       	andi	r24, 0x0F	; 15
 3bc:	99 27       	eor	r25, r25
 3be:	aa 27       	eor	r26, r26
 3c0:	b0 78       	andi	r27, 0x80	; 128
 3c2:	bb 23       	and	r27, r27
 3c4:	54 f4       	brge	.+20     	; 0x3da <words_Shuffle+0x86>
 3c6:	01 97       	sbiw	r24, 0x01	; 1
 3c8:	a1 09       	sbc	r26, r1
 3ca:	b1 09       	sbc	r27, r1
 3cc:	80 6f       	ori	r24, 0xF0	; 240
 3ce:	9f 6f       	ori	r25, 0xFF	; 255
 3d0:	af 6f       	ori	r26, 0xFF	; 255
 3d2:	bf 6f       	ori	r27, 0xFF	; 255
 3d4:	01 96       	adiw	r24, 0x01	; 1
 3d6:	a1 1d       	adc	r26, r1
 3d8:	b1 1d       	adc	r27, r1
		
		 
		temp = key_words[x];
 3da:	cf 5d       	subi	r28, 0xDF	; 223
 3dc:	dd 4f       	sbci	r29, 0xFD	; 253
 3de:	28 81       	ld	r18, Y
		key_words[x] = key_words[y];
 3e0:	fc 01       	movw	r30, r24
 3e2:	ef 5d       	subi	r30, 0xDF	; 223
 3e4:	fd 4f       	sbci	r31, 0xFD	; 253
 3e6:	80 81       	ld	r24, Z
 3e8:	88 83       	st	Y, r24
		key_words[y] = temp;
 3ea:	20 83       	st	Z, r18
 3ec:	01 50       	subi	r16, 0x01	; 1
 3ee:	11 09       	sbc	r17, r1
		key_words[j] = j/2;	
		disable_keypad[j] = WORD_DISMATCH;
	}
	
	//srandom(msec);
	for(int i = 0; i < 100; i++) {
 3f0:	59 f6       	brne	.-106    	; 0x388 <words_Shuffle+0x34>
		key_words[x] = key_words[y];
		key_words[y] = temp;
	}
	
	return;
}
 3f2:	df 91       	pop	r29
 3f4:	cf 91       	pop	r28
 3f6:	1f 91       	pop	r17
 3f8:	0f 91       	pop	r16
 3fa:	08 95       	ret

000003fc <checkMatch>:
		}
	}
	
	return;
}
void checkMatch(){ //match_1, match_2 : keypad 위치
 3fc:	0f 93       	push	r16
 3fe:	1f 93       	push	r17
 400:	cf 93       	push	r28
 402:	df 93       	push	r29
		
	if(!strcmp(words[key_words[match_1 - 'B']], words[key_words[match_2 - 'B']])) {
 404:	c0 91 0f 02 	lds	r28, 0x020F	; 0x80020f <match_2>
 408:	d0 e0       	ldi	r29, 0x00	; 0
 40a:	c2 54       	subi	r28, 0x42	; 66
 40c:	d1 09       	sbc	r29, r1
 40e:	00 91 10 02 	lds	r16, 0x0210	; 0x800210 <match_1>
 412:	10 e0       	ldi	r17, 0x00	; 0
 414:	02 54       	subi	r16, 0x42	; 66
 416:	11 09       	sbc	r17, r1
 418:	fe 01       	movw	r30, r28
 41a:	ef 5d       	subi	r30, 0xDF	; 223
 41c:	fd 4f       	sbci	r31, 0xFD	; 253
 41e:	e0 81       	ld	r30, Z
 420:	f0 e0       	ldi	r31, 0x00	; 0
 422:	ee 0f       	add	r30, r30
 424:	ff 1f       	adc	r31, r31
 426:	e1 5c       	subi	r30, 0xC1	; 193
 428:	fe 4f       	sbci	r31, 0xFE	; 254
 42a:	60 81       	ld	r22, Z
 42c:	71 81       	ldd	r23, Z+1	; 0x01
 42e:	f8 01       	movw	r30, r16
 430:	ef 5d       	subi	r30, 0xDF	; 223
 432:	fd 4f       	sbci	r31, 0xFD	; 253
 434:	e0 81       	ld	r30, Z
 436:	f0 e0       	ldi	r31, 0x00	; 0
 438:	ee 0f       	add	r30, r30
 43a:	ff 1f       	adc	r31, r31
 43c:	e1 5c       	subi	r30, 0xC1	; 193
 43e:	fe 4f       	sbci	r31, 0xFE	; 254
 440:	80 81       	ld	r24, Z
 442:	91 81       	ldd	r25, Z+1	; 0x01
 444:	0e 94 de 06 	call	0xdbc	; 0xdbc <strcmp>
 448:	89 2b       	or	r24, r25
 44a:	a9 f5       	brne	.+106    	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
				
		disable_keypad[match_1 - 'B'] = WORD_MATCH;
 44c:	f8 01       	movw	r30, r16
 44e:	ef 5e       	subi	r30, 0xEF	; 239
 450:	fd 4f       	sbci	r31, 0xFD	; 253
 452:	82 e0       	ldi	r24, 0x02	; 2
 454:	80 83       	st	Z, r24
		disable_keypad[match_2 - 'B'] = WORD_MATCH;
 456:	cf 5e       	subi	r28, 0xEF	; 239
 458:	dd 4f       	sbci	r29, 0xFD	; 253
 45a:	88 83       	st	Y, r24
		gamesucess_count++;
 45c:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <__data_end>
 460:	8f 5f       	subi	r24, 0xFF	; 255
 462:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <__data_end>
		if(gamesucess_count == 8) {
 466:	88 30       	cpi	r24, 0x08	; 8
 468:	89 f4       	brne	.+34     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
			sucess_flag = 1; gamesucess_count = 0;
 46a:	81 e0       	ldi	r24, 0x01	; 1
 46c:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <sucess_flag>
 470:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <__data_end>
			game_state = GAME_END; start_flag = 0;
 474:	95 e0       	ldi	r25, 0x05	; 5
 476:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <game_state>
 47a:	10 92 4c 02 	sts	0x024C, r1	; 0x80024c <start_flag>
			sndsucess_flag = 1; match_1 = NULL; match_2 = NULL;
 47e:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <sndsucess_flag>
 482:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <match_1>
 486:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <match_2>
			return;
 48a:	30 c0       	rjmp	.+96     	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
		}
		
		time_flag = 1;
 48c:	81 e0       	ldi	r24, 0x01	; 1
 48e:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <time_flag>
		while(time_flag);
 492:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <time_flag>
 496:	81 11       	cpse	r24, r1
 498:	fc cf       	rjmp	.-8      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
		FND_off();
 49a:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <FND_off>
		FND_update_word("good");
 49e:	8b ed       	ldi	r24, 0xDB	; 219
 4a0:	91 e0       	ldi	r25, 0x01	; 1
 4a2:	0e 94 7f 00 	call	0xfe	; 0xfe <FND_update_word>
		right_flag = 1;
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	80 93 3f 02 	sts	0x023F, r24	; 0x80023f <right_flag>
		match_1 = NULL; match_2 = NULL;
 4ac:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <match_1>
 4b0:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <match_2>
 4b4:	1b c0       	rjmp	.+54     	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
		
		
	}
	else {
				
		disable_keypad[match_1 - 'B'] = WORD_DISMATCH;
 4b6:	f8 01       	movw	r30, r16
 4b8:	ef 5e       	subi	r30, 0xEF	; 239
 4ba:	fd 4f       	sbci	r31, 0xFD	; 253
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	80 83       	st	Z, r24
		disable_keypad[match_2 - 'B'] = WORD_DISMATCH;
 4c0:	cf 5e       	subi	r28, 0xEF	; 239
 4c2:	dd 4f       	sbci	r29, 0xFD	; 253
 4c4:	88 83       	st	Y, r24
		
		time_flag = 1;
 4c6:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <time_flag>
		while(time_flag);
 4ca:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <time_flag>
 4ce:	81 11       	cpse	r24, r1
 4d0:	fc cf       	rjmp	.-8      	; 0x4ca <__LOCK_REGION_LENGTH__+0xca>
		FND_off();
 4d2:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <FND_off>
		FND_update_word("fail");
 4d6:	80 ee       	ldi	r24, 0xE0	; 224
 4d8:	91 e0       	ldi	r25, 0x01	; 1
 4da:	0e 94 7f 00 	call	0xfe	; 0xfe <FND_update_word>
		fail_flag = 1;
 4de:	81 e0       	ldi	r24, 0x01	; 1
 4e0:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <fail_flag>
		match_1 = NULL; match_2 = NULL;
 4e4:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <match_1>
 4e8:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <match_2>
		
	}
	

 4ec:	df 91       	pop	r29
 4ee:	cf 91       	pop	r28
 4f0:	1f 91       	pop	r17
 4f2:	0f 91       	pop	r16
 4f4:	08 95       	ret

000004f6 <keypad_Click>:
	return;
}

void keypad_Click(char key) {
	
	if(match_1 == NULL) {
 4f6:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <match_1>
 4fa:	91 11       	cpse	r25, r1
 4fc:	13 c0       	rjmp	.+38     	; 0x524 <keypad_Click+0x2e>
		match_1 = key;
 4fe:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <match_1>
		FND_update_word(words[key_words[Keyscan() - 'B']]);
 502:	0e 94 0f 01 	call	0x21e	; 0x21e <Keyscan>
 506:	e8 2f       	mov	r30, r24
 508:	f0 e0       	ldi	r31, 0x00	; 0
 50a:	e1 52       	subi	r30, 0x21	; 33
 50c:	fe 4f       	sbci	r31, 0xFE	; 254
 50e:	e0 81       	ld	r30, Z
 510:	f0 e0       	ldi	r31, 0x00	; 0
 512:	ee 0f       	add	r30, r30
 514:	ff 1f       	adc	r31, r31
 516:	e1 5c       	subi	r30, 0xC1	; 193
 518:	fe 4f       	sbci	r31, 0xFE	; 254
 51a:	80 81       	ld	r24, Z
 51c:	91 81       	ldd	r25, Z+1	; 0x01
 51e:	0e 94 7f 00 	call	0xfe	; 0xfe <FND_update_word>
 522:	08 95       	ret
	}
	else {
		if(match_2 == NULL) {
 524:	20 91 0f 02 	lds	r18, 0x020F	; 0x80020f <match_2>
 528:	21 11       	cpse	r18, r1
 52a:	16 c0       	rjmp	.+44     	; 0x558 <keypad_Click+0x62>
			if(match_1 != key) {
 52c:	98 17       	cp	r25, r24
 52e:	a1 f0       	breq	.+40     	; 0x558 <keypad_Click+0x62>
				match_2 = key;
 530:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <match_2>
				FND_update_word(words[key_words[Keyscan() - 'B']]);
 534:	0e 94 0f 01 	call	0x21e	; 0x21e <Keyscan>
 538:	e8 2f       	mov	r30, r24
 53a:	f0 e0       	ldi	r31, 0x00	; 0
 53c:	e1 52       	subi	r30, 0x21	; 33
 53e:	fe 4f       	sbci	r31, 0xFE	; 254
 540:	e0 81       	ld	r30, Z
 542:	f0 e0       	ldi	r31, 0x00	; 0
 544:	ee 0f       	add	r30, r30
 546:	ff 1f       	adc	r31, r31
 548:	e1 5c       	subi	r30, 0xC1	; 193
 54a:	fe 4f       	sbci	r31, 0xFE	; 254
 54c:	80 81       	ld	r24, Z
 54e:	91 81       	ldd	r25, Z+1	; 0x01
 550:	0e 94 7f 00 	call	0xfe	; 0xfe <FND_update_word>
				checkMatch();
 554:	0e 94 fe 01 	call	0x3fc	; 0x3fc <checkMatch>
 558:	08 95       	ret

0000055a <main>:

int main(void)
{
	char long_key_flag = 0;
	int i =0;
	Timer0_init(); 
 55a:	0e 94 d4 05 	call	0xba8	; 0xba8 <Timer0_init>
	Timer1_init_CTC_outA(); //speaker
 55e:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <Timer1_init_CTC_outA>
    FND4digit_init_shiftR();
 562:	0e 94 53 00 	call	0xa6	; 0xa6 <FND4digit_init_shiftR>
	Keypad_init();
 566:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <Keypad_init>
		
	sei();
 56a:	78 94       	sei
char gamesucess_count = 0;


int main(void)
{
	char long_key_flag = 0;
 56c:	c0 e0       	ldi	r28, 0x00	; 0
		
		if(!startInfo_flag && game_state == GAME_READY) 
		{
			FND_off();
			words_Shuffle();
			game_state = GAME_START;
 56e:	68 94       	set
 570:	ee 24       	eor	r14, r14
 572:	e2 f8       	bld	r14, 2
			start_flag = 1;
 574:	d1 e0       	ldi	r29, 0x01	; 1
		}
		
		if(!right_flag && !fail_flag && !sndsucess_flag) {music_i = 0; OCR1A = 0;}
 576:	08 e8       	ldi	r16, 0x88	; 136
 578:	10 e0       	ldi	r17, 0x00	; 0
						if(disable_keypad[Keyscan() - 'B'] == WORD_DISMATCH){
								
							FND_update_word(words[key_words[Keyscan() - 'B']]);
							keypad_Click(Keyscan());
								
							long_key_flag = 0;
 57a:	f1 2c       	mov	r15, r1
					}
				}
				else if(game_state == GAME_END) {
					if(Keyscan()) {
						beep_flag = 1; 
						game_state = GAME_READY; sucess_flag = 0; startInfo_flag = 1;
 57c:	0f 2e       	mov	r0, r31
 57e:	f3 e0       	ldi	r31, 0x03	; 3
 580:	df 2e       	mov	r13, r31
 582:	f0 2d       	mov	r31, r0
	sei();
	
	
	while (1) 
    {
		if(startInfo_flag) print_FND_word_flow(start_game);
 584:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <startInfo_flag>
 588:	88 23       	and	r24, r24
 58a:	21 f0       	breq	.+8      	; 0x594 <main+0x3a>
 58c:	8d e2       	ldi	r24, 0x2D	; 45
 58e:	91 e0       	ldi	r25, 0x01	; 1
 590:	0e 94 41 01 	call	0x282	; 0x282 <print_FND_word_flow>
		
		if(sucess_flag) {
 594:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <sucess_flag>
 598:	88 23       	and	r24, r24
 59a:	69 f0       	breq	.+26     	; 0x5b6 <main+0x5c>
			if(print_sucess_flag) {
 59c:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <print_sucess_flag>
 5a0:	88 23       	and	r24, r24
 5a2:	39 f0       	breq	.+14     	; 0x5b2 <main+0x58>
				
				FND_clock(sec, min);
 5a4:	60 91 31 02 	lds	r22, 0x0231	; 0x800231 <min>
 5a8:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <sec>
 5ac:	0e 94 92 00 	call	0x124	; 0x124 <FND_clock>
 5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <main+0x5c>
				
			}
			else {
			
				FND_off();
 5b2:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <FND_off>
			}
		}

		
		if(!startInfo_flag && game_state == GAME_READY) 
 5b6:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <startInfo_flag>
 5ba:	81 11       	cpse	r24, r1
 5bc:	0c c0       	rjmp	.+24     	; 0x5d6 <main+0x7c>
 5be:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <game_state>
 5c2:	83 30       	cpi	r24, 0x03	; 3
 5c4:	41 f4       	brne	.+16     	; 0x5d6 <main+0x7c>
		{
			FND_off();
 5c6:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <FND_off>
			words_Shuffle();
 5ca:	0e 94 aa 01 	call	0x354	; 0x354 <words_Shuffle>
			game_state = GAME_START;
 5ce:	e0 92 2c 01 	sts	0x012C, r14	; 0x80012c <game_state>
			start_flag = 1;
 5d2:	d0 93 4c 02 	sts	0x024C, r29	; 0x80024c <start_flag>
		}
		
		if(!right_flag && !fail_flag && !sndsucess_flag) {music_i = 0; OCR1A = 0;}
 5d6:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <right_flag>
 5da:	81 11       	cpse	r24, r1
 5dc:	0f c0       	rjmp	.+30     	; 0x5fc <main+0xa2>
 5de:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <fail_flag>
 5e2:	81 11       	cpse	r24, r1
 5e4:	0b c0       	rjmp	.+22     	; 0x5fc <main+0xa2>
 5e6:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <sndsucess_flag>
 5ea:	81 11       	cpse	r24, r1
 5ec:	07 c0       	rjmp	.+14     	; 0x5fc <main+0xa2>
 5ee:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <music_i+0x1>
 5f2:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <music_i>
 5f6:	f8 01       	movw	r30, r16
 5f8:	11 82       	std	Z+1, r1	; 0x01
 5fa:	10 82       	st	Z, r1
	
		if(long_key_flag)
 5fc:	cc 23       	and	r28, r28
 5fe:	09 f4       	brne	.+2      	; 0x602 <main+0xa8>
 600:	5b c0       	rjmp	.+182    	; 0x6b8 <main+0x15e>
 602:	8f e1       	ldi	r24, 0x1F	; 31
 604:	93 e0       	ldi	r25, 0x03	; 3
 606:	01 97       	sbiw	r24, 0x01	; 1
 608:	f1 f7       	brne	.-4      	; 0x606 <main+0xac>
 60a:	00 c0       	rjmp	.+0      	; 0x60c <main+0xb2>
 60c:	00 00       	nop
		{
			_delay_us(200);
			if(Keyscan() != 'A')
 60e:	0e 94 0f 01 	call	0x21e	; 0x21e <Keyscan>
 612:	81 34       	cpi	r24, 0x41	; 65
 614:	09 f4       	brne	.+2      	; 0x618 <main+0xbe>
 616:	56 c0       	rjmp	.+172    	; 0x6c4 <main+0x16a>
			{
				beep_flag = 1;
 618:	d0 93 49 02 	sts	0x0249, r29	; 0x800249 <beep_flag>
				if(game_state == GAME_START) {
 61c:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <game_state>
 620:	84 30       	cpi	r24, 0x04	; 4
 622:	91 f5       	brne	.+100    	; 0x688 <main+0x12e>
					if(Keyscan()) {
 624:	0e 94 0f 01 	call	0x21e	; 0x21e <Keyscan>
 628:	88 23       	and	r24, r24
 62a:	09 f4       	brne	.+2      	; 0x62e <main+0xd4>
 62c:	4b c0       	rjmp	.+150    	; 0x6c4 <main+0x16a>
						
						if(disable_keypad[Keyscan() - 'B'] == WORD_DISMATCH){
 62e:	0e 94 0f 01 	call	0x21e	; 0x21e <Keyscan>
 632:	e8 2f       	mov	r30, r24
 634:	f0 e0       	ldi	r31, 0x00	; 0
 636:	e1 53       	subi	r30, 0x31	; 49
 638:	fe 4f       	sbci	r31, 0xFE	; 254
 63a:	80 81       	ld	r24, Z
 63c:	81 30       	cpi	r24, 0x01	; 1
 63e:	b9 f4       	brne	.+46     	; 0x66e <main+0x114>
								
							FND_update_word(words[key_words[Keyscan() - 'B']]);
 640:	0e 94 0f 01 	call	0x21e	; 0x21e <Keyscan>
 644:	e8 2f       	mov	r30, r24
 646:	f0 e0       	ldi	r31, 0x00	; 0
 648:	e1 52       	subi	r30, 0x21	; 33
 64a:	fe 4f       	sbci	r31, 0xFE	; 254
 64c:	e0 81       	ld	r30, Z
 64e:	f0 e0       	ldi	r31, 0x00	; 0
 650:	ee 0f       	add	r30, r30
 652:	ff 1f       	adc	r31, r31
 654:	e1 5c       	subi	r30, 0xC1	; 193
 656:	fe 4f       	sbci	r31, 0xFE	; 254
 658:	80 81       	ld	r24, Z
 65a:	91 81       	ldd	r25, Z+1	; 0x01
 65c:	0e 94 7f 00 	call	0xfe	; 0xfe <FND_update_word>
							keypad_Click(Keyscan());
 660:	0e 94 0f 01 	call	0x21e	; 0x21e <Keyscan>
 664:	90 e0       	ldi	r25, 0x00	; 0
 666:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <keypad_Click>
								
							long_key_flag = 0;
 66a:	cf 2d       	mov	r28, r15
 66c:	2b c0       	rjmp	.+86     	; 0x6c4 <main+0x16a>
						}
							
						else if(disable_keypad[Keyscan() - 'B'] == WORD_MATCH){
 66e:	0e 94 0f 01 	call	0x21e	; 0x21e <Keyscan>
 672:	e8 2f       	mov	r30, r24
 674:	f0 e0       	ldi	r31, 0x00	; 0
 676:	e1 53       	subi	r30, 0x31	; 49
 678:	fe 4f       	sbci	r31, 0xFE	; 254
 67a:	80 81       	ld	r24, Z
 67c:	82 30       	cpi	r24, 0x02	; 2
 67e:	11 f5       	brne	.+68     	; 0x6c4 <main+0x16a>
							FND_off();
 680:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <FND_off>
							long_key_flag = 0;
 684:	cf 2d       	mov	r28, r15
 686:	1e c0       	rjmp	.+60     	; 0x6c4 <main+0x16a>
						}
						
					}
				}
				else if(game_state == GAME_END) {
 688:	85 30       	cpi	r24, 0x05	; 5
 68a:	e1 f4       	brne	.+56     	; 0x6c4 <main+0x16a>
					if(Keyscan()) {
 68c:	0e 94 0f 01 	call	0x21e	; 0x21e <Keyscan>
 690:	88 23       	and	r24, r24
 692:	c1 f0       	breq	.+48     	; 0x6c4 <main+0x16a>
						beep_flag = 1; 
 694:	d0 93 49 02 	sts	0x0249, r29	; 0x800249 <beep_flag>
						game_state = GAME_READY; sucess_flag = 0; startInfo_flag = 1;
 698:	d0 92 2c 01 	sts	0x012C, r13	; 0x80012c <game_state>
 69c:	f0 92 4b 02 	sts	0x024B, r15	; 0x80024b <sucess_flag>
 6a0:	d0 93 da 01 	sts	0x01DA, r29	; 0x8001da <startInfo_flag>
						msec = 0; sec = 0; min = 0;
 6a4:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <msec+0x1>
 6a8:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <msec>
 6ac:	f0 92 32 02 	sts	0x0232, r15	; 0x800232 <sec>
 6b0:	f0 92 31 02 	sts	0x0231, r15	; 0x800231 <min>
						long_key_flag = 0;
 6b4:	cf 2d       	mov	r28, r15
 6b6:	06 c0       	rjmp	.+12     	; 0x6c4 <main+0x16a>
			}
		}
		else
		{
			
			if(Keyscan() == 'A') //스위치를 안누를 때 -> 연산 결과가 16 //pinb = 00010000
 6b8:	0e 94 0f 01 	call	0x21e	; 0x21e <Keyscan>
						if(disable_keypad[Keyscan() - 'B'] == WORD_DISMATCH){
								
							FND_update_word(words[key_words[Keyscan() - 'B']]);
							keypad_Click(Keyscan());
								
							long_key_flag = 0;
 6bc:	cd 2f       	mov	r28, r29
 6be:	81 34       	cpi	r24, 0x41	; 65
 6c0:	09 f0       	breq	.+2      	; 0x6c4 <main+0x16a>
 6c2:	cf 2d       	mov	r28, r15
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6c4:	ef e3       	ldi	r30, 0x3F	; 63
 6c6:	fc e9       	ldi	r31, 0x9C	; 156
 6c8:	31 97       	sbiw	r30, 0x01	; 1
 6ca:	f1 f7       	brne	.-4      	; 0x6c8 <main+0x16e>
 6cc:	00 c0       	rjmp	.+0      	; 0x6ce <main+0x174>
 6ce:	00 00       	nop
 6d0:	59 cf       	rjmp	.-334    	; 0x584 <main+0x2a>

000006d2 <__vector_14>:
	//OCR0A = 63; // 2000Hz
	//OCR0A = 124;							//(250 / 2) - 1 //한 주기를 1msec
	//OCR0A = 249;							//한 주기 2msec //500Hz
	//250Hz를 만들고싶다면? => OCR0A를 늘리면 오버플로우(8bit) => 분주를 늘린다
	//CS0x (분주)랑 OCR값을 이용해서 주기, 주파수 조정
	TIMSK0 |= 1 << OCIE0A;                  //0b00000010; //어떤 interrupt 걸리게 할건지 정하는	// OC0A 비교 매치 인터럽트 활성화
 6d2:	1f 92       	push	r1
 6d4:	0f 92       	push	r0
 6d6:	0f b6       	in	r0, 0x3f	; 63
 6d8:	0f 92       	push	r0
 6da:	11 24       	eor	r1, r1
 6dc:	2f 93       	push	r18
 6de:	3f 93       	push	r19
 6e0:	4f 93       	push	r20
 6e2:	5f 93       	push	r21
 6e4:	6f 93       	push	r22
 6e6:	7f 93       	push	r23
 6e8:	8f 93       	push	r24
 6ea:	9f 93       	push	r25
 6ec:	af 93       	push	r26
 6ee:	bf 93       	push	r27
 6f0:	ef 93       	push	r30
 6f2:	ff 93       	push	r31
 6f4:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <start_flag>
 6f8:	88 23       	and	r24, r24
 6fa:	49 f0       	breq	.+18     	; 0x70e <__vector_14+0x3c>
 6fc:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <msec>
 700:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <msec+0x1>
 704:	01 96       	adiw	r24, 0x01	; 1
 706:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <msec+0x1>
 70a:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <msec>
 70e:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <time_flag>
 712:	88 23       	and	r24, r24
 714:	49 f0       	breq	.+18     	; 0x728 <__vector_14+0x56>
 716:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <delay_msec>
 71a:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <delay_msec+0x1>
 71e:	01 96       	adiw	r24, 0x01	; 1
 720:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <delay_msec+0x1>
 724:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <delay_msec>
 728:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <sucess_flag>
 72c:	88 23       	and	r24, r24
 72e:	49 f0       	breq	.+18     	; 0x742 <__vector_14+0x70>
 730:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <sucess_msec>
 734:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <sucess_msec+0x1>
 738:	01 96       	adiw	r24, 0x01	; 1
 73a:	90 93 35 02 	sts	0x0235, r25	; 0x800235 <sucess_msec+0x1>
 73e:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <sucess_msec>
 742:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <sucess_msec>
 746:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <sucess_msec+0x1>
 74a:	84 3f       	cpi	r24, 0xF4	; 244
 74c:	91 40       	sbci	r25, 0x01	; 1
 74e:	84 f0       	brlt	.+32     	; 0x770 <__vector_14+0x9e>
 750:	81 e0       	ldi	r24, 0x01	; 1
 752:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <print_sucess_flag>
 756:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <sucess_msec>
 75a:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <sucess_msec+0x1>
 75e:	88 3e       	cpi	r24, 0xE8	; 232
 760:	93 40       	sbci	r25, 0x03	; 3
 762:	34 f0       	brlt	.+12     	; 0x770 <__vector_14+0x9e>
 764:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <print_sucess_flag>
 768:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <sucess_msec+0x1>
 76c:	10 92 34 02 	sts	0x0234, r1	; 0x800234 <sucess_msec>
 770:	80 91 36 02 	lds	r24, 0x0236	; 0x800236 <delay_msec>
 774:	90 91 37 02 	lds	r25, 0x0237	; 0x800237 <delay_msec+0x1>
 778:	8c 3b       	cpi	r24, 0xBC	; 188
 77a:	92 40       	sbci	r25, 0x02	; 2
 77c:	34 f0       	brlt	.+12     	; 0x78a <__vector_14+0xb8>
 77e:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <time_flag>
 782:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <delay_msec+0x1>
 786:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <delay_msec>
 78a:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <msec>
 78e:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <msec+0x1>
 792:	88 3e       	cpi	r24, 0xE8	; 232
 794:	93 40       	sbci	r25, 0x03	; 3
 796:	d4 f0       	brlt	.+52     	; 0x7cc <__vector_14+0xfa>
 798:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <msec+0x1>
 79c:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <msec>
 7a0:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <sec>
 7a4:	8f 5f       	subi	r24, 0xFF	; 255
 7a6:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <sec>
 7aa:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <sec>
 7ae:	8c 33       	cpi	r24, 0x3C	; 60
 7b0:	68 f0       	brcs	.+26     	; 0x7cc <__vector_14+0xfa>
 7b2:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <sec>
 7b6:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <min>
 7ba:	8f 5f       	subi	r24, 0xFF	; 255
 7bc:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <min>
 7c0:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <min>
 7c4:	8c 33       	cpi	r24, 0x3C	; 60
 7c6:	10 f0       	brcs	.+4      	; 0x7cc <__vector_14+0xfa>
 7c8:	10 92 31 02 	sts	0x0231, r1	; 0x800231 <min>
 7cc:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <beep_flag>
 7d0:	88 23       	and	r24, r24
 7d2:	b1 f0       	breq	.+44     	; 0x800 <__vector_14+0x12e>
 7d4:	84 ef       	ldi	r24, 0xF4	; 244
 7d6:	91 e0       	ldi	r25, 0x01	; 1
 7d8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 7dc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 7e0:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <msec>
 7e4:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <msec+0x1>
 7e8:	68 ec       	ldi	r22, 0xC8	; 200
 7ea:	70 e0       	ldi	r23, 0x00	; 0
 7ec:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <__divmodhi4>
 7f0:	89 2b       	or	r24, r25
 7f2:	31 f4       	brne	.+12     	; 0x800 <__vector_14+0x12e>
 7f4:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 7f8:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 7fc:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <beep_flag>
 800:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <right_flag>
 804:	88 23       	and	r24, r24
 806:	09 f4       	brne	.+2      	; 0x80a <__vector_14+0x138>
 808:	87 c0       	rjmp	.+270    	; 0x918 <__stack+0x19>
 80a:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <interval>
 80e:	90 91 48 02 	lds	r25, 0x0248	; 0x800248 <interval+0x1>
 812:	89 2b       	or	r24, r25
 814:	09 f0       	breq	.+2      	; 0x818 <__vector_14+0x146>
 816:	73 c0       	rjmp	.+230    	; 0x8fe <__vector_14+0x22c>
 818:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <next_beat_flag>
 81c:	88 23       	and	r24, r24
 81e:	09 f4       	brne	.+2      	; 0x822 <__vector_14+0x150>
 820:	55 c0       	rjmp	.+170    	; 0x8cc <__vector_14+0x1fa>
 822:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <next_beat_flag>
 826:	e0 91 45 02 	lds	r30, 0x0245	; 0x800245 <music_i>
 82a:	f0 91 46 02 	lds	r31, 0x0246	; 0x800246 <music_i+0x1>
 82e:	ee 0f       	add	r30, r30
 830:	ff 1f       	adc	r31, r31
 832:	e1 53       	subi	r30, 0x31	; 49
 834:	fe 4f       	sbci	r31, 0xFE	; 254
 836:	80 81       	ld	r24, Z
 838:	91 81       	ldd	r25, Z+1	; 0x01
 83a:	89 2b       	or	r24, r25
 83c:	c9 f0       	breq	.+50     	; 0x870 <__vector_14+0x19e>
 83e:	e0 91 45 02 	lds	r30, 0x0245	; 0x800245 <music_i>
 842:	f0 91 46 02 	lds	r31, 0x0246	; 0x800246 <music_i+0x1>
 846:	ee 0f       	add	r30, r30
 848:	ff 1f       	adc	r31, r31
 84a:	e1 53       	subi	r30, 0x31	; 49
 84c:	fe 4f       	sbci	r31, 0xFE	; 254
 84e:	20 81       	ld	r18, Z
 850:	31 81       	ldd	r19, Z+1	; 0x01
 852:	03 2e       	mov	r0, r19
 854:	00 0c       	add	r0, r0
 856:	44 0b       	sbc	r20, r20
 858:	55 0b       	sbc	r21, r21
 85a:	60 e4       	ldi	r22, 0x40	; 64
 85c:	72 e4       	ldi	r23, 0x42	; 66
 85e:	8f e0       	ldi	r24, 0x0F	; 15
 860:	90 e0       	ldi	r25, 0x00	; 0
 862:	0e 94 06 06 	call	0xc0c	; 0xc0c <__udivmodsi4>
 866:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 86a:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 86e:	04 c0       	rjmp	.+8      	; 0x878 <__vector_14+0x1a6>
 870:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 874:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 878:	e0 91 45 02 	lds	r30, 0x0245	; 0x800245 <music_i>
 87c:	f0 91 46 02 	lds	r31, 0x0246	; 0x800246 <music_i+0x1>
 880:	ee 0f       	add	r30, r30
 882:	ff 1f       	adc	r31, r31
 884:	e9 53       	subi	r30, 0x39	; 57
 886:	fe 4f       	sbci	r31, 0xFE	; 254
 888:	80 81       	ld	r24, Z
 88a:	91 81       	ldd	r25, Z+1	; 0x01
 88c:	90 93 44 02 	sts	0x0244, r25	; 0x800244 <beat+0x1>
 890:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <beat>
 894:	e0 91 45 02 	lds	r30, 0x0245	; 0x800245 <music_i>
 898:	f0 91 46 02 	lds	r31, 0x0246	; 0x800246 <music_i+0x1>
 89c:	ee 0f       	add	r30, r30
 89e:	ff 1f       	adc	r31, r31
 8a0:	e1 53       	subi	r30, 0x31	; 49
 8a2:	fe 4f       	sbci	r31, 0xFE	; 254
 8a4:	80 81       	ld	r24, Z
 8a6:	91 81       	ldd	r25, Z+1	; 0x01
 8a8:	80 33       	cpi	r24, 0x30	; 48
 8aa:	9f 42       	sbci	r25, 0x2F	; 47
 8ac:	31 f4       	brne	.+12     	; 0x8ba <__vector_14+0x1e8>
 8ae:	10 92 3f 02 	sts	0x023F, r1	; 0x80023f <right_flag>
 8b2:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 8b6:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 8ba:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <music_i>
 8be:	90 91 46 02 	lds	r25, 0x0246	; 0x800246 <music_i+0x1>
 8c2:	01 96       	adiw	r24, 0x01	; 1
 8c4:	90 93 46 02 	sts	0x0246, r25	; 0x800246 <music_i+0x1>
 8c8:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <music_i>
 8cc:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <beat>
 8d0:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <beat+0x1>
 8d4:	01 97       	sbiw	r24, 0x01	; 1
 8d6:	90 93 44 02 	sts	0x0244, r25	; 0x800244 <beat+0x1>
 8da:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <beat>
 8de:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <beat>
 8e2:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <beat+0x1>
 8e6:	89 2b       	or	r24, r25
 8e8:	b9 f4       	brne	.+46     	; 0x918 <__stack+0x19>
 8ea:	81 e0       	ldi	r24, 0x01	; 1
 8ec:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <next_beat_flag>
 8f0:	8a e0       	ldi	r24, 0x0A	; 10
 8f2:	90 e0       	ldi	r25, 0x00	; 0
 8f4:	90 93 48 02 	sts	0x0248, r25	; 0x800248 <interval+0x1>
 8f8:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <interval>
 8fc:	0d c0       	rjmp	.+26     	; 0x918 <__stack+0x19>
 8fe:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 902:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 906:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <interval>
 90a:	90 91 48 02 	lds	r25, 0x0248	; 0x800248 <interval+0x1>
 90e:	01 97       	sbiw	r24, 0x01	; 1
 910:	90 93 48 02 	sts	0x0248, r25	; 0x800248 <interval+0x1>
 914:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <interval>
 918:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <fail_flag>
 91c:	88 23       	and	r24, r24
 91e:	09 f4       	brne	.+2      	; 0x922 <__stack+0x23>
 920:	87 c0       	rjmp	.+270    	; 0xa30 <__stack+0x131>
 922:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <interval>
 926:	90 91 48 02 	lds	r25, 0x0248	; 0x800248 <interval+0x1>
 92a:	89 2b       	or	r24, r25
 92c:	09 f0       	breq	.+2      	; 0x930 <__stack+0x31>
 92e:	73 c0       	rjmp	.+230    	; 0xa16 <__stack+0x117>
 930:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <next_beat_flag>
 934:	88 23       	and	r24, r24
 936:	09 f4       	brne	.+2      	; 0x93a <__stack+0x3b>
 938:	55 c0       	rjmp	.+170    	; 0x9e4 <__stack+0xe5>
 93a:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <next_beat_flag>
 93e:	e0 91 45 02 	lds	r30, 0x0245	; 0x800245 <music_i>
 942:	f0 91 46 02 	lds	r31, 0x0246	; 0x800246 <music_i+0x1>
 946:	ee 0f       	add	r30, r30
 948:	ff 1f       	adc	r31, r31
 94a:	e3 54       	subi	r30, 0x43	; 67
 94c:	fe 4f       	sbci	r31, 0xFE	; 254
 94e:	80 81       	ld	r24, Z
 950:	91 81       	ldd	r25, Z+1	; 0x01
 952:	89 2b       	or	r24, r25
 954:	c9 f0       	breq	.+50     	; 0x988 <__stack+0x89>
 956:	e0 91 45 02 	lds	r30, 0x0245	; 0x800245 <music_i>
 95a:	f0 91 46 02 	lds	r31, 0x0246	; 0x800246 <music_i+0x1>
 95e:	ee 0f       	add	r30, r30
 960:	ff 1f       	adc	r31, r31
 962:	e3 54       	subi	r30, 0x43	; 67
 964:	fe 4f       	sbci	r31, 0xFE	; 254
 966:	20 81       	ld	r18, Z
 968:	31 81       	ldd	r19, Z+1	; 0x01
 96a:	03 2e       	mov	r0, r19
 96c:	00 0c       	add	r0, r0
 96e:	44 0b       	sbc	r20, r20
 970:	55 0b       	sbc	r21, r21
 972:	60 e4       	ldi	r22, 0x40	; 64
 974:	72 e4       	ldi	r23, 0x42	; 66
 976:	8f e0       	ldi	r24, 0x0F	; 15
 978:	90 e0       	ldi	r25, 0x00	; 0
 97a:	0e 94 06 06 	call	0xc0c	; 0xc0c <__udivmodsi4>
 97e:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 982:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 986:	04 c0       	rjmp	.+8      	; 0x990 <__stack+0x91>
 988:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 98c:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 990:	e0 91 45 02 	lds	r30, 0x0245	; 0x800245 <music_i>
 994:	f0 91 46 02 	lds	r31, 0x0246	; 0x800246 <music_i+0x1>
 998:	ee 0f       	add	r30, r30
 99a:	ff 1f       	adc	r31, r31
 99c:	eb 54       	subi	r30, 0x4B	; 75
 99e:	fe 4f       	sbci	r31, 0xFE	; 254
 9a0:	80 81       	ld	r24, Z
 9a2:	91 81       	ldd	r25, Z+1	; 0x01
 9a4:	90 93 44 02 	sts	0x0244, r25	; 0x800244 <beat+0x1>
 9a8:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <beat>
 9ac:	e0 91 45 02 	lds	r30, 0x0245	; 0x800245 <music_i>
 9b0:	f0 91 46 02 	lds	r31, 0x0246	; 0x800246 <music_i+0x1>
 9b4:	ee 0f       	add	r30, r30
 9b6:	ff 1f       	adc	r31, r31
 9b8:	e3 54       	subi	r30, 0x43	; 67
 9ba:	fe 4f       	sbci	r31, 0xFE	; 254
 9bc:	80 81       	ld	r24, Z
 9be:	91 81       	ldd	r25, Z+1	; 0x01
 9c0:	80 33       	cpi	r24, 0x30	; 48
 9c2:	9f 42       	sbci	r25, 0x2F	; 47
 9c4:	31 f4       	brne	.+12     	; 0x9d2 <__stack+0xd3>
 9c6:	10 92 4a 02 	sts	0x024A, r1	; 0x80024a <fail_flag>
 9ca:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 9ce:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 9d2:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <music_i>
 9d6:	90 91 46 02 	lds	r25, 0x0246	; 0x800246 <music_i+0x1>
 9da:	01 96       	adiw	r24, 0x01	; 1
 9dc:	90 93 46 02 	sts	0x0246, r25	; 0x800246 <music_i+0x1>
 9e0:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <music_i>
 9e4:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <beat>
 9e8:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <beat+0x1>
 9ec:	01 97       	sbiw	r24, 0x01	; 1
 9ee:	90 93 44 02 	sts	0x0244, r25	; 0x800244 <beat+0x1>
 9f2:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <beat>
 9f6:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <beat>
 9fa:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <beat+0x1>
 9fe:	89 2b       	or	r24, r25
 a00:	b9 f4       	brne	.+46     	; 0xa30 <__stack+0x131>
 a02:	81 e0       	ldi	r24, 0x01	; 1
 a04:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <next_beat_flag>
 a08:	8a e0       	ldi	r24, 0x0A	; 10
 a0a:	90 e0       	ldi	r25, 0x00	; 0
 a0c:	90 93 48 02 	sts	0x0248, r25	; 0x800248 <interval+0x1>
 a10:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <interval>
 a14:	0d c0       	rjmp	.+26     	; 0xa30 <__stack+0x131>
 a16:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 a1a:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 a1e:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <interval>
 a22:	90 91 48 02 	lds	r25, 0x0248	; 0x800248 <interval+0x1>
 a26:	01 97       	sbiw	r24, 0x01	; 1
 a28:	90 93 48 02 	sts	0x0248, r25	; 0x800248 <interval+0x1>
 a2c:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <interval>
 a30:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <sndsucess_flag>
 a34:	88 23       	and	r24, r24
 a36:	09 f4       	brne	.+2      	; 0xa3a <__stack+0x13b>
 a38:	87 c0       	rjmp	.+270    	; 0xb48 <__stack+0x249>
 a3a:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <interval>
 a3e:	90 91 48 02 	lds	r25, 0x0248	; 0x800248 <interval+0x1>
 a42:	89 2b       	or	r24, r25
 a44:	09 f0       	breq	.+2      	; 0xa48 <__stack+0x149>
 a46:	73 c0       	rjmp	.+230    	; 0xb2e <__stack+0x22f>
 a48:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <next_beat_flag>
 a4c:	88 23       	and	r24, r24
 a4e:	09 f4       	brne	.+2      	; 0xa52 <__stack+0x153>
 a50:	55 c0       	rjmp	.+170    	; 0xafc <__stack+0x1fd>
 a52:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <next_beat_flag>
 a56:	e0 91 45 02 	lds	r30, 0x0245	; 0x800245 <music_i>
 a5a:	f0 91 46 02 	lds	r31, 0x0246	; 0x800246 <music_i+0x1>
 a5e:	ee 0f       	add	r30, r30
 a60:	ff 1f       	adc	r31, r31
 a62:	ef 57       	subi	r30, 0x7F	; 127
 a64:	fe 4f       	sbci	r31, 0xFE	; 254
 a66:	80 81       	ld	r24, Z
 a68:	91 81       	ldd	r25, Z+1	; 0x01
 a6a:	89 2b       	or	r24, r25
 a6c:	c9 f0       	breq	.+50     	; 0xaa0 <__stack+0x1a1>
 a6e:	e0 91 45 02 	lds	r30, 0x0245	; 0x800245 <music_i>
 a72:	f0 91 46 02 	lds	r31, 0x0246	; 0x800246 <music_i+0x1>
 a76:	ee 0f       	add	r30, r30
 a78:	ff 1f       	adc	r31, r31
 a7a:	ef 57       	subi	r30, 0x7F	; 127
 a7c:	fe 4f       	sbci	r31, 0xFE	; 254
 a7e:	20 81       	ld	r18, Z
 a80:	31 81       	ldd	r19, Z+1	; 0x01
 a82:	03 2e       	mov	r0, r19
 a84:	00 0c       	add	r0, r0
 a86:	44 0b       	sbc	r20, r20
 a88:	55 0b       	sbc	r21, r21
 a8a:	60 e4       	ldi	r22, 0x40	; 64
 a8c:	72 e4       	ldi	r23, 0x42	; 66
 a8e:	8f e0       	ldi	r24, 0x0F	; 15
 a90:	90 e0       	ldi	r25, 0x00	; 0
 a92:	0e 94 06 06 	call	0xc0c	; 0xc0c <__udivmodsi4>
 a96:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 a9a:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__stack+0x1a9>
 aa0:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 aa4:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 aa8:	e0 91 45 02 	lds	r30, 0x0245	; 0x800245 <music_i>
 aac:	f0 91 46 02 	lds	r31, 0x0246	; 0x800246 <music_i+0x1>
 ab0:	ee 0f       	add	r30, r30
 ab2:	ff 1f       	adc	r31, r31
 ab4:	e1 5b       	subi	r30, 0xB1	; 177
 ab6:	fe 4f       	sbci	r31, 0xFE	; 254
 ab8:	80 81       	ld	r24, Z
 aba:	91 81       	ldd	r25, Z+1	; 0x01
 abc:	90 93 44 02 	sts	0x0244, r25	; 0x800244 <beat+0x1>
 ac0:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <beat>
 ac4:	e0 91 45 02 	lds	r30, 0x0245	; 0x800245 <music_i>
 ac8:	f0 91 46 02 	lds	r31, 0x0246	; 0x800246 <music_i+0x1>
 acc:	ee 0f       	add	r30, r30
 ace:	ff 1f       	adc	r31, r31
 ad0:	ef 57       	subi	r30, 0x7F	; 127
 ad2:	fe 4f       	sbci	r31, 0xFE	; 254
 ad4:	80 81       	ld	r24, Z
 ad6:	91 81       	ldd	r25, Z+1	; 0x01
 ad8:	80 33       	cpi	r24, 0x30	; 48
 ada:	9f 42       	sbci	r25, 0x2F	; 47
 adc:	31 f4       	brne	.+12     	; 0xaea <__stack+0x1eb>
 ade:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <sndsucess_flag>
 ae2:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 ae6:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 aea:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <music_i>
 aee:	90 91 46 02 	lds	r25, 0x0246	; 0x800246 <music_i+0x1>
 af2:	01 96       	adiw	r24, 0x01	; 1
 af4:	90 93 46 02 	sts	0x0246, r25	; 0x800246 <music_i+0x1>
 af8:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <music_i>
 afc:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <beat>
 b00:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <beat+0x1>
 b04:	01 97       	sbiw	r24, 0x01	; 1
 b06:	90 93 44 02 	sts	0x0244, r25	; 0x800244 <beat+0x1>
 b0a:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <beat>
 b0e:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <beat>
 b12:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <beat+0x1>
 b16:	89 2b       	or	r24, r25
 b18:	b9 f4       	brne	.+46     	; 0xb48 <__stack+0x249>
 b1a:	81 e0       	ldi	r24, 0x01	; 1
 b1c:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <next_beat_flag>
 b20:	8a e0       	ldi	r24, 0x0A	; 10
 b22:	90 e0       	ldi	r25, 0x00	; 0
 b24:	90 93 48 02 	sts	0x0248, r25	; 0x800248 <interval+0x1>
 b28:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <interval>
 b2c:	0d c0       	rjmp	.+26     	; 0xb48 <__stack+0x249>
 b2e:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 b32:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 b36:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <interval>
 b3a:	90 91 48 02 	lds	r25, 0x0248	; 0x800248 <interval+0x1>
 b3e:	01 97       	sbiw	r24, 0x01	; 1
 b40:	90 93 48 02 	sts	0x0248, r25	; 0x800248 <interval+0x1>
 b44:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <interval>
 b48:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <i>
 b4c:	8f 5f       	subi	r24, 0xFF	; 255
 b4e:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <i>
 b52:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <i>
 b56:	84 30       	cpi	r24, 0x04	; 4
 b58:	10 f0       	brcs	.+4      	; 0xb5e <__stack+0x25f>
 b5a:	10 92 33 02 	sts	0x0233, r1	; 0x800233 <i>
 b5e:	8b b1       	in	r24, 0x0b	; 11
 b60:	8f 70       	andi	r24, 0x0F	; 15
 b62:	8b b9       	out	0x0b, r24	; 11
 b64:	e0 91 33 02 	lds	r30, 0x0233	; 0x800233 <i>
 b68:	f0 e0       	ldi	r31, 0x00	; 0
 b6a:	e6 5c       	subi	r30, 0xC6	; 198
 b6c:	fd 4f       	sbci	r31, 0xFD	; 253
 b6e:	80 81       	ld	r24, Z
 b70:	0e 94 5e 00 	call	0xbc	; 0xbc <FND_shift_out>
 b74:	e0 91 33 02 	lds	r30, 0x0233	; 0x800233 <i>
 b78:	9b b1       	in	r25, 0x0b	; 11
 b7a:	f0 e0       	ldi	r31, 0x00	; 0
 b7c:	ec 5f       	subi	r30, 0xFC	; 252
 b7e:	fe 4f       	sbci	r31, 0xFE	; 254
 b80:	80 81       	ld	r24, Z
 b82:	89 2b       	or	r24, r25
 b84:	8b b9       	out	0x0b, r24	; 11
 b86:	ff 91       	pop	r31
 b88:	ef 91       	pop	r30
 b8a:	bf 91       	pop	r27
 b8c:	af 91       	pop	r26
 b8e:	9f 91       	pop	r25
 b90:	8f 91       	pop	r24
 b92:	7f 91       	pop	r23
 b94:	6f 91       	pop	r22
 b96:	5f 91       	pop	r21
 b98:	4f 91       	pop	r20
 b9a:	3f 91       	pop	r19
 b9c:	2f 91       	pop	r18
 b9e:	0f 90       	pop	r0
 ba0:	0f be       	out	0x3f, r0	; 63
 ba2:	0f 90       	pop	r0
 ba4:	1f 90       	pop	r1
 ba6:	18 95       	reti

00000ba8 <Timer0_init>:
 ba8:	84 b5       	in	r24, 0x24	; 36
 baa:	82 60       	ori	r24, 0x02	; 2
 bac:	84 bd       	out	0x24, r24	; 36
 bae:	85 b5       	in	r24, 0x25	; 37
 bb0:	83 60       	ori	r24, 0x03	; 3
 bb2:	85 bd       	out	0x25, r24	; 37
 bb4:	89 ef       	ldi	r24, 0xF9	; 249
 bb6:	87 bd       	out	0x27, r24	; 39
 bb8:	ee e6       	ldi	r30, 0x6E	; 110
 bba:	f0 e0       	ldi	r31, 0x00	; 0
 bbc:	80 81       	ld	r24, Z
 bbe:	82 60       	ori	r24, 0x02	; 2
 bc0:	80 83       	st	Z, r24
 bc2:	08 95       	ret

00000bc4 <Timer1_init_CTC_outA>:
	return;
}

void Timer1_init_CTC_outA(void) //A출력을 쓰기위한 초기화 함수
{
	DDRB |= 1 << PORTB1;
 bc4:	21 9a       	sbi	0x04, 1	; 4
	TCCR1A |= 1 << COM1A0; //TOGGLE
 bc6:	e0 e8       	ldi	r30, 0x80	; 128
 bc8:	f0 e0       	ldi	r31, 0x00	; 0
 bca:	80 81       	ld	r24, Z
 bcc:	80 64       	ori	r24, 0x40	; 64
 bce:	80 83       	st	Z, r24
	TCCR1B |= 1 << WGM12 | 1 <<  CS11;  //CTC 모드//64분주
 bd0:	e1 e8       	ldi	r30, 0x81	; 129
 bd2:	f0 e0       	ldi	r31, 0x00	; 0
 bd4:	80 81       	ld	r24, Z
 bd6:	8a 60       	ori	r24, 0x0A	; 10
 bd8:	80 83       	st	Z, r24
	OCR1A = 0; // 소리 끄기
 bda:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 bde:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 be2:	08 95       	ret

00000be4 <__divmodhi4>:
 be4:	97 fb       	bst	r25, 7
 be6:	07 2e       	mov	r0, r23
 be8:	16 f4       	brtc	.+4      	; 0xbee <__divmodhi4+0xa>
 bea:	00 94       	com	r0
 bec:	07 d0       	rcall	.+14     	; 0xbfc <__divmodhi4_neg1>
 bee:	77 fd       	sbrc	r23, 7
 bf0:	09 d0       	rcall	.+18     	; 0xc04 <__divmodhi4_neg2>
 bf2:	0e 94 28 06 	call	0xc50	; 0xc50 <__udivmodhi4>
 bf6:	07 fc       	sbrc	r0, 7
 bf8:	05 d0       	rcall	.+10     	; 0xc04 <__divmodhi4_neg2>
 bfa:	3e f4       	brtc	.+14     	; 0xc0a <__divmodhi4_exit>

00000bfc <__divmodhi4_neg1>:
 bfc:	90 95       	com	r25
 bfe:	81 95       	neg	r24
 c00:	9f 4f       	sbci	r25, 0xFF	; 255
 c02:	08 95       	ret

00000c04 <__divmodhi4_neg2>:
 c04:	70 95       	com	r23
 c06:	61 95       	neg	r22
 c08:	7f 4f       	sbci	r23, 0xFF	; 255

00000c0a <__divmodhi4_exit>:
 c0a:	08 95       	ret

00000c0c <__udivmodsi4>:
 c0c:	a1 e2       	ldi	r26, 0x21	; 33
 c0e:	1a 2e       	mov	r1, r26
 c10:	aa 1b       	sub	r26, r26
 c12:	bb 1b       	sub	r27, r27
 c14:	fd 01       	movw	r30, r26
 c16:	0d c0       	rjmp	.+26     	; 0xc32 <__udivmodsi4_ep>

00000c18 <__udivmodsi4_loop>:
 c18:	aa 1f       	adc	r26, r26
 c1a:	bb 1f       	adc	r27, r27
 c1c:	ee 1f       	adc	r30, r30
 c1e:	ff 1f       	adc	r31, r31
 c20:	a2 17       	cp	r26, r18
 c22:	b3 07       	cpc	r27, r19
 c24:	e4 07       	cpc	r30, r20
 c26:	f5 07       	cpc	r31, r21
 c28:	20 f0       	brcs	.+8      	; 0xc32 <__udivmodsi4_ep>
 c2a:	a2 1b       	sub	r26, r18
 c2c:	b3 0b       	sbc	r27, r19
 c2e:	e4 0b       	sbc	r30, r20
 c30:	f5 0b       	sbc	r31, r21

00000c32 <__udivmodsi4_ep>:
 c32:	66 1f       	adc	r22, r22
 c34:	77 1f       	adc	r23, r23
 c36:	88 1f       	adc	r24, r24
 c38:	99 1f       	adc	r25, r25
 c3a:	1a 94       	dec	r1
 c3c:	69 f7       	brne	.-38     	; 0xc18 <__udivmodsi4_loop>
 c3e:	60 95       	com	r22
 c40:	70 95       	com	r23
 c42:	80 95       	com	r24
 c44:	90 95       	com	r25
 c46:	9b 01       	movw	r18, r22
 c48:	ac 01       	movw	r20, r24
 c4a:	bd 01       	movw	r22, r26
 c4c:	cf 01       	movw	r24, r30
 c4e:	08 95       	ret

00000c50 <__udivmodhi4>:
 c50:	aa 1b       	sub	r26, r26
 c52:	bb 1b       	sub	r27, r27
 c54:	51 e1       	ldi	r21, 0x11	; 17
 c56:	07 c0       	rjmp	.+14     	; 0xc66 <__udivmodhi4_ep>

00000c58 <__udivmodhi4_loop>:
 c58:	aa 1f       	adc	r26, r26
 c5a:	bb 1f       	adc	r27, r27
 c5c:	a6 17       	cp	r26, r22
 c5e:	b7 07       	cpc	r27, r23
 c60:	10 f0       	brcs	.+4      	; 0xc66 <__udivmodhi4_ep>
 c62:	a6 1b       	sub	r26, r22
 c64:	b7 0b       	sbc	r27, r23

00000c66 <__udivmodhi4_ep>:
 c66:	88 1f       	adc	r24, r24
 c68:	99 1f       	adc	r25, r25
 c6a:	5a 95       	dec	r21
 c6c:	a9 f7       	brne	.-22     	; 0xc58 <__udivmodhi4_loop>
 c6e:	80 95       	com	r24
 c70:	90 95       	com	r25
 c72:	bc 01       	movw	r22, r24
 c74:	cd 01       	movw	r24, r26
 c76:	08 95       	ret

00000c78 <random_r>:
 c78:	8f 92       	push	r8
 c7a:	9f 92       	push	r9
 c7c:	af 92       	push	r10
 c7e:	bf 92       	push	r11
 c80:	cf 92       	push	r12
 c82:	df 92       	push	r13
 c84:	ef 92       	push	r14
 c86:	ff 92       	push	r15
 c88:	cf 93       	push	r28
 c8a:	df 93       	push	r29
 c8c:	ec 01       	movw	r28, r24
 c8e:	68 81       	ld	r22, Y
 c90:	79 81       	ldd	r23, Y+1	; 0x01
 c92:	8a 81       	ldd	r24, Y+2	; 0x02
 c94:	9b 81       	ldd	r25, Y+3	; 0x03
 c96:	61 15       	cp	r22, r1
 c98:	71 05       	cpc	r23, r1
 c9a:	81 05       	cpc	r24, r1
 c9c:	91 05       	cpc	r25, r1
 c9e:	21 f4       	brne	.+8      	; 0xca8 <random_r+0x30>
 ca0:	64 e2       	ldi	r22, 0x24	; 36
 ca2:	79 ed       	ldi	r23, 0xD9	; 217
 ca4:	8b e5       	ldi	r24, 0x5B	; 91
 ca6:	97 e0       	ldi	r25, 0x07	; 7
 ca8:	2d e1       	ldi	r18, 0x1D	; 29
 caa:	33 ef       	ldi	r19, 0xF3	; 243
 cac:	41 e0       	ldi	r20, 0x01	; 1
 cae:	50 e0       	ldi	r21, 0x00	; 0
 cb0:	0e 94 e7 06 	call	0xdce	; 0xdce <__divmodsi4>
 cb4:	49 01       	movw	r8, r18
 cb6:	5a 01       	movw	r10, r20
 cb8:	9b 01       	movw	r18, r22
 cba:	ac 01       	movw	r20, r24
 cbc:	a7 ea       	ldi	r26, 0xA7	; 167
 cbe:	b1 e4       	ldi	r27, 0x41	; 65
 cc0:	0e 94 06 07 	call	0xe0c	; 0xe0c <__muluhisi3>
 cc4:	6b 01       	movw	r12, r22
 cc6:	7c 01       	movw	r14, r24
 cc8:	ac ee       	ldi	r26, 0xEC	; 236
 cca:	b4 ef       	ldi	r27, 0xF4	; 244
 ccc:	a5 01       	movw	r20, r10
 cce:	94 01       	movw	r18, r8
 cd0:	0e 94 14 07 	call	0xe28	; 0xe28 <__mulohisi3>
 cd4:	dc 01       	movw	r26, r24
 cd6:	cb 01       	movw	r24, r22
 cd8:	8c 0d       	add	r24, r12
 cda:	9d 1d       	adc	r25, r13
 cdc:	ae 1d       	adc	r26, r14
 cde:	bf 1d       	adc	r27, r15
 ce0:	b7 ff       	sbrs	r27, 7
 ce2:	03 c0       	rjmp	.+6      	; 0xcea <random_r+0x72>
 ce4:	01 97       	sbiw	r24, 0x01	; 1
 ce6:	a1 09       	sbc	r26, r1
 ce8:	b0 48       	sbci	r27, 0x80	; 128
 cea:	88 83       	st	Y, r24
 cec:	99 83       	std	Y+1, r25	; 0x01
 cee:	aa 83       	std	Y+2, r26	; 0x02
 cf0:	bb 83       	std	Y+3, r27	; 0x03
 cf2:	bc 01       	movw	r22, r24
 cf4:	cd 01       	movw	r24, r26
 cf6:	9f 77       	andi	r25, 0x7F	; 127
 cf8:	df 91       	pop	r29
 cfa:	cf 91       	pop	r28
 cfc:	ff 90       	pop	r15
 cfe:	ef 90       	pop	r14
 d00:	df 90       	pop	r13
 d02:	cf 90       	pop	r12
 d04:	bf 90       	pop	r11
 d06:	af 90       	pop	r10
 d08:	9f 90       	pop	r9
 d0a:	8f 90       	pop	r8
 d0c:	08 95       	ret

00000d0e <random>:
 d0e:	8f 92       	push	r8
 d10:	9f 92       	push	r9
 d12:	af 92       	push	r10
 d14:	bf 92       	push	r11
 d16:	cf 92       	push	r12
 d18:	df 92       	push	r13
 d1a:	ef 92       	push	r14
 d1c:	ff 92       	push	r15
 d1e:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
 d22:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
 d26:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
 d2a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
 d2e:	61 15       	cp	r22, r1
 d30:	71 05       	cpc	r23, r1
 d32:	81 05       	cpc	r24, r1
 d34:	91 05       	cpc	r25, r1
 d36:	21 f4       	brne	.+8      	; 0xd40 <random+0x32>
 d38:	64 e2       	ldi	r22, 0x24	; 36
 d3a:	79 ed       	ldi	r23, 0xD9	; 217
 d3c:	8b e5       	ldi	r24, 0x5B	; 91
 d3e:	97 e0       	ldi	r25, 0x07	; 7
 d40:	2d e1       	ldi	r18, 0x1D	; 29
 d42:	33 ef       	ldi	r19, 0xF3	; 243
 d44:	41 e0       	ldi	r20, 0x01	; 1
 d46:	50 e0       	ldi	r21, 0x00	; 0
 d48:	0e 94 e7 06 	call	0xdce	; 0xdce <__divmodsi4>
 d4c:	49 01       	movw	r8, r18
 d4e:	5a 01       	movw	r10, r20
 d50:	9b 01       	movw	r18, r22
 d52:	ac 01       	movw	r20, r24
 d54:	a7 ea       	ldi	r26, 0xA7	; 167
 d56:	b1 e4       	ldi	r27, 0x41	; 65
 d58:	0e 94 06 07 	call	0xe0c	; 0xe0c <__muluhisi3>
 d5c:	6b 01       	movw	r12, r22
 d5e:	7c 01       	movw	r14, r24
 d60:	ac ee       	ldi	r26, 0xEC	; 236
 d62:	b4 ef       	ldi	r27, 0xF4	; 244
 d64:	a5 01       	movw	r20, r10
 d66:	94 01       	movw	r18, r8
 d68:	0e 94 14 07 	call	0xe28	; 0xe28 <__mulohisi3>
 d6c:	dc 01       	movw	r26, r24
 d6e:	cb 01       	movw	r24, r22
 d70:	8c 0d       	add	r24, r12
 d72:	9d 1d       	adc	r25, r13
 d74:	ae 1d       	adc	r26, r14
 d76:	bf 1d       	adc	r27, r15
 d78:	b7 ff       	sbrs	r27, 7
 d7a:	03 c0       	rjmp	.+6      	; 0xd82 <random+0x74>
 d7c:	01 97       	sbiw	r24, 0x01	; 1
 d7e:	a1 09       	sbc	r26, r1
 d80:	b0 48       	sbci	r27, 0x80	; 128
 d82:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 d86:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 d8a:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 d8e:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 d92:	bc 01       	movw	r22, r24
 d94:	cd 01       	movw	r24, r26
 d96:	9f 77       	andi	r25, 0x7F	; 127
 d98:	ff 90       	pop	r15
 d9a:	ef 90       	pop	r14
 d9c:	df 90       	pop	r13
 d9e:	cf 90       	pop	r12
 da0:	bf 90       	pop	r11
 da2:	af 90       	pop	r10
 da4:	9f 90       	pop	r9
 da6:	8f 90       	pop	r8
 da8:	08 95       	ret

00000daa <srandom>:
 daa:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 dae:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 db2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 db6:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
 dba:	08 95       	ret

00000dbc <strcmp>:
 dbc:	fb 01       	movw	r30, r22
 dbe:	dc 01       	movw	r26, r24
 dc0:	8d 91       	ld	r24, X+
 dc2:	01 90       	ld	r0, Z+
 dc4:	80 19       	sub	r24, r0
 dc6:	01 10       	cpse	r0, r1
 dc8:	d9 f3       	breq	.-10     	; 0xdc0 <strcmp+0x4>
 dca:	99 0b       	sbc	r25, r25
 dcc:	08 95       	ret

00000dce <__divmodsi4>:
 dce:	05 2e       	mov	r0, r21
 dd0:	97 fb       	bst	r25, 7
 dd2:	1e f4       	brtc	.+6      	; 0xdda <__divmodsi4+0xc>
 dd4:	00 94       	com	r0
 dd6:	0e 94 fe 06 	call	0xdfc	; 0xdfc <__negsi2>
 dda:	57 fd       	sbrc	r21, 7
 ddc:	07 d0       	rcall	.+14     	; 0xdec <__divmodsi4_neg2>
 dde:	0e 94 06 06 	call	0xc0c	; 0xc0c <__udivmodsi4>
 de2:	07 fc       	sbrc	r0, 7
 de4:	03 d0       	rcall	.+6      	; 0xdec <__divmodsi4_neg2>
 de6:	4e f4       	brtc	.+18     	; 0xdfa <__divmodsi4_exit>
 de8:	0c 94 fe 06 	jmp	0xdfc	; 0xdfc <__negsi2>

00000dec <__divmodsi4_neg2>:
 dec:	50 95       	com	r21
 dee:	40 95       	com	r20
 df0:	30 95       	com	r19
 df2:	21 95       	neg	r18
 df4:	3f 4f       	sbci	r19, 0xFF	; 255
 df6:	4f 4f       	sbci	r20, 0xFF	; 255
 df8:	5f 4f       	sbci	r21, 0xFF	; 255

00000dfa <__divmodsi4_exit>:
 dfa:	08 95       	ret

00000dfc <__negsi2>:
 dfc:	90 95       	com	r25
 dfe:	80 95       	com	r24
 e00:	70 95       	com	r23
 e02:	61 95       	neg	r22
 e04:	7f 4f       	sbci	r23, 0xFF	; 255
 e06:	8f 4f       	sbci	r24, 0xFF	; 255
 e08:	9f 4f       	sbci	r25, 0xFF	; 255
 e0a:	08 95       	ret

00000e0c <__muluhisi3>:
 e0c:	0e 94 19 07 	call	0xe32	; 0xe32 <__umulhisi3>
 e10:	a5 9f       	mul	r26, r21
 e12:	90 0d       	add	r25, r0
 e14:	b4 9f       	mul	r27, r20
 e16:	90 0d       	add	r25, r0
 e18:	a4 9f       	mul	r26, r20
 e1a:	80 0d       	add	r24, r0
 e1c:	91 1d       	adc	r25, r1
 e1e:	11 24       	eor	r1, r1
 e20:	08 95       	ret

00000e22 <__mulshisi3>:
 e22:	b7 ff       	sbrs	r27, 7
 e24:	0c 94 06 07 	jmp	0xe0c	; 0xe0c <__muluhisi3>

00000e28 <__mulohisi3>:
 e28:	0e 94 06 07 	call	0xe0c	; 0xe0c <__muluhisi3>
 e2c:	82 1b       	sub	r24, r18
 e2e:	93 0b       	sbc	r25, r19
 e30:	08 95       	ret

00000e32 <__umulhisi3>:
 e32:	a2 9f       	mul	r26, r18
 e34:	b0 01       	movw	r22, r0
 e36:	b3 9f       	mul	r27, r19
 e38:	c0 01       	movw	r24, r0
 e3a:	a3 9f       	mul	r26, r19
 e3c:	70 0d       	add	r23, r0
 e3e:	81 1d       	adc	r24, r1
 e40:	11 24       	eor	r1, r1
 e42:	91 1d       	adc	r25, r1
 e44:	b2 9f       	mul	r27, r18
 e46:	70 0d       	add	r23, r0
 e48:	81 1d       	adc	r24, r1
 e4a:	11 24       	eor	r1, r1
 e4c:	91 1d       	adc	r25, r1
 e4e:	08 95       	ret

00000e50 <_exit>:
 e50:	f8 94       	cli

00000e52 <__stop_program>:
 e52:	ff cf       	rjmp	.-2      	; 0xe52 <__stop_program>
