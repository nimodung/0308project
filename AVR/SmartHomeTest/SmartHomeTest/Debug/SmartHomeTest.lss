
SmartHomeTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000320  00800100  0000165a  000016ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000165a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000205  00800420  00800420  00001a0e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001a0e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001a6c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00001aac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001dff  00000000  00000000  00001c34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d9c  00000000  00000000  00003a33  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f18  00000000  00000000  000047cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000364  00000000  00000000  000056e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006c0  00000000  00000000  00005a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000abb  00000000  00000000  0000610c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00006bc7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 4d 03 	jmp	0x69a	; 0x69a <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 bd 03 	jmp	0x77a	; 0x77a <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	14 e0       	ldi	r17, 0x04	; 4
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ea e5       	ldi	r30, 0x5A	; 90
      7c:	f6 e1       	ldi	r31, 0x16	; 22
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a0 32       	cpi	r26, 0x20	; 32
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	26 e0       	ldi	r18, 0x06	; 6
      8c:	a0 e2       	ldi	r26, 0x20	; 32
      8e:	b4 e0       	ldi	r27, 0x04	; 4
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a5 32       	cpi	r26, 0x25	; 37
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 7e 01 	call	0x2fc	; 0x2fc <main>
      9e:	0c 94 2b 0b 	jmp	0x1656	; 0x1656 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_init>:
	return 0;
}

void ADC_init(void)
{
	ADMUX |= (1 << REFS0); //Voltage Reference Selection : AVCC with external capacitor at AREF pin
      a6:	ec e7       	ldi	r30, 0x7C	; 124
      a8:	f0 e0       	ldi	r31, 0x00	; 0
      aa:	80 81       	ld	r24, Z
      ac:	80 64       	ori	r24, 0x40	; 64
      ae:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); //ADC enable, prescaler 128분주
      b0:	ea e7       	ldi	r30, 0x7A	; 122
      b2:	f0 e0       	ldi	r31, 0x00	; 0
      b4:	80 81       	ld	r24, Z
      b6:	87 68       	ori	r24, 0x87	; 135
      b8:	80 83       	st	Z, r24
      ba:	08 95       	ret

000000bc <ADC_converting_value>:

int ADC_converting_value(char channel)
{
	int value = 0;
	
	ADMUX &= 0b11110000; //Analog Channel Selection Bits 초기화
      bc:	ec e7       	ldi	r30, 0x7C	; 124
      be:	f0 e0       	ldi	r31, 0x00	; 0
      c0:	90 81       	ld	r25, Z
      c2:	90 7f       	andi	r25, 0xF0	; 240
      c4:	90 83       	st	Z, r25
	ADMUX |= channel; //채널 설정
      c6:	90 81       	ld	r25, Z
      c8:	89 2b       	or	r24, r25
      ca:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      cc:	8f e1       	ldi	r24, 0x1F	; 31
      ce:	93 e0       	ldi	r25, 0x03	; 3
      d0:	01 97       	sbiw	r24, 0x01	; 1
      d2:	f1 f7       	brne	.-4      	; 0xd0 <ADC_converting_value+0x14>
      d4:	00 c0       	rjmp	.+0      	; 0xd6 <ADC_converting_value+0x1a>
      d6:	00 00       	nop
	_delay_us(200); //제대로 동작하는데 약간의 시간 필요
	
	ADCSRA |= (1 << ADSC); //Start Conversion //When the conversion is complete, it returns to zero
      d8:	ea e7       	ldi	r30, 0x7A	; 122
      da:	f0 e0       	ldi	r31, 0x00	; 0
      dc:	80 81       	ld	r24, Z
      de:	80 64       	ori	r24, 0x40	; 64
      e0:	80 83       	st	Z, r24
	while(!(ADCSRA  & (1 << ADIF))); //ADIF : conversing 이 완료되면 set //ADIF가 0인동안 기다려주기
      e2:	80 81       	ld	r24, Z
      e4:	84 ff       	sbrs	r24, 4
      e6:	fd cf       	rjmp	.-6      	; 0xe2 <ADC_converting_value+0x26>
		/* //컴파일러 문제인듯 // 수식에는 문제 없으나 변경되는 값이 출력안됨
			value = ADCH;
			value <<= 8;
			value += ADCL;  //value |= ADCL; 
		*/
	value = ADCL + ADCH * 256;
      e8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
      ec:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	value = (value + 1) * 500.0 / 1024 + 3; //+3 : 오차 보정 //5 * 100 / 1024 : 0 ~ 5V 사이의 값 , 소숫점을 위해서 *100
      f0:	70 e0       	ldi	r23, 0x00	; 0
      f2:	76 2f       	mov	r23, r22
      f4:	66 27       	eor	r22, r22
      f6:	68 0f       	add	r22, r24
      f8:	71 1d       	adc	r23, r1
      fa:	6f 5f       	subi	r22, 0xFF	; 255
      fc:	7f 4f       	sbci	r23, 0xFF	; 255
      fe:	07 2e       	mov	r0, r23
     100:	00 0c       	add	r0, r0
     102:	88 0b       	sbc	r24, r24
     104:	99 0b       	sbc	r25, r25
     106:	0e 94 6a 05 	call	0xad4	; 0xad4 <__floatsisf>
     10a:	20 e0       	ldi	r18, 0x00	; 0
     10c:	30 e0       	ldi	r19, 0x00	; 0
     10e:	4a ef       	ldi	r20, 0xFA	; 250
     110:	53 e4       	ldi	r21, 0x43	; 67
     112:	0e 94 f6 05 	call	0xbec	; 0xbec <__mulsf3>
     116:	20 e0       	ldi	r18, 0x00	; 0
     118:	30 e0       	ldi	r19, 0x00	; 0
     11a:	40 e8       	ldi	r20, 0x80	; 128
     11c:	5a e3       	ldi	r21, 0x3A	; 58
     11e:	0e 94 f6 05 	call	0xbec	; 0xbec <__mulsf3>
     122:	20 e0       	ldi	r18, 0x00	; 0
     124:	30 e0       	ldi	r19, 0x00	; 0
     126:	40 e4       	ldi	r20, 0x40	; 64
     128:	50 e4       	ldi	r21, 0x40	; 64
     12a:	0e 94 54 04 	call	0x8a8	; 0x8a8 <__addsf3>
	
	return value;
     12e:	0e 94 32 05 	call	0xa64	; 0xa64 <__fixsfsi>
}
     132:	cb 01       	movw	r24, r22
     134:	08 95       	ret

00000136 <Volt_to_cm>:
int Volt_to_cm(int value)  //SHARP 2Y0A21 적외선 거리센서
{
	int cm = 0;
	cm = 20.0 / ((value / 100.0) - 0.3); //데이터 시트 보고 대충 계산한 값 //제품마다 다르기때문에 완전 정확하지않음
	
	return cm; 
     136:	bc 01       	movw	r22, r24
     138:	99 0f       	add	r25, r25
     13a:	88 0b       	sbc	r24, r24
     13c:	99 0b       	sbc	r25, r25
     13e:	0e 94 6a 05 	call	0xad4	; 0xad4 <__floatsisf>
     142:	20 e0       	ldi	r18, 0x00	; 0
     144:	30 e0       	ldi	r19, 0x00	; 0
     146:	48 ec       	ldi	r20, 0xC8	; 200
     148:	52 e4       	ldi	r21, 0x42	; 66
     14a:	0e 94 c0 04 	call	0x980	; 0x980 <__divsf3>
     14e:	2a e9       	ldi	r18, 0x9A	; 154
     150:	39 e9       	ldi	r19, 0x99	; 153
     152:	49 e9       	ldi	r20, 0x99	; 153
     154:	5e e3       	ldi	r21, 0x3E	; 62
     156:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__subsf3>
     15a:	9b 01       	movw	r18, r22
     15c:	ac 01       	movw	r20, r24
     15e:	60 e0       	ldi	r22, 0x00	; 0
     160:	70 e0       	ldi	r23, 0x00	; 0
     162:	80 ea       	ldi	r24, 0xA0	; 160
     164:	91 e4       	ldi	r25, 0x41	; 65
     166:	0e 94 c0 04 	call	0x980	; 0x980 <__divsf3>
     16a:	0e 94 32 05 	call	0xa64	; 0xa64 <__fixsfsi>
}
     16e:	cb 01       	movw	r24, r22
     170:	08 95       	ret

00000172 <Bluetooth_init>:




void Bluetooth_init(void) {
	UART0_init(9600);
     172:	60 e8       	ldi	r22, 0x80	; 128
     174:	75 e2       	ldi	r23, 0x25	; 37
     176:	80 e0       	ldi	r24, 0x00	; 0
     178:	90 e0       	ldi	r25, 0x00	; 0
     17a:	0e 94 1a 04 	call	0x834	; 0x834 <UART0_init>
     17e:	08 95       	ret

00000180 <DHT11_init>:
#include "DHT11.h"


void DHT11_init(void)
{
   DHT11_DDR |= 1 << DHT11_PORT_num;
     180:	24 9a       	sbi	0x04, 4	; 4
   DHT11_PORT |= 1 << DHT11_PORT_num;
     182:	2c 9a       	sbi	0x05, 4	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     184:	2f ef       	ldi	r18, 0xFF	; 255
     186:	8b e7       	ldi	r24, 0x7B	; 123
     188:	92 e9       	ldi	r25, 0x92	; 146
     18a:	21 50       	subi	r18, 0x01	; 1
     18c:	80 40       	sbci	r24, 0x00	; 0
     18e:	90 40       	sbci	r25, 0x00	; 0
     190:	e1 f7       	brne	.-8      	; 0x18a <DHT11_init+0xa>
     192:	00 c0       	rjmp	.+0      	; 0x194 <DHT11_init+0x14>
     194:	00 00       	nop
     196:	08 95       	ret

00000198 <rx_byte>:
   
   return;
}

char rx_byte(void)
{
     198:	48 e0       	ldi	r20, 0x08	; 8
     19a:	50 e0       	ldi	r21, 0x00	; 0
   char data = 0;
     19c:	80 e0       	ldi	r24, 0x00	; 0
     19e:	0a c0       	rjmp	.+20     	; 0x1b4 <rx_byte+0x1c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1a0:	95 e0       	ldi	r25, 0x05	; 5
     1a2:	9a 95       	dec	r25
     1a4:	f1 f7       	brne	.-4      	; 0x1a2 <rx_byte+0xa>
     1a6:	00 00       	nop
   {
	   //
      while(!(DHT11_PIN & (1 << DHT11_PORT_num))) // low인동안 기다리기 // 50us
	  {
		  _delay_us(1);
		  count++;
     1a8:	2f 5f       	subi	r18, 0xFF	; 255
     1aa:	3f 4f       	sbci	r19, 0xFF	; 255
		  if(count >= 200) break;
     1ac:	28 3c       	cpi	r18, 0xC8	; 200
     1ae:	31 05       	cpc	r19, r1
     1b0:	19 f4       	brne	.+6      	; 0x1b8 <rx_byte+0x20>
     1b2:	26 c0       	rjmp	.+76     	; 0x200 <rx_byte+0x68>
   return;
}

char rx_byte(void)
{
   char data = 0;
     1b4:	20 e0       	ldi	r18, 0x00	; 0
     1b6:	30 e0       	ldi	r19, 0x00	; 0
   int count = 0;
   for(int i = 0; i < 8; i++)
   {
	   //
      while(!(DHT11_PIN & (1 << DHT11_PORT_num))) // low인동안 기다리기 // 50us
     1b8:	1c 9b       	sbis	0x03, 4	; 3
     1ba:	f2 cf       	rjmp	.-28     	; 0x1a0 <rx_byte+0x8>
	  {
		  _delay_us(1);
		  count++;
		  if(count >= 200) break;
	  }
	  if(count >= 200) break;
     1bc:	28 3c       	cpi	r18, 0xC8	; 200
     1be:	31 05       	cpc	r19, r1
     1c0:	ec f4       	brge	.+58     	; 0x1fc <rx_byte+0x64>
     1c2:	90 ea       	ldi	r25, 0xA0	; 160
     1c4:	9a 95       	dec	r25
     1c6:	f1 f7       	brne	.-4      	; 0x1c4 <rx_byte+0x2c>
	  count = 0;
     
	  _delay_us(30); // high 26-28 us : data "0"  // 데이터 값이 1이면 30us 지나도 여전히 high 이기때문에
     
	  data = data << 1;      // RH_integral <<= 1;
     1c8:	88 0f       	add	r24, r24
      if(DHT11_PIN & (1 << DHT11_PORT_num))//들어온게 1일때만 끝자리에 넣어준다
     1ca:	1c 9b       	sbis	0x03, 4	; 3
     1cc:	0c c0       	rjmp	.+24     	; 0x1e6 <rx_byte+0x4e>
      {
         data |= 0b00000001;
     1ce:	81 60       	ori	r24, 0x01	; 1
     1d0:	0a c0       	rjmp	.+20     	; 0x1e6 <rx_byte+0x4e>
     1d2:	95 e0       	ldi	r25, 0x05	; 5
     1d4:	9a 95       	dec	r25
     1d6:	f1 f7       	brne	.-4      	; 0x1d4 <rx_byte+0x3c>
     1d8:	00 00       	nop
      }
	  
      while(DHT11_PIN & (1 << DHT11_PORT_num)) //data 값이 1인 경우(high) 시간 보내주기
	  {
		  _delay_us(1);
		  count++;
     1da:	2f 5f       	subi	r18, 0xFF	; 255
     1dc:	3f 4f       	sbci	r19, 0xFF	; 255
		  if(count >= 200) break;
     1de:	28 3c       	cpi	r18, 0xC8	; 200
     1e0:	31 05       	cpc	r19, r1
     1e2:	19 f4       	brne	.+6      	; 0x1ea <rx_byte+0x52>
     1e4:	0d c0       	rjmp	.+26     	; 0x200 <rx_byte+0x68>
   return;
}

char rx_byte(void)
{
   char data = 0;
     1e6:	20 e0       	ldi	r18, 0x00	; 0
     1e8:	30 e0       	ldi	r19, 0x00	; 0
      if(DHT11_PIN & (1 << DHT11_PORT_num))//들어온게 1일때만 끝자리에 넣어준다
      {
         data |= 0b00000001;
      }
	  
      while(DHT11_PIN & (1 << DHT11_PORT_num)) //data 값이 1인 경우(high) 시간 보내주기
     1ea:	1c 99       	sbic	0x03, 4	; 3
     1ec:	f2 cf       	rjmp	.-28     	; 0x1d2 <rx_byte+0x3a>
	  {
		  _delay_us(1);
		  count++;
		  if(count >= 200) break;
	  }
	  if(count >= 200) break;
     1ee:	28 3c       	cpi	r18, 0xC8	; 200
     1f0:	31 05       	cpc	r19, r1
     1f2:	24 f4       	brge	.+8      	; 0x1fc <rx_byte+0x64>
     1f4:	41 50       	subi	r20, 0x01	; 1
     1f6:	51 09       	sbc	r21, r1

char rx_byte(void)
{
   char data = 0;
   int count = 0;
   for(int i = 0; i < 8; i++)
     1f8:	e9 f6       	brne	.-70     	; 0x1b4 <rx_byte+0x1c>
     1fa:	08 95       	ret
	  }
	  if(count >= 200) break;
	  count = 0;
   }
  
   if(count >= 200) return 255;
     1fc:	8f ef       	ldi	r24, 0xFF	; 255
     1fe:	08 95       	ret
     200:	8f ef       	ldi	r24, 0xFF	; 255
   else return data;
}
     202:	08 95       	ret

00000204 <data_output>:

void data_output(void)//data 핀 아웃풋 설정
{
   //대기 상태로 만들어주기
   DHT11_DDR |= (1 << DHT11_PORT_num);   //출력 전환
     204:	24 9a       	sbi	0x04, 4	; 4
   DHT11_PORT |= 1 << DHT11_PORT_num;
     206:	2c 9a       	sbi	0x05, 4	; 5
     208:	08 95       	ret

0000020a <data_input>:
}

void data_input(void)
{
   //DHT11_PORT &= ~(1 << DHT11_PORT4); //내부 PULL UP 없이
   DHT11_DDR &= ~(1 << DHT11_PORT_num);  //입력 전환
     20a:	24 98       	cbi	0x04, 4	; 4
     20c:	08 95       	ret

0000020e <dumi_read>:

void dumi_read(void) //비트 읽고 흘려보내기
{
	
	
	while(DHT11_PIN & (1 << DHT11_PORT_num));  //4번 핀의 값이 1인 동안 기다리기
     20e:	1c 99       	sbic	0x03, 4	; 3
     210:	fe cf       	rjmp	.-4      	; 0x20e <dumi_read>
	while(!(DHT11_PIN & (1 << DHT11_PORT_num))); // 0인 동안, low인동안 80 마이크로 s 기다리는거
     212:	1c 9b       	sbis	0x03, 4	; 3
     214:	fe cf       	rjmp	.-4      	; 0x212 <dumi_read+0x4>
	while(DHT11_PIN & (1 << DHT11_PORT_num)); //1인 동안, high 인동안 80 마이크로s 기다리기
     216:	1c 99       	sbic	0x03, 4	; 3
     218:	fe cf       	rjmp	.-4      	; 0x216 <dumi_read+0x8>
	
	// => 버리는 신호들 , 대기/ 5.2 MCU Sends out Start Signal to DHT
	
	return;
}
     21a:	08 95       	ret

0000021c <DHT11_trigger>:

void DHT11_trigger(void)
{
   DHT11_PORT &= ~(1 << DHT11_PORT_num); //Trigger신호 , low
     21c:	2c 98       	cbi	0x05, 4	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     21e:	2f ef       	ldi	r18, 0xFF	; 255
     220:	80 ee       	ldi	r24, 0xE0	; 224
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	21 50       	subi	r18, 0x01	; 1
     226:	80 40       	sbci	r24, 0x00	; 0
     228:	90 40       	sbci	r25, 0x00	; 0
     22a:	e1 f7       	brne	.-8      	; 0x224 <DHT11_trigger+0x8>
     22c:	00 c0       	rjmp	.+0      	; 0x22e <DHT11_trigger+0x12>
     22e:	00 00       	nop
   
   _delay_ms(18);
   
   DHT11_PORT |= 1 << DHT11_PORT_num; //high
     230:	2c 9a       	sbi	0x05, 4	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     232:	2a e1       	ldi	r18, 0x1A	; 26
     234:	2a 95       	dec	r18
     236:	f1 f7       	brne	.-4      	; 0x234 <DHT11_trigger+0x18>
     238:	00 c0       	rjmp	.+0      	; 0x23a <DHT11_trigger+0x1e>
     23a:	08 95       	ret

0000023c <check_Sharp>:
}

void check_Sharp(){
	int cm = 0;
	
	cm = Volt_to_cm(ADC_converting_value(2));
     23c:	82 e0       	ldi	r24, 0x02	; 2
     23e:	0e 94 5e 00 	call	0xbc	; 0xbc <ADC_converting_value>
     242:	0e 94 9b 00 	call	0x136	; 0x136 <Volt_to_cm>
	// printf("%d\n", cm);
	if(cm <= 9) printf("bathroom : on\n");
     246:	0a 97       	sbiw	r24, 0x0a	; 10
     248:	2c f4       	brge	.+10     	; 0x254 <check_Sharp+0x18>
     24a:	89 e0       	ldi	r24, 0x09	; 9
     24c:	91 e0       	ldi	r25, 0x01	; 1
     24e:	0e 94 ef 06 	call	0xdde	; 0xdde <puts>
     252:	08 95       	ret
	else printf("bathroom : off\n");
     254:	87 e1       	ldi	r24, 0x17	; 23
     256:	91 e0       	ldi	r25, 0x01	; 1
     258:	0e 94 ef 06 	call	0xdde	; 0xdde <puts>
     25c:	08 95       	ret

0000025e <check_DHT11>:
	
	
	return;
}
void check_DHT11() {
     25e:	ef 92       	push	r14
     260:	ff 92       	push	r15
     262:	0f 93       	push	r16
     264:	1f 93       	push	r17
     266:	cf 93       	push	r28
     268:	df 93       	push	r29
	 char RH_integral, RH_decimal, Tmpr_integral, Tmpr_decimal;
	
	 int lux = ADC_converting_value(1);
     26a:	81 e0       	ldi	r24, 0x01	; 1
     26c:	0e 94 5e 00 	call	0xbc	; 0xbc <ADC_converting_value>
     270:	ec 01       	movw	r28, r24
	 
	 if(doorAutoFlag) {
     272:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <doorAutoFlag>
     276:	88 23       	and	r24, r24
     278:	61 f0       	breq	.+24     	; 0x292 <check_DHT11+0x34>
		 if(lux <= 200) printf("lux : off\n");
     27a:	c9 3c       	cpi	r28, 0xC9	; 201
     27c:	d1 05       	cpc	r29, r1
     27e:	2c f4       	brge	.+10     	; 0x28a <check_DHT11+0x2c>
     280:	86 e2       	ldi	r24, 0x26	; 38
     282:	91 e0       	ldi	r25, 0x01	; 1
     284:	0e 94 ef 06 	call	0xdde	; 0xdde <puts>
     288:	04 c0       	rjmp	.+8      	; 0x292 <check_DHT11+0x34>
		 else printf("lux : on\n");
     28a:	80 e3       	ldi	r24, 0x30	; 48
     28c:	91 e0       	ldi	r25, 0x01	; 1
     28e:	0e 94 ef 06 	call	0xdde	; 0xdde <puts>
	 }
	 
	
	 DHT11_trigger(); //트리거
     292:	0e 94 0e 01 	call	0x21c	; 0x21c <DHT11_trigger>
	 data_input(); //입력 전환
     296:	0e 94 05 01 	call	0x20a	; 0x20a <data_input>
	 dumi_read(); // 데이터 전송 전에 시간 흘려보내기
     29a:	0e 94 07 01 	call	0x20e	; 0x20e <dumi_read>
	
	 
	 RH_integral = rx_byte(); //데이터 값 저장
     29e:	0e 94 cc 00 	call	0x198	; 0x198 <rx_byte>
     2a2:	18 2f       	mov	r17, r24
	 RH_decimal  = rx_byte();
     2a4:	0e 94 cc 00 	call	0x198	; 0x198 <rx_byte>
     2a8:	08 2f       	mov	r16, r24
	 Tmpr_integral = rx_byte();
     2aa:	0e 94 cc 00 	call	0x198	; 0x198 <rx_byte>
     2ae:	f8 2e       	mov	r15, r24
	 Tmpr_decimal = rx_byte();
     2b0:	0e 94 cc 00 	call	0x198	; 0x198 <rx_byte>
     2b4:	e8 2e       	mov	r14, r24
	 
	 rx_byte(); //check_sum
     2b6:	0e 94 cc 00 	call	0x198	; 0x198 <rx_byte>
	
	 //DHT11_init();
	 data_output(); // data pin 출력 전환
     2ba:	0e 94 02 01 	call	0x204	; 0x204 <data_output>

	 printf("env : humi %d.%d temper %d.%d lux %d\n", RH_integral, RH_decimal, Tmpr_integral, Tmpr_decimal, lux);
     2be:	df 93       	push	r29
     2c0:	cf 93       	push	r28
     2c2:	1f 92       	push	r1
     2c4:	ef 92       	push	r14
     2c6:	1f 92       	push	r1
     2c8:	ff 92       	push	r15
     2ca:	1f 92       	push	r1
     2cc:	0f 93       	push	r16
     2ce:	1f 92       	push	r1
     2d0:	1f 93       	push	r17
     2d2:	89 e3       	ldi	r24, 0x39	; 57
     2d4:	91 e0       	ldi	r25, 0x01	; 1
     2d6:	9f 93       	push	r25
     2d8:	8f 93       	push	r24
     2da:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <printf>
	 //printf("temper %d.%d\n", Tmpr_integral, Tmpr_decimal);
	 
	// _delay_ms(1500); //적당한 시간을 주지않으면 초기화를 못해서 한번만 출력하고 안된당
	 //delay_flag = 1;
	 
	return;
     2de:	8d b7       	in	r24, 0x3d	; 61
     2e0:	9e b7       	in	r25, 0x3e	; 62
     2e2:	0c 96       	adiw	r24, 0x0c	; 12
     2e4:	0f b6       	in	r0, 0x3f	; 63
     2e6:	f8 94       	cli
     2e8:	9e bf       	out	0x3e, r25	; 62
     2ea:	0f be       	out	0x3f, r0	; 63
     2ec:	8d bf       	out	0x3d, r24	; 61
	  
	
}
     2ee:	df 91       	pop	r29
     2f0:	cf 91       	pop	r28
     2f2:	1f 91       	pop	r17
     2f4:	0f 91       	pop	r16
     2f6:	ff 90       	pop	r15
     2f8:	ef 90       	pop	r14
     2fa:	08 95       	ret

000002fc <main>:

int main(void)
{
	char cmd_idx = 0;
	
	DDRD |= (1 << PORTD2) | (1 << PORTD4) | (1 << PORTD5) | (1 << PORTD6) | (1 << PORTD7);
     2fc:	8a b1       	in	r24, 0x0a	; 10
     2fe:	84 6f       	ori	r24, 0xF4	; 244
     300:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~((1 << PORTD2) | (1 << PORTD4) | (1 << PORTD5) | (1 << PORTD6) | (1 << PORTD7));
     302:	8b b1       	in	r24, 0x0b	; 11
     304:	8b 70       	andi	r24, 0x0B	; 11
     306:	8b b9       	out	0x0b, r24	; 11
	DDRB |= 1 << PORTB5;
     308:	25 9a       	sbi	0x04, 5	; 4
	PORTB &= ~(1<< PORTB5);
     30a:	2d 98       	cbi	0x05, 5	; 5
	Bluetooth_init();
     30c:	0e 94 b9 00 	call	0x172	; 0x172 <Bluetooth_init>
	//Myhome_dotmatrix_init_shiftR();
	Timer0_init();
     310:	0e 94 78 03 	call	0x6f0	; 0x6f0 <Timer0_init>
	Timer2_init_fast_PWM_outA_Motor();
     314:	0e 94 a4 03 	call	0x748	; 0x748 <Timer2_init_fast_PWM_outA_Motor>
	Timer1_init_fast_PWM_outA();
     318:	0e 94 86 03 	call	0x70c	; 0x70c <Timer1_init_fast_PWM_outA>
	DHT11_init();
     31c:	0e 94 c0 00 	call	0x180	; 0x180 <DHT11_init>
	ADC_init();
     320:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_init>
		dotmatrix[i] = 0x01000000 << i | dotmatrixdata[i];

	}
	*/
	
	sei();
     324:	78 94       	sei
extern const char middle_data[8];
extern const char first_data[8];*/

int main(void)
{
	char cmd_idx = 0;
     326:	d1 2c       	mov	r13, r1
	while (1) 
    {
		
		if(RX_cmd_count) {
			RX_cmd_count--;
			if(!strcmp(buffer[cmd_idx], "led room on")) { //strcmp() : 비교해서 같으면 return 0
     328:	0f 2e       	mov	r0, r31
     32a:	f2 e3       	ldi	r31, 0x32	; 50
     32c:	bf 2e       	mov	r11, r31
     32e:	f0 2d       	mov	r31, r0
				bathroomAutoFlag = 0;
			}
			//_delay_ms(1000);
			//while(delay_flag);
			cmd_idx++;
			cmd_idx = cmd_idx % COMMAND_MAX;
     330:	0f 2e       	mov	r0, r31
     332:	fd ec       	ldi	r31, 0xCD	; 205
     334:	cf 2e       	mov	r12, r31
     336:	f0 2d       	mov	r31, r0
			}
			else if(!strcmp(buffer[cmd_idx], "doorLedAutoStatefalse")){
				doorAutoFlag = 0;
			}
			else if(!strcmp(buffer[cmd_idx], "bathroomLedAutoStatetrue")){
				bathroomAutoFlag = 1;
     338:	aa 24       	eor	r10, r10
     33a:	a3 94       	inc	r10
				//printf("door : closed\")
				
			}
			
			else if(!strcmp(buffer[cmd_idx], "window close")){
				OCR1B = 4900;
     33c:	0f 2e       	mov	r0, r31
     33e:	fa e8       	ldi	r31, 0x8A	; 138
     340:	8f 2e       	mov	r8, r31
     342:	91 2c       	mov	r9, r1
     344:	f0 2d       	mov	r31, r0
     346:	0f 2e       	mov	r0, r31
     348:	f4 e2       	ldi	r31, 0x24	; 36
     34a:	ef 2e       	mov	r14, r31
     34c:	f3 e1       	ldi	r31, 0x13	; 19
     34e:	ff 2e       	mov	r15, r31
     350:	f0 2d       	mov	r31, r0
			else if(!strcmp(buffer[cmd_idx], "door close")){
				OCR1A = 4900;
				
			}
			else if(!strcmp(buffer[cmd_idx], "window open")){
				OCR1B = 1300;
     352:	0f 2e       	mov	r0, r31
     354:	f4 e1       	ldi	r31, 0x14	; 20
     356:	2f 2e       	mov	r2, r31
     358:	f5 e0       	ldi	r31, 0x05	; 5
     35a:	3f 2e       	mov	r3, r31
     35c:	f0 2d       	mov	r31, r0
				OCR1A = 2900;
				//printf("door : closed\")
				
			}
			else if(!strcmp(buffer[cmd_idx], "door close")){
				OCR1A = 4900;
     35e:	0f 2e       	mov	r0, r31
     360:	f8 e8       	ldi	r31, 0x88	; 136
     362:	4f 2e       	mov	r4, r31
     364:	51 2c       	mov	r5, r1
     366:	f0 2d       	mov	r31, r0
			else if(!strcmp(buffer[cmd_idx], "fan off")) {
				OCR2B = 0;
				//delay_flag = 1;
			}
			else if(!strcmp(buffer[cmd_idx], "door open")){
				OCR1A = 2900;
     368:	0f 2e       	mov	r0, r31
     36a:	f4 e5       	ldi	r31, 0x54	; 84
     36c:	6f 2e       	mov	r6, r31
     36e:	fb e0       	ldi	r31, 0x0B	; 11
     370:	7f 2e       	mov	r7, r31
     372:	f0 2d       	mov	r31, r0
			else if(!strcmp(buffer[cmd_idx], "fan on")) {
				OCR2B = 200;
				//delay_flag = 1;
			}
			else if(!strcmp(buffer[cmd_idx], "fan off")) {
				OCR2B = 0;
     374:	04 eb       	ldi	r16, 0xB4	; 180
     376:	10 e0       	ldi	r17, 0x00	; 0
	 
	
	while (1) 
    {
		
		if(RX_cmd_count) {
     378:	80 91 19 06 	lds	r24, 0x0619	; 0x800619 <RX_cmd_count>
     37c:	88 23       	and	r24, r24
     37e:	09 f4       	brne	.+2      	; 0x382 <main+0x86>
     380:	7b c1       	rjmp	.+758    	; 0x678 <__LOCK_REGION_LENGTH__+0x278>
			RX_cmd_count--;
     382:	80 91 19 06 	lds	r24, 0x0619	; 0x800619 <RX_cmd_count>
     386:	81 50       	subi	r24, 0x01	; 1
     388:	80 93 19 06 	sts	0x0619, r24	; 0x800619 <RX_cmd_count>
			if(!strcmp(buffer[cmd_idx], "led room on")) { //strcmp() : 비교해서 같으면 return 0
     38c:	bd 9c       	mul	r11, r13
     38e:	e0 01       	movw	r28, r0
     390:	11 24       	eor	r1, r1
     392:	cb 5d       	subi	r28, 0xDB	; 219
     394:	db 4f       	sbci	r29, 0xFB	; 251
     396:	6f e5       	ldi	r22, 0x5F	; 95
     398:	71 e0       	ldi	r23, 0x01	; 1
     39a:	ce 01       	movw	r24, r28
     39c:	0e 94 85 06 	call	0xd0a	; 0xd0a <strcmp>
     3a0:	89 2b       	or	r24, r25
     3a2:	31 f4       	brne	.+12     	; 0x3b0 <main+0xb4>
				PORTD |= 1 << PORTD2;
     3a4:	5a 9a       	sbi	0x0b, 2	; 11
				//delay_flag = 1;
				printf("led : room on\n");
     3a6:	8b e6       	ldi	r24, 0x6B	; 107
     3a8:	91 e0       	ldi	r25, 0x01	; 1
     3aa:	0e 94 ef 06 	call	0xdde	; 0xdde <puts>
     3ae:	55 c1       	rjmp	.+682    	; 0x65a <__LOCK_REGION_LENGTH__+0x25a>
			}
			else if(!strcmp(buffer[cmd_idx], "led room off")) {
     3b0:	69 e7       	ldi	r22, 0x79	; 121
     3b2:	71 e0       	ldi	r23, 0x01	; 1
     3b4:	ce 01       	movw	r24, r28
     3b6:	0e 94 85 06 	call	0xd0a	; 0xd0a <strcmp>
     3ba:	89 2b       	or	r24, r25
     3bc:	31 f4       	brne	.+12     	; 0x3ca <main+0xce>
				PORTD &= ~(1 << PORTD2);
     3be:	5a 98       	cbi	0x0b, 2	; 11
				//delay_flag = 1;
				printf("led : room off\n");
     3c0:	86 e8       	ldi	r24, 0x86	; 134
     3c2:	91 e0       	ldi	r25, 0x01	; 1
     3c4:	0e 94 ef 06 	call	0xdde	; 0xdde <puts>
     3c8:	48 c1       	rjmp	.+656    	; 0x65a <__LOCK_REGION_LENGTH__+0x25a>
			}
			else if(!strcmp(buffer[cmd_idx], "led living on")) {
     3ca:	65 e9       	ldi	r22, 0x95	; 149
     3cc:	71 e0       	ldi	r23, 0x01	; 1
     3ce:	ce 01       	movw	r24, r28
     3d0:	0e 94 85 06 	call	0xd0a	; 0xd0a <strcmp>
     3d4:	89 2b       	or	r24, r25
     3d6:	31 f4       	brne	.+12     	; 0x3e4 <main+0xe8>
				PORTD |= 1 << PORTD4;
     3d8:	5c 9a       	sbi	0x0b, 4	; 11
				//delay_flag = 1;
				printf("led : living on\n");
     3da:	83 ea       	ldi	r24, 0xA3	; 163
     3dc:	91 e0       	ldi	r25, 0x01	; 1
     3de:	0e 94 ef 06 	call	0xdde	; 0xdde <puts>
     3e2:	3b c1       	rjmp	.+630    	; 0x65a <__LOCK_REGION_LENGTH__+0x25a>
			}
			else if(!strcmp(buffer[cmd_idx], "led living off")) {
     3e4:	63 eb       	ldi	r22, 0xB3	; 179
     3e6:	71 e0       	ldi	r23, 0x01	; 1
     3e8:	ce 01       	movw	r24, r28
     3ea:	0e 94 85 06 	call	0xd0a	; 0xd0a <strcmp>
     3ee:	89 2b       	or	r24, r25
     3f0:	31 f4       	brne	.+12     	; 0x3fe <main+0x102>
				PORTD &= ~(1 << PORTD4);
     3f2:	5c 98       	cbi	0x0b, 4	; 11
				//delay_flag = 1;
				printf("led : living off\n");
     3f4:	82 ec       	ldi	r24, 0xC2	; 194
     3f6:	91 e0       	ldi	r25, 0x01	; 1
     3f8:	0e 94 ef 06 	call	0xdde	; 0xdde <puts>
     3fc:	2e c1       	rjmp	.+604    	; 0x65a <__LOCK_REGION_LENGTH__+0x25a>
			}
			else if(!strcmp(buffer[cmd_idx], "led kitchen on")) {
     3fe:	63 ed       	ldi	r22, 0xD3	; 211
     400:	71 e0       	ldi	r23, 0x01	; 1
     402:	ce 01       	movw	r24, r28
     404:	0e 94 85 06 	call	0xd0a	; 0xd0a <strcmp>
     408:	89 2b       	or	r24, r25
     40a:	31 f4       	brne	.+12     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
				PORTD |= 1 << PORTD5;
     40c:	5d 9a       	sbi	0x0b, 5	; 11
				//delay_flag = 1;
				printf("led : kitchen on\n");
     40e:	82 ee       	ldi	r24, 0xE2	; 226
     410:	91 e0       	ldi	r25, 0x01	; 1
     412:	0e 94 ef 06 	call	0xdde	; 0xdde <puts>
     416:	21 c1       	rjmp	.+578    	; 0x65a <__LOCK_REGION_LENGTH__+0x25a>
			}
			else if(!strcmp(buffer[cmd_idx], "led kitchen off")) {
     418:	63 ef       	ldi	r22, 0xF3	; 243
     41a:	71 e0       	ldi	r23, 0x01	; 1
     41c:	ce 01       	movw	r24, r28
     41e:	0e 94 85 06 	call	0xd0a	; 0xd0a <strcmp>
     422:	89 2b       	or	r24, r25
     424:	31 f4       	brne	.+12     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
				PORTD &= ~(1 << PORTD5);
     426:	5d 98       	cbi	0x0b, 5	; 11
				//delay_flag = 1;
				printf("led : kitchen off\n");
     428:	83 e0       	ldi	r24, 0x03	; 3
     42a:	92 e0       	ldi	r25, 0x02	; 2
     42c:	0e 94 ef 06 	call	0xdde	; 0xdde <puts>
     430:	14 c1       	rjmp	.+552    	; 0x65a <__LOCK_REGION_LENGTH__+0x25a>
			}
			else if(!strcmp(buffer[cmd_idx], "led bathroom on")) {
     432:	65 e1       	ldi	r22, 0x15	; 21
     434:	72 e0       	ldi	r23, 0x02	; 2
     436:	ce 01       	movw	r24, r28
     438:	0e 94 85 06 	call	0xd0a	; 0xd0a <strcmp>
     43c:	89 2b       	or	r24, r25
     43e:	31 f4       	brne	.+12     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
				PORTD |= 1 << PORTD6;
     440:	5e 9a       	sbi	0x0b, 6	; 11
				//delay_flag = 1;
				printf("led : bathroom on\n");
     442:	85 e2       	ldi	r24, 0x25	; 37
     444:	92 e0       	ldi	r25, 0x02	; 2
     446:	0e 94 ef 06 	call	0xdde	; 0xdde <puts>
     44a:	07 c1       	rjmp	.+526    	; 0x65a <__LOCK_REGION_LENGTH__+0x25a>
			}
			else if(!strcmp(buffer[cmd_idx], "led bathroom off")) {
     44c:	67 e3       	ldi	r22, 0x37	; 55
     44e:	72 e0       	ldi	r23, 0x02	; 2
     450:	ce 01       	movw	r24, r28
     452:	0e 94 85 06 	call	0xd0a	; 0xd0a <strcmp>
     456:	89 2b       	or	r24, r25
     458:	31 f4       	brne	.+12     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
				PORTD &= ~(1 << PORTD6);
     45a:	5e 98       	cbi	0x0b, 6	; 11
				//delay_flag = 1;
				printf("led : bathroom off\n");
     45c:	88 e4       	ldi	r24, 0x48	; 72
     45e:	92 e0       	ldi	r25, 0x02	; 2
     460:	0e 94 ef 06 	call	0xdde	; 0xdde <puts>
     464:	fa c0       	rjmp	.+500    	; 0x65a <__LOCK_REGION_LENGTH__+0x25a>
			}
			else if(!strcmp(buffer[cmd_idx], "led door on")) {
     466:	6b e5       	ldi	r22, 0x5B	; 91
     468:	72 e0       	ldi	r23, 0x02	; 2
     46a:	ce 01       	movw	r24, r28
     46c:	0e 94 85 06 	call	0xd0a	; 0xd0a <strcmp>
     470:	89 2b       	or	r24, r25
     472:	31 f4       	brne	.+12     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
				PORTD |= 1 << PORTD7;
     474:	5f 9a       	sbi	0x0b, 7	; 11
				//delay_flag = 1;
				printf("led : door on\n");
     476:	87 e6       	ldi	r24, 0x67	; 103
     478:	92 e0       	ldi	r25, 0x02	; 2
     47a:	0e 94 ef 06 	call	0xdde	; 0xdde <puts>
     47e:	ed c0       	rjmp	.+474    	; 0x65a <__LOCK_REGION_LENGTH__+0x25a>
			}
			else if(!strcmp(buffer[cmd_idx], "led door off")) {
     480:	65 e7       	ldi	r22, 0x75	; 117
     482:	72 e0       	ldi	r23, 0x02	; 2
     484:	ce 01       	movw	r24, r28
     486:	0e 94 85 06 	call	0xd0a	; 0xd0a <strcmp>
     48a:	89 2b       	or	r24, r25
     48c:	31 f4       	brne	.+12     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
				PORTD &= ~(1 << PORTD7);
     48e:	5f 98       	cbi	0x0b, 7	; 11
				//delay_flag = 1;
				printf("led : door off\n");
     490:	82 e8       	ldi	r24, 0x82	; 130
     492:	92 e0       	ldi	r25, 0x02	; 2
     494:	0e 94 ef 06 	call	0xdde	; 0xdde <puts>
     498:	e0 c0       	rjmp	.+448    	; 0x65a <__LOCK_REGION_LENGTH__+0x25a>
			}
			else if(!strcmp(buffer[cmd_idx], "led whole on")) {
     49a:	61 e9       	ldi	r22, 0x91	; 145
     49c:	72 e0       	ldi	r23, 0x02	; 2
     49e:	ce 01       	movw	r24, r28
     4a0:	0e 94 85 06 	call	0xd0a	; 0xd0a <strcmp>
     4a4:	89 2b       	or	r24, r25
     4a6:	41 f4       	brne	.+16     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
				PORTD |= 1 << PORTD2 | 1 << PORTD4 | 1 << PORTD5 | 1 << PORTD6 | 1 << PORTD7;
     4a8:	8b b1       	in	r24, 0x0b	; 11
     4aa:	84 6f       	ori	r24, 0xF4	; 244
     4ac:	8b b9       	out	0x0b, r24	; 11
				//delay_flag = 1;
				printf("led : whole on\n");
     4ae:	8e e9       	ldi	r24, 0x9E	; 158
     4b0:	92 e0       	ldi	r25, 0x02	; 2
     4b2:	0e 94 ef 06 	call	0xdde	; 0xdde <puts>
     4b6:	d1 c0       	rjmp	.+418    	; 0x65a <__LOCK_REGION_LENGTH__+0x25a>
			}
			else if(!strcmp(buffer[cmd_idx], "led whole off")) {
     4b8:	6d ea       	ldi	r22, 0xAD	; 173
     4ba:	72 e0       	ldi	r23, 0x02	; 2
     4bc:	ce 01       	movw	r24, r28
     4be:	0e 94 85 06 	call	0xd0a	; 0xd0a <strcmp>
     4c2:	89 2b       	or	r24, r25
     4c4:	41 f4       	brne	.+16     	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
				PORTD &= ~(1 << PORTD2 | 1 << PORTD4 | 1 << PORTD5 | 1 << PORTD6 | 1 << PORTD7);
     4c6:	8b b1       	in	r24, 0x0b	; 11
     4c8:	8b 70       	andi	r24, 0x0B	; 11
     4ca:	8b b9       	out	0x0b, r24	; 11
				//delay_flag = 1;
				printf("led : whole off\n");
     4cc:	8b eb       	ldi	r24, 0xBB	; 187
     4ce:	92 e0       	ldi	r25, 0x02	; 2
     4d0:	0e 94 ef 06 	call	0xdde	; 0xdde <puts>
     4d4:	c2 c0       	rjmp	.+388    	; 0x65a <__LOCK_REGION_LENGTH__+0x25a>
			}
			else if(!strcmp(buffer[cmd_idx], "led whole on auto")) {
     4d6:	6b ec       	ldi	r22, 0xCB	; 203
     4d8:	72 e0       	ldi	r23, 0x02	; 2
     4da:	ce 01       	movw	r24, r28
     4dc:	0e 94 85 06 	call	0xd0a	; 0xd0a <strcmp>
     4e0:	89 2b       	or	r24, r25
     4e2:	41 f4       	brne	.+16     	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
				PORTD |= 1 << PORTD2 | 1 << PORTD4 | 1 << PORTD5;
     4e4:	8b b1       	in	r24, 0x0b	; 11
     4e6:	84 63       	ori	r24, 0x34	; 52
     4e8:	8b b9       	out	0x0b, r24	; 11
				//delay_flag = 1;
				printf("led : whole on\n");
     4ea:	8e e9       	ldi	r24, 0x9E	; 158
     4ec:	92 e0       	ldi	r25, 0x02	; 2
     4ee:	0e 94 ef 06 	call	0xdde	; 0xdde <puts>
     4f2:	b3 c0       	rjmp	.+358    	; 0x65a <__LOCK_REGION_LENGTH__+0x25a>
			}
			else if(!strcmp(buffer[cmd_idx], "led whole off auto")) {
     4f4:	6d ed       	ldi	r22, 0xDD	; 221
     4f6:	72 e0       	ldi	r23, 0x02	; 2
     4f8:	ce 01       	movw	r24, r28
     4fa:	0e 94 85 06 	call	0xd0a	; 0xd0a <strcmp>
     4fe:	89 2b       	or	r24, r25
     500:	41 f4       	brne	.+16     	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
				PORTD &= ~(1 << PORTD2 | 1 << PORTD4 | 1 << PORTD5);
     502:	8b b1       	in	r24, 0x0b	; 11
     504:	8b 7c       	andi	r24, 0xCB	; 203
     506:	8b b9       	out	0x0b, r24	; 11
				//delay_flag = 1;
				printf("led : whole off\n");
     508:	8b eb       	ldi	r24, 0xBB	; 187
     50a:	92 e0       	ldi	r25, 0x02	; 2
     50c:	0e 94 ef 06 	call	0xdde	; 0xdde <puts>
     510:	a4 c0       	rjmp	.+328    	; 0x65a <__LOCK_REGION_LENGTH__+0x25a>
			}
			else if(!strcmp(buffer[cmd_idx], "led whole on door")) {
     512:	60 ef       	ldi	r22, 0xF0	; 240
     514:	72 e0       	ldi	r23, 0x02	; 2
     516:	ce 01       	movw	r24, r28
     518:	0e 94 85 06 	call	0xd0a	; 0xd0a <strcmp>
     51c:	89 2b       	or	r24, r25
     51e:	41 f4       	brne	.+16     	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
				PORTD |= 1 << PORTD2 | 1 << PORTD4 | 1 << PORTD5 | 1 << PORTD6;
     520:	8b b1       	in	r24, 0x0b	; 11
     522:	84 67       	ori	r24, 0x74	; 116
     524:	8b b9       	out	0x0b, r24	; 11
				//delay_flag = 1;
				printf("led : wholed on\n");
     526:	82 e0       	ldi	r24, 0x02	; 2
     528:	93 e0       	ldi	r25, 0x03	; 3
     52a:	0e 94 ef 06 	call	0xdde	; 0xdde <puts>
     52e:	95 c0       	rjmp	.+298    	; 0x65a <__LOCK_REGION_LENGTH__+0x25a>
			}
			else if(!strcmp(buffer[cmd_idx], "led whole off door")) {
     530:	62 e1       	ldi	r22, 0x12	; 18
     532:	73 e0       	ldi	r23, 0x03	; 3
     534:	ce 01       	movw	r24, r28
     536:	0e 94 85 06 	call	0xd0a	; 0xd0a <strcmp>
     53a:	89 2b       	or	r24, r25
     53c:	41 f4       	brne	.+16     	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
				PORTD &= ~(1 << PORTD2 | 1 << PORTD4 | 1 << PORTD5 | 1 << PORTD6);
     53e:	8b b1       	in	r24, 0x0b	; 11
     540:	8b 78       	andi	r24, 0x8B	; 139
     542:	8b b9       	out	0x0b, r24	; 11
				//delay_flag = 1;
				printf("led : wholed off\n");
     544:	85 e2       	ldi	r24, 0x25	; 37
     546:	93 e0       	ldi	r25, 0x03	; 3
     548:	0e 94 ef 06 	call	0xdde	; 0xdde <puts>
     54c:	86 c0       	rjmp	.+268    	; 0x65a <__LOCK_REGION_LENGTH__+0x25a>
			}
			else if(!strcmp(buffer[cmd_idx], "led whole on bathroom")) {
     54e:	66 e3       	ldi	r22, 0x36	; 54
     550:	73 e0       	ldi	r23, 0x03	; 3
     552:	ce 01       	movw	r24, r28
     554:	0e 94 85 06 	call	0xd0a	; 0xd0a <strcmp>
     558:	89 2b       	or	r24, r25
     55a:	41 f4       	brne	.+16     	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
				PORTD |= 1 << PORTD2 | 1 << PORTD4 | 1 << PORTD5 | 1 << PORTD7;
     55c:	8b b1       	in	r24, 0x0b	; 11
     55e:	84 6b       	ori	r24, 0xB4	; 180
     560:	8b b9       	out	0x0b, r24	; 11
				//delay_flag = 1;
				printf("led : wholeb on\n");
     562:	8c e4       	ldi	r24, 0x4C	; 76
     564:	93 e0       	ldi	r25, 0x03	; 3
     566:	0e 94 ef 06 	call	0xdde	; 0xdde <puts>
     56a:	77 c0       	rjmp	.+238    	; 0x65a <__LOCK_REGION_LENGTH__+0x25a>
			}
			else if(!strcmp(buffer[cmd_idx], "led whole off bathroom")) {
     56c:	6c e5       	ldi	r22, 0x5C	; 92
     56e:	73 e0       	ldi	r23, 0x03	; 3
     570:	ce 01       	movw	r24, r28
     572:	0e 94 85 06 	call	0xd0a	; 0xd0a <strcmp>
     576:	89 2b       	or	r24, r25
     578:	41 f4       	brne	.+16     	; 0x58a <__LOCK_REGION_LENGTH__+0x18a>
				PORTD &= ~(1 << PORTD2 | 1 << PORTD4 | 1 << PORTD5 | 1 << PORTD7);
     57a:	8b b1       	in	r24, 0x0b	; 11
     57c:	8b 74       	andi	r24, 0x4B	; 75
     57e:	8b b9       	out	0x0b, r24	; 11
				//delay_flag = 1;
				printf("led : wholeb off\n");
     580:	83 e7       	ldi	r24, 0x73	; 115
     582:	93 e0       	ldi	r25, 0x03	; 3
     584:	0e 94 ef 06 	call	0xdde	; 0xdde <puts>
     588:	68 c0       	rjmp	.+208    	; 0x65a <__LOCK_REGION_LENGTH__+0x25a>
			}
			else if(!strcmp(buffer[cmd_idx], "fan on")) {
     58a:	64 e8       	ldi	r22, 0x84	; 132
     58c:	73 e0       	ldi	r23, 0x03	; 3
     58e:	ce 01       	movw	r24, r28
     590:	0e 94 85 06 	call	0xd0a	; 0xd0a <strcmp>
     594:	89 2b       	or	r24, r25
     596:	21 f4       	brne	.+8      	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
				OCR2B = 200;
     598:	88 ec       	ldi	r24, 0xC8	; 200
     59a:	f8 01       	movw	r30, r16
     59c:	80 83       	st	Z, r24
     59e:	5d c0       	rjmp	.+186    	; 0x65a <__LOCK_REGION_LENGTH__+0x25a>
				//delay_flag = 1;
			}
			else if(!strcmp(buffer[cmd_idx], "fan off")) {
     5a0:	6b e8       	ldi	r22, 0x8B	; 139
     5a2:	73 e0       	ldi	r23, 0x03	; 3
     5a4:	ce 01       	movw	r24, r28
     5a6:	0e 94 85 06 	call	0xd0a	; 0xd0a <strcmp>
     5aa:	89 2b       	or	r24, r25
     5ac:	19 f4       	brne	.+6      	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
				OCR2B = 0;
     5ae:	f8 01       	movw	r30, r16
     5b0:	10 82       	st	Z, r1
     5b2:	53 c0       	rjmp	.+166    	; 0x65a <__LOCK_REGION_LENGTH__+0x25a>
				//delay_flag = 1;
			}
			else if(!strcmp(buffer[cmd_idx], "door open")){
     5b4:	63 e9       	ldi	r22, 0x93	; 147
     5b6:	73 e0       	ldi	r23, 0x03	; 3
     5b8:	ce 01       	movw	r24, r28
     5ba:	0e 94 85 06 	call	0xd0a	; 0xd0a <strcmp>
     5be:	89 2b       	or	r24, r25
     5c0:	21 f4       	brne	.+8      	; 0x5ca <__LOCK_REGION_LENGTH__+0x1ca>
				OCR1A = 2900;
     5c2:	f2 01       	movw	r30, r4
     5c4:	71 82       	std	Z+1, r7	; 0x01
     5c6:	60 82       	st	Z, r6
     5c8:	48 c0       	rjmp	.+144    	; 0x65a <__LOCK_REGION_LENGTH__+0x25a>
				//printf("door : closed\")
				
			}
			else if(!strcmp(buffer[cmd_idx], "door close")){
     5ca:	6d e9       	ldi	r22, 0x9D	; 157
     5cc:	73 e0       	ldi	r23, 0x03	; 3
     5ce:	ce 01       	movw	r24, r28
     5d0:	0e 94 85 06 	call	0xd0a	; 0xd0a <strcmp>
     5d4:	89 2b       	or	r24, r25
     5d6:	21 f4       	brne	.+8      	; 0x5e0 <__LOCK_REGION_LENGTH__+0x1e0>
				OCR1A = 4900;
     5d8:	f2 01       	movw	r30, r4
     5da:	f1 82       	std	Z+1, r15	; 0x01
     5dc:	e0 82       	st	Z, r14
     5de:	3d c0       	rjmp	.+122    	; 0x65a <__LOCK_REGION_LENGTH__+0x25a>
				
			}
			else if(!strcmp(buffer[cmd_idx], "window open")){
     5e0:	68 ea       	ldi	r22, 0xA8	; 168
     5e2:	73 e0       	ldi	r23, 0x03	; 3
     5e4:	ce 01       	movw	r24, r28
     5e6:	0e 94 85 06 	call	0xd0a	; 0xd0a <strcmp>
     5ea:	89 2b       	or	r24, r25
     5ec:	21 f4       	brne	.+8      	; 0x5f6 <__LOCK_REGION_LENGTH__+0x1f6>
				OCR1B = 1300;
     5ee:	f4 01       	movw	r30, r8
     5f0:	31 82       	std	Z+1, r3	; 0x01
     5f2:	20 82       	st	Z, r2
     5f4:	32 c0       	rjmp	.+100    	; 0x65a <__LOCK_REGION_LENGTH__+0x25a>
				//printf("door : closed\")
				
			}
			
			else if(!strcmp(buffer[cmd_idx], "window close")){
     5f6:	64 eb       	ldi	r22, 0xB4	; 180
     5f8:	73 e0       	ldi	r23, 0x03	; 3
     5fa:	ce 01       	movw	r24, r28
     5fc:	0e 94 85 06 	call	0xd0a	; 0xd0a <strcmp>
     600:	89 2b       	or	r24, r25
     602:	21 f4       	brne	.+8      	; 0x60c <__LOCK_REGION_LENGTH__+0x20c>
				OCR1B = 4900;
     604:	f4 01       	movw	r30, r8
     606:	f1 82       	std	Z+1, r15	; 0x01
     608:	e0 82       	st	Z, r14
     60a:	27 c0       	rjmp	.+78     	; 0x65a <__LOCK_REGION_LENGTH__+0x25a>
				
			}
			else if(!strcmp(buffer[cmd_idx], "doorLedAutoStatetrue")){
     60c:	61 ec       	ldi	r22, 0xC1	; 193
     60e:	73 e0       	ldi	r23, 0x03	; 3
     610:	ce 01       	movw	r24, r28
     612:	0e 94 85 06 	call	0xd0a	; 0xd0a <strcmp>
     616:	89 2b       	or	r24, r25
     618:	19 f4       	brne	.+6      	; 0x620 <__LOCK_REGION_LENGTH__+0x220>
				doorAutoFlag = 1;
     61a:	a0 92 07 01 	sts	0x0107, r10	; 0x800107 <doorAutoFlag>
     61e:	1d c0       	rjmp	.+58     	; 0x65a <__LOCK_REGION_LENGTH__+0x25a>
			}
			else if(!strcmp(buffer[cmd_idx], "doorLedAutoStatefalse")){
     620:	66 ed       	ldi	r22, 0xD6	; 214
     622:	73 e0       	ldi	r23, 0x03	; 3
     624:	ce 01       	movw	r24, r28
     626:	0e 94 85 06 	call	0xd0a	; 0xd0a <strcmp>
     62a:	89 2b       	or	r24, r25
     62c:	19 f4       	brne	.+6      	; 0x634 <__LOCK_REGION_LENGTH__+0x234>
				doorAutoFlag = 0;
     62e:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <doorAutoFlag>
     632:	13 c0       	rjmp	.+38     	; 0x65a <__LOCK_REGION_LENGTH__+0x25a>
			}
			else if(!strcmp(buffer[cmd_idx], "bathroomLedAutoStatetrue")){
     634:	6c ee       	ldi	r22, 0xEC	; 236
     636:	73 e0       	ldi	r23, 0x03	; 3
     638:	ce 01       	movw	r24, r28
     63a:	0e 94 85 06 	call	0xd0a	; 0xd0a <strcmp>
     63e:	89 2b       	or	r24, r25
     640:	19 f4       	brne	.+6      	; 0x648 <__LOCK_REGION_LENGTH__+0x248>
				bathroomAutoFlag = 1;
     642:	a0 92 06 01 	sts	0x0106, r10	; 0x800106 <bathroomAutoFlag>
     646:	09 c0       	rjmp	.+18     	; 0x65a <__LOCK_REGION_LENGTH__+0x25a>
			}
			else if(!strcmp(buffer[cmd_idx], "bathroomLedAutoStatefalse")){
     648:	65 e0       	ldi	r22, 0x05	; 5
     64a:	74 e0       	ldi	r23, 0x04	; 4
     64c:	ce 01       	movw	r24, r28
     64e:	0e 94 85 06 	call	0xd0a	; 0xd0a <strcmp>
     652:	89 2b       	or	r24, r25
     654:	11 f4       	brne	.+4      	; 0x65a <__LOCK_REGION_LENGTH__+0x25a>
				bathroomAutoFlag = 0;
     656:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <bathroomAutoFlag>
			}
			//_delay_ms(1000);
			//while(delay_flag);
			cmd_idx++;
     65a:	91 e0       	ldi	r25, 0x01	; 1
     65c:	9d 0d       	add	r25, r13
			cmd_idx = cmd_idx % COMMAND_MAX;
     65e:	9c 9d       	mul	r25, r12
     660:	d1 2c       	mov	r13, r1
     662:	11 24       	eor	r1, r1
     664:	d6 94       	lsr	r13
     666:	d6 94       	lsr	r13
     668:	d6 94       	lsr	r13
     66a:	dd 0c       	add	r13, r13
     66c:	8d 2d       	mov	r24, r13
     66e:	88 0f       	add	r24, r24
     670:	88 0f       	add	r24, r24
     672:	d8 0e       	add	r13, r24
     674:	9d 19       	sub	r25, r13
     676:	d9 2e       	mov	r13, r25
		}
		
	//	Dotmatrix_flow_left_in();
	//	Dotmatrix_flow_left_out();
		
		if(check_DHT11_flag) {
     678:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <check_DHT11_flag>
     67c:	88 23       	and	r24, r24
     67e:	09 f4       	brne	.+2      	; 0x682 <__LOCK_REGION_LENGTH__+0x282>
     680:	7b ce       	rjmp	.-778    	; 0x378 <main+0x7c>
			check_DHT11_flag = 0;
     682:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <check_DHT11_flag>
			check_DHT11();
     686:	0e 94 2f 01 	call	0x25e	; 0x25e <check_DHT11>
			if(bathroomAutoFlag){check_Sharp();}
     68a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <bathroomAutoFlag>
     68e:	88 23       	and	r24, r24
     690:	09 f4       	brne	.+2      	; 0x694 <__LOCK_REGION_LENGTH__+0x294>
     692:	72 ce       	rjmp	.-796    	; 0x378 <main+0x7c>
     694:	0e 94 1e 01 	call	0x23c	; 0x23c <check_Sharp>
     698:	6f ce       	rjmp	.-802    	; 0x378 <main+0x7c>

0000069a <__vector_14>:
void Timer1_init_CTC_outA(void) //A 출력을 쓰기위한 초기화 함수
{
	DDRB |= 1 << PORTB1;
	TCCR1A |= (1 << COM1A1); //TOGGLE
	TCCR1B |= (1 << WGM12) | (1 <<  CS11);  //CTC 모드//64분주
	OCR1A = 5000; // 소리 끄기
     69a:	1f 92       	push	r1
     69c:	0f 92       	push	r0
     69e:	0f b6       	in	r0, 0x3f	; 63
     6a0:	0f 92       	push	r0
     6a2:	11 24       	eor	r1, r1
     6a4:	2f 93       	push	r18
     6a6:	8f 93       	push	r24
     6a8:	9f 93       	push	r25
     6aa:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <__data_end>
     6ae:	90 91 21 04 	lds	r25, 0x0421	; 0x800421 <__data_end+0x1>
     6b2:	01 96       	adiw	r24, 0x01	; 1
     6b4:	90 93 21 04 	sts	0x0421, r25	; 0x800421 <__data_end+0x1>
     6b8:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <__data_end>
     6bc:	80 91 20 04 	lds	r24, 0x0420	; 0x800420 <__data_end>
     6c0:	90 91 21 04 	lds	r25, 0x0421	; 0x800421 <__data_end+0x1>
     6c4:	80 3b       	cpi	r24, 0xB0	; 176
     6c6:	94 40       	sbci	r25, 0x04	; 4
     6c8:	5c f0       	brlt	.+22     	; 0x6e0 <__vector_14+0x46>
     6ca:	10 92 21 04 	sts	0x0421, r1	; 0x800421 <__data_end+0x1>
     6ce:	10 92 20 04 	sts	0x0420, r1	; 0x800420 <__data_end>
     6d2:	81 e0       	ldi	r24, 0x01	; 1
     6d4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <check_DHT11_flag>
     6d8:	95 b1       	in	r25, 0x05	; 5
     6da:	80 e2       	ldi	r24, 0x20	; 32
     6dc:	89 27       	eor	r24, r25
     6de:	85 b9       	out	0x05, r24	; 5
     6e0:	9f 91       	pop	r25
     6e2:	8f 91       	pop	r24
     6e4:	2f 91       	pop	r18
     6e6:	0f 90       	pop	r0
     6e8:	0f be       	out	0x3f, r0	; 63
     6ea:	0f 90       	pop	r0
     6ec:	1f 90       	pop	r1
     6ee:	18 95       	reti

000006f0 <Timer0_init>:
     6f0:	84 b5       	in	r24, 0x24	; 36
     6f2:	82 60       	ori	r24, 0x02	; 2
     6f4:	84 bd       	out	0x24, r24	; 36
     6f6:	85 b5       	in	r24, 0x25	; 37
     6f8:	83 60       	ori	r24, 0x03	; 3
     6fa:	85 bd       	out	0x25, r24	; 37
     6fc:	89 ef       	ldi	r24, 0xF9	; 249
     6fe:	87 bd       	out	0x27, r24	; 39
     700:	ee e6       	ldi	r30, 0x6E	; 110
     702:	f0 e0       	ldi	r31, 0x00	; 0
     704:	80 81       	ld	r24, Z
     706:	82 60       	ori	r24, 0x02	; 2
     708:	80 83       	st	Z, r24
     70a:	08 95       	ret

0000070c <Timer1_init_fast_PWM_outA>:
	
	return;
}

void Timer1_init_fast_PWM_outA(void){
	DDRB |= 1 << PORTB1 | 1 << PORTB2;
     70c:	84 b1       	in	r24, 0x04	; 4
     70e:	86 60       	ori	r24, 0x06	; 6
     710:	84 b9       	out	0x04, r24	; 4
	TCCR1A |= (1 << WGM11) | (1 << COM1A1) | (1 << COM1B1);
     712:	e0 e8       	ldi	r30, 0x80	; 128
     714:	f0 e0       	ldi	r31, 0x00	; 0
     716:	80 81       	ld	r24, Z
     718:	82 6a       	ori	r24, 0xA2	; 162
     71a:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM13) | (1 << WGM12)  | (1 << CS11);
     71c:	e1 e8       	ldi	r30, 0x81	; 129
     71e:	f0 e0       	ldi	r31, 0x00	; 0
     720:	80 81       	ld	r24, Z
     722:	8a 61       	ori	r24, 0x1A	; 26
     724:	80 83       	st	Z, r24
	
	OCR1A = 4900;
     726:	84 e2       	ldi	r24, 0x24	; 36
     728:	93 e1       	ldi	r25, 0x13	; 19
     72a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     72e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	OCR1B = 4900;
     732:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     736:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	ICR1 = 39999; 
     73a:	8f e3       	ldi	r24, 0x3F	; 63
     73c:	9c e9       	ldi	r25, 0x9C	; 156
     73e:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     742:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     746:	08 95       	ret

00000748 <Timer2_init_fast_PWM_outA_Motor>:
	
}
void Timer2_init_fast_PWM_outA_Motor(void){
	//DDRD |= 1 << DDD3; //DDD <- 레지스터의 비트 이름 //PORTDx랑 define 값이 같음
	DDRB |= 1 << DDD3;
     748:	23 9a       	sbi	0x04, 3	; 4
	DDRD |= 1 << DDD3;
     74a:	53 9a       	sbi	0x0a, 3	; 10
	
	TCCR2A |= (1 << COM2A1) | (1 << COM2B1) | (1 << WGM21) | (1 << WGM20);
     74c:	e0 eb       	ldi	r30, 0xB0	; 176
     74e:	f0 e0       	ldi	r31, 0x00	; 0
     750:	80 81       	ld	r24, Z
     752:	83 6a       	ori	r24, 0xA3	; 163
     754:	80 83       	st	Z, r24
	//TCCR2A |= (1 << COM2B1) | (1 << WGM21) | (1 << WGM20);
	//COM2B1 , COM2B0 : 11 이면 Set OC2B on Compare Match, clear OC2B at BOTTOM, (inverting mode).
	//->match가 되면 1로 되는것. ocr값을 작게 주면 high가 길다. 반대라서 헷갈리니까 10으로 준것
	TCCR2B |= (1 << CS20); //모터 구동 시에는 CS20
     756:	e1 eb       	ldi	r30, 0xB1	; 177
     758:	f0 e0       	ldi	r31, 0x00	; 0
     75a:	80 81       	ld	r24, Z
     75c:	81 60       	ori	r24, 0x01	; 1
     75e:	80 83       	st	Z, r24
	
	OCR2A = 0; //BOTTOM
     760:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	OCR2B = 0;
     764:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7e00b4>
     768:	08 95       	ret

0000076a <TX0_char>:
//한 문자 송신 TX
void TX0_char(char data) //ascii
{
	//상태 읽기 / UCSR0A
	//UDRE0 : USART 데이터 레지스터가 비어있으면 1로 set / initial value : 1 
	while(!(UCSR0A & (1 << UDRE0))); //0b00100000 //0이면 기다려서 1이 될때까지 (준비가 될 때까지)
     76a:	e0 ec       	ldi	r30, 0xC0	; 192
     76c:	f0 e0       	ldi	r31, 0x00	; 0
     76e:	90 81       	ld	r25, Z
     770:	95 ff       	sbrs	r25, 5
     772:	fd cf       	rjmp	.-6      	; 0x76e <TX0_char+0x4>
	
	UDR0 = data; //데이터 보낸 것
     774:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     778:	08 95       	ret

0000077a <__vector_18>:
	CR : \R 커서 맨 앞으로
	LF : \N 줄 바꿈
	=> ENTER
	터미널 프로그램마다 설정 다름
*/
ISR(USART_RX_vect) { /* USART Rx Complete */
     77a:	1f 92       	push	r1
     77c:	0f 92       	push	r0
     77e:	0f b6       	in	r0, 0x3f	; 63
     780:	0f 92       	push	r0
     782:	11 24       	eor	r1, r1
     784:	2f 93       	push	r18
     786:	8f 93       	push	r24
     788:	9f 93       	push	r25
     78a:	ef 93       	push	r30
     78c:	ff 93       	push	r31
	static char idx = 0, buf_idx = 0; //명령어 배열 index 제어 
	RX_data = UDR0;
     78e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     792:	80 93 24 04 	sts	0x0424, r24	; 0x800424 <RX_data>
	
	if(idx < BUFFER_MAX && RX_cmd_count <= COMMAND_MAX) {
     796:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <idx.2082>
     79a:	82 33       	cpi	r24, 0x32	; 50
     79c:	08 f0       	brcs	.+2      	; 0x7a0 <__vector_18+0x26>
     79e:	40 c0       	rjmp	.+128    	; 0x820 <__vector_18+0xa6>
     7a0:	90 91 19 06 	lds	r25, 0x0619	; 0x800619 <RX_cmd_count>
     7a4:	9b 30       	cpi	r25, 0x0B	; 11
     7a6:	e0 f5       	brcc	.+120    	; 0x820 <__vector_18+0xa6>
		if(RX_data == '\r' || RX_data == '\n') { //명령이 들어옴
     7a8:	90 91 24 04 	lds	r25, 0x0424	; 0x800424 <RX_data>
     7ac:	9d 30       	cpi	r25, 0x0D	; 13
     7ae:	21 f0       	breq	.+8      	; 0x7b8 <__vector_18+0x3e>
     7b0:	90 91 24 04 	lds	r25, 0x0424	; 0x800424 <RX_data>
     7b4:	9a 30       	cpi	r25, 0x0A	; 10
     7b6:	19 f5       	brne	.+70     	; 0x7fe <__vector_18+0x84>
			buffer[buf_idx][idx] = 0; //or '\0' //문자열의 마지막에 null 넣어주기
     7b8:	90 91 22 04 	lds	r25, 0x0422	; 0x800422 <buf_idx.2083>
     7bc:	22 e3       	ldi	r18, 0x32	; 50
     7be:	92 9f       	mul	r25, r18
     7c0:	f0 01       	movw	r30, r0
     7c2:	11 24       	eor	r1, r1
     7c4:	eb 5d       	subi	r30, 0xDB	; 219
     7c6:	fb 4f       	sbci	r31, 0xFB	; 251
     7c8:	e8 0f       	add	r30, r24
     7ca:	f1 1d       	adc	r31, r1
     7cc:	10 82       	st	Z, r1
			idx = 0; //다음 명령어를 받기위한 clear
     7ce:	10 92 23 04 	sts	0x0423, r1	; 0x800423 <idx.2082>
			RX_cmd_count++;
     7d2:	80 91 19 06 	lds	r24, 0x0619	; 0x800619 <RX_cmd_count>
     7d6:	8f 5f       	subi	r24, 0xFF	; 255
     7d8:	80 93 19 06 	sts	0x0619, r24	; 0x800619 <RX_cmd_count>
			
			buf_idx++;
			buf_idx = buf_idx % COMMAND_MAX;
     7dc:	9f 5f       	subi	r25, 0xFF	; 255
     7de:	8d ec       	ldi	r24, 0xCD	; 205
     7e0:	98 9f       	mul	r25, r24
     7e2:	81 2d       	mov	r24, r1
     7e4:	11 24       	eor	r1, r1
     7e6:	86 95       	lsr	r24
     7e8:	86 95       	lsr	r24
     7ea:	86 95       	lsr	r24
     7ec:	88 0f       	add	r24, r24
     7ee:	28 2f       	mov	r18, r24
     7f0:	22 0f       	add	r18, r18
     7f2:	22 0f       	add	r18, r18
     7f4:	82 0f       	add	r24, r18
     7f6:	98 1b       	sub	r25, r24
     7f8:	90 93 22 04 	sts	0x0422, r25	; 0x800422 <buf_idx.2083>
     7fc:	11 c0       	rjmp	.+34     	; 0x820 <__vector_18+0xa6>
		}
		else buffer[buf_idx][idx++] = RX_data;
     7fe:	e0 91 22 04 	lds	r30, 0x0422	; 0x800422 <buf_idx.2083>
     802:	91 e0       	ldi	r25, 0x01	; 1
     804:	98 0f       	add	r25, r24
     806:	90 93 23 04 	sts	0x0423, r25	; 0x800423 <idx.2082>
     80a:	90 91 24 04 	lds	r25, 0x0424	; 0x800424 <RX_data>
     80e:	22 e3       	ldi	r18, 0x32	; 50
     810:	e2 9f       	mul	r30, r18
     812:	f0 01       	movw	r30, r0
     814:	11 24       	eor	r1, r1
     816:	eb 5d       	subi	r30, 0xDB	; 219
     818:	fb 4f       	sbci	r31, 0xFB	; 251
     81a:	e8 0f       	add	r30, r24
     81c:	f1 1d       	adc	r31, r1
     81e:	90 83       	st	Z, r25
	}
	
	//TX0_char(RX_data);
	//RX_flag = 1;
}
     820:	ff 91       	pop	r31
     822:	ef 91       	pop	r30
     824:	9f 91       	pop	r25
     826:	8f 91       	pop	r24
     828:	2f 91       	pop	r18
     82a:	0f 90       	pop	r0
     82c:	0f be       	out	0x3f, r0	; 63
     82e:	0f 90       	pop	r0
     830:	1f 90       	pop	r1
     832:	18 95       	reti

00000834 <UART0_init>:
	
	return 0;
}

void UART0_init(unsigned long baud)
{
     834:	cf 92       	push	r12
     836:	df 92       	push	r13
     838:	ef 92       	push	r14
     83a:	ff 92       	push	r15
     83c:	6b 01       	movw	r12, r22
     83e:	7c 01       	movw	r14, r24
	char i;
	FILE* fpStdio = fdevopen(TX0_char, NULL);
     840:	60 e0       	ldi	r22, 0x00	; 0
     842:	70 e0       	ldi	r23, 0x00	; 0
     844:	85 eb       	ldi	r24, 0xB5	; 181
     846:	93 e0       	ldi	r25, 0x03	; 3
     848:	0e 94 8e 06 	call	0xd1c	; 0xd1c <fdevopen>
	
	UCSR0B |= ((1 << RXCIE0) | (1<< RXEN0) | (1<< TXEN0));	//송신, 수신 , 수신 인터럽트 활성화
     84c:	e1 ec       	ldi	r30, 0xC1	; 193
     84e:	f0 e0       	ldi	r31, 0x00	; 0
     850:	80 81       	ld	r24, Z
     852:	88 69       	ori	r24, 0x98	; 152
     854:	80 83       	st	Z, r24
	/*
		//0b10011000; //bit7 : Rx complete interrupt enable, bit 4 : receiver enable , bit 3 : transmitter enable
		//7~2 bit 제어 레지스터 , 0~1 bit 데이터 레지스터
		//UCSZ 0~2 : char size / 2 -> UCSR0B , 0,1 -> UCSR0C / ASCII 8bit /9bit 통신 UCSR0B의 0, 1bit 사용(알아서된당)
	*/
	UCSR0C |= ((1 << UCSZ01) | (1 << UCSZ00));				//8bit 통신
     856:	e2 ec       	ldi	r30, 0xC2	; 194
     858:	f0 e0       	ldi	r31, 0x00	; 0
     85a:	80 81       	ld	r24, Z
     85c:	86 60       	ori	r24, 0x06	; 6
     85e:	80 83       	st	Z, r24
	/*
		//UCSR0C
		//7,6bit 0 0 -> Asynchronous 
	*/
	UBRR0H = ((F_CPU/16/baud)-1) >> 8; //상위 8bit
     860:	60 e4       	ldi	r22, 0x40	; 64
     862:	72 e4       	ldi	r23, 0x42	; 66
     864:	8f e0       	ldi	r24, 0x0F	; 15
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a7 01       	movw	r20, r14
     86a:	96 01       	movw	r18, r12
     86c:	0e 94 63 06 	call	0xcc6	; 0xcc6 <__udivmodsi4>
     870:	da 01       	movw	r26, r20
     872:	c9 01       	movw	r24, r18
     874:	01 97       	sbiw	r24, 0x01	; 1
     876:	a1 09       	sbc	r26, r1
     878:	b1 09       	sbc	r27, r1
     87a:	89 2f       	mov	r24, r25
     87c:	9a 2f       	mov	r25, r26
     87e:	ab 2f       	mov	r26, r27
     880:	bb 27       	eor	r27, r27
     882:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L =  ((F_CPU/16/baud)-1) & 0xFF; //하위 8bit//0x00FF//0b0000000011111111 //상위 8bit는 자리가 없어서 &안해줘도 안들어감
     886:	21 50       	subi	r18, 0x01	; 1
     888:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	/*
		// 9600은 우리가 설정해준 속도
		//Asynchronous Normal mode(U2X0 = 0으로 설정했음)
		//UBRR0L(low), UBRR0H(high) : 보호 레이트 레지스터 , 송수신 속도 맞춰주는
	*/
	i = UDR0; //수신 버퍼 비우기 // 한번 읽으면 비워지기 때문에 읽어주는 것 
     88c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     890:	8f e9       	ldi	r24, 0x9F	; 159
     892:	9f e0       	ldi	r25, 0x0F	; 15
     894:	01 97       	sbiw	r24, 0x01	; 1
     896:	f1 f7       	brne	.-4      	; 0x894 <UART0_init+0x60>
     898:	00 c0       	rjmp	.+0      	; 0x89a <UART0_init+0x66>
     89a:	00 00       	nop
			//송신, 수신 레지스터 이름을 같이 쓰는데 컴파일러가 알아서 구분해줌
	
	_delay_ms(1); //약간의 딜레이
	
	return;
}
     89c:	ff 90       	pop	r15
     89e:	ef 90       	pop	r14
     8a0:	df 90       	pop	r13
     8a2:	cf 90       	pop	r12
     8a4:	08 95       	ret

000008a6 <__subsf3>:
     8a6:	50 58       	subi	r21, 0x80	; 128

000008a8 <__addsf3>:
     8a8:	bb 27       	eor	r27, r27
     8aa:	aa 27       	eor	r26, r26
     8ac:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <__addsf3x>
     8b0:	0c 94 bc 05 	jmp	0xb78	; 0xb78 <__fp_round>
     8b4:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__fp_pscA>
     8b8:	38 f0       	brcs	.+14     	; 0x8c8 <__addsf3+0x20>
     8ba:	0e 94 b5 05 	call	0xb6a	; 0xb6a <__fp_pscB>
     8be:	20 f0       	brcs	.+8      	; 0x8c8 <__addsf3+0x20>
     8c0:	39 f4       	brne	.+14     	; 0x8d0 <__addsf3+0x28>
     8c2:	9f 3f       	cpi	r25, 0xFF	; 255
     8c4:	19 f4       	brne	.+6      	; 0x8cc <__addsf3+0x24>
     8c6:	26 f4       	brtc	.+8      	; 0x8d0 <__addsf3+0x28>
     8c8:	0c 94 ab 05 	jmp	0xb56	; 0xb56 <__fp_nan>
     8cc:	0e f4       	brtc	.+2      	; 0x8d0 <__addsf3+0x28>
     8ce:	e0 95       	com	r30
     8d0:	e7 fb       	bst	r30, 7
     8d2:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__fp_inf>

000008d6 <__addsf3x>:
     8d6:	e9 2f       	mov	r30, r25
     8d8:	0e 94 cd 05 	call	0xb9a	; 0xb9a <__fp_split3>
     8dc:	58 f3       	brcs	.-42     	; 0x8b4 <__addsf3+0xc>
     8de:	ba 17       	cp	r27, r26
     8e0:	62 07       	cpc	r22, r18
     8e2:	73 07       	cpc	r23, r19
     8e4:	84 07       	cpc	r24, r20
     8e6:	95 07       	cpc	r25, r21
     8e8:	20 f0       	brcs	.+8      	; 0x8f2 <__addsf3x+0x1c>
     8ea:	79 f4       	brne	.+30     	; 0x90a <__stack+0xb>
     8ec:	a6 f5       	brtc	.+104    	; 0x956 <__stack+0x57>
     8ee:	0c 94 ef 05 	jmp	0xbde	; 0xbde <__fp_zero>
     8f2:	0e f4       	brtc	.+2      	; 0x8f6 <__addsf3x+0x20>
     8f4:	e0 95       	com	r30
     8f6:	0b 2e       	mov	r0, r27
     8f8:	ba 2f       	mov	r27, r26
     8fa:	a0 2d       	mov	r26, r0
     8fc:	0b 01       	movw	r0, r22
     8fe:	b9 01       	movw	r22, r18
     900:	90 01       	movw	r18, r0
     902:	0c 01       	movw	r0, r24
     904:	ca 01       	movw	r24, r20
     906:	a0 01       	movw	r20, r0
     908:	11 24       	eor	r1, r1
     90a:	ff 27       	eor	r31, r31
     90c:	59 1b       	sub	r21, r25
     90e:	99 f0       	breq	.+38     	; 0x936 <__stack+0x37>
     910:	59 3f       	cpi	r21, 0xF9	; 249
     912:	50 f4       	brcc	.+20     	; 0x928 <__stack+0x29>
     914:	50 3e       	cpi	r21, 0xE0	; 224
     916:	68 f1       	brcs	.+90     	; 0x972 <__stack+0x73>
     918:	1a 16       	cp	r1, r26
     91a:	f0 40       	sbci	r31, 0x00	; 0
     91c:	a2 2f       	mov	r26, r18
     91e:	23 2f       	mov	r18, r19
     920:	34 2f       	mov	r19, r20
     922:	44 27       	eor	r20, r20
     924:	58 5f       	subi	r21, 0xF8	; 248
     926:	f3 cf       	rjmp	.-26     	; 0x90e <__stack+0xf>
     928:	46 95       	lsr	r20
     92a:	37 95       	ror	r19
     92c:	27 95       	ror	r18
     92e:	a7 95       	ror	r26
     930:	f0 40       	sbci	r31, 0x00	; 0
     932:	53 95       	inc	r21
     934:	c9 f7       	brne	.-14     	; 0x928 <__stack+0x29>
     936:	7e f4       	brtc	.+30     	; 0x956 <__stack+0x57>
     938:	1f 16       	cp	r1, r31
     93a:	ba 0b       	sbc	r27, r26
     93c:	62 0b       	sbc	r22, r18
     93e:	73 0b       	sbc	r23, r19
     940:	84 0b       	sbc	r24, r20
     942:	ba f0       	brmi	.+46     	; 0x972 <__stack+0x73>
     944:	91 50       	subi	r25, 0x01	; 1
     946:	a1 f0       	breq	.+40     	; 0x970 <__stack+0x71>
     948:	ff 0f       	add	r31, r31
     94a:	bb 1f       	adc	r27, r27
     94c:	66 1f       	adc	r22, r22
     94e:	77 1f       	adc	r23, r23
     950:	88 1f       	adc	r24, r24
     952:	c2 f7       	brpl	.-16     	; 0x944 <__stack+0x45>
     954:	0e c0       	rjmp	.+28     	; 0x972 <__stack+0x73>
     956:	ba 0f       	add	r27, r26
     958:	62 1f       	adc	r22, r18
     95a:	73 1f       	adc	r23, r19
     95c:	84 1f       	adc	r24, r20
     95e:	48 f4       	brcc	.+18     	; 0x972 <__stack+0x73>
     960:	87 95       	ror	r24
     962:	77 95       	ror	r23
     964:	67 95       	ror	r22
     966:	b7 95       	ror	r27
     968:	f7 95       	ror	r31
     96a:	9e 3f       	cpi	r25, 0xFE	; 254
     96c:	08 f0       	brcs	.+2      	; 0x970 <__stack+0x71>
     96e:	b0 cf       	rjmp	.-160    	; 0x8d0 <__addsf3+0x28>
     970:	93 95       	inc	r25
     972:	88 0f       	add	r24, r24
     974:	08 f0       	brcs	.+2      	; 0x978 <__stack+0x79>
     976:	99 27       	eor	r25, r25
     978:	ee 0f       	add	r30, r30
     97a:	97 95       	ror	r25
     97c:	87 95       	ror	r24
     97e:	08 95       	ret

00000980 <__divsf3>:
     980:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__divsf3x>
     984:	0c 94 bc 05 	jmp	0xb78	; 0xb78 <__fp_round>
     988:	0e 94 b5 05 	call	0xb6a	; 0xb6a <__fp_pscB>
     98c:	58 f0       	brcs	.+22     	; 0x9a4 <__divsf3+0x24>
     98e:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__fp_pscA>
     992:	40 f0       	brcs	.+16     	; 0x9a4 <__divsf3+0x24>
     994:	29 f4       	brne	.+10     	; 0x9a0 <__divsf3+0x20>
     996:	5f 3f       	cpi	r21, 0xFF	; 255
     998:	29 f0       	breq	.+10     	; 0x9a4 <__divsf3+0x24>
     99a:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__fp_inf>
     99e:	51 11       	cpse	r21, r1
     9a0:	0c 94 f0 05 	jmp	0xbe0	; 0xbe0 <__fp_szero>
     9a4:	0c 94 ab 05 	jmp	0xb56	; 0xb56 <__fp_nan>

000009a8 <__divsf3x>:
     9a8:	0e 94 cd 05 	call	0xb9a	; 0xb9a <__fp_split3>
     9ac:	68 f3       	brcs	.-38     	; 0x988 <__divsf3+0x8>

000009ae <__divsf3_pse>:
     9ae:	99 23       	and	r25, r25
     9b0:	b1 f3       	breq	.-20     	; 0x99e <__divsf3+0x1e>
     9b2:	55 23       	and	r21, r21
     9b4:	91 f3       	breq	.-28     	; 0x99a <__divsf3+0x1a>
     9b6:	95 1b       	sub	r25, r21
     9b8:	55 0b       	sbc	r21, r21
     9ba:	bb 27       	eor	r27, r27
     9bc:	aa 27       	eor	r26, r26
     9be:	62 17       	cp	r22, r18
     9c0:	73 07       	cpc	r23, r19
     9c2:	84 07       	cpc	r24, r20
     9c4:	38 f0       	brcs	.+14     	; 0x9d4 <__divsf3_pse+0x26>
     9c6:	9f 5f       	subi	r25, 0xFF	; 255
     9c8:	5f 4f       	sbci	r21, 0xFF	; 255
     9ca:	22 0f       	add	r18, r18
     9cc:	33 1f       	adc	r19, r19
     9ce:	44 1f       	adc	r20, r20
     9d0:	aa 1f       	adc	r26, r26
     9d2:	a9 f3       	breq	.-22     	; 0x9be <__divsf3_pse+0x10>
     9d4:	35 d0       	rcall	.+106    	; 0xa40 <__divsf3_pse+0x92>
     9d6:	0e 2e       	mov	r0, r30
     9d8:	3a f0       	brmi	.+14     	; 0x9e8 <__divsf3_pse+0x3a>
     9da:	e0 e8       	ldi	r30, 0x80	; 128
     9dc:	32 d0       	rcall	.+100    	; 0xa42 <__divsf3_pse+0x94>
     9de:	91 50       	subi	r25, 0x01	; 1
     9e0:	50 40       	sbci	r21, 0x00	; 0
     9e2:	e6 95       	lsr	r30
     9e4:	00 1c       	adc	r0, r0
     9e6:	ca f7       	brpl	.-14     	; 0x9da <__divsf3_pse+0x2c>
     9e8:	2b d0       	rcall	.+86     	; 0xa40 <__divsf3_pse+0x92>
     9ea:	fe 2f       	mov	r31, r30
     9ec:	29 d0       	rcall	.+82     	; 0xa40 <__divsf3_pse+0x92>
     9ee:	66 0f       	add	r22, r22
     9f0:	77 1f       	adc	r23, r23
     9f2:	88 1f       	adc	r24, r24
     9f4:	bb 1f       	adc	r27, r27
     9f6:	26 17       	cp	r18, r22
     9f8:	37 07       	cpc	r19, r23
     9fa:	48 07       	cpc	r20, r24
     9fc:	ab 07       	cpc	r26, r27
     9fe:	b0 e8       	ldi	r27, 0x80	; 128
     a00:	09 f0       	breq	.+2      	; 0xa04 <__divsf3_pse+0x56>
     a02:	bb 0b       	sbc	r27, r27
     a04:	80 2d       	mov	r24, r0
     a06:	bf 01       	movw	r22, r30
     a08:	ff 27       	eor	r31, r31
     a0a:	93 58       	subi	r25, 0x83	; 131
     a0c:	5f 4f       	sbci	r21, 0xFF	; 255
     a0e:	3a f0       	brmi	.+14     	; 0xa1e <__divsf3_pse+0x70>
     a10:	9e 3f       	cpi	r25, 0xFE	; 254
     a12:	51 05       	cpc	r21, r1
     a14:	78 f0       	brcs	.+30     	; 0xa34 <__divsf3_pse+0x86>
     a16:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__fp_inf>
     a1a:	0c 94 f0 05 	jmp	0xbe0	; 0xbe0 <__fp_szero>
     a1e:	5f 3f       	cpi	r21, 0xFF	; 255
     a20:	e4 f3       	brlt	.-8      	; 0xa1a <__divsf3_pse+0x6c>
     a22:	98 3e       	cpi	r25, 0xE8	; 232
     a24:	d4 f3       	brlt	.-12     	; 0xa1a <__divsf3_pse+0x6c>
     a26:	86 95       	lsr	r24
     a28:	77 95       	ror	r23
     a2a:	67 95       	ror	r22
     a2c:	b7 95       	ror	r27
     a2e:	f7 95       	ror	r31
     a30:	9f 5f       	subi	r25, 0xFF	; 255
     a32:	c9 f7       	brne	.-14     	; 0xa26 <__divsf3_pse+0x78>
     a34:	88 0f       	add	r24, r24
     a36:	91 1d       	adc	r25, r1
     a38:	96 95       	lsr	r25
     a3a:	87 95       	ror	r24
     a3c:	97 f9       	bld	r25, 7
     a3e:	08 95       	ret
     a40:	e1 e0       	ldi	r30, 0x01	; 1
     a42:	66 0f       	add	r22, r22
     a44:	77 1f       	adc	r23, r23
     a46:	88 1f       	adc	r24, r24
     a48:	bb 1f       	adc	r27, r27
     a4a:	62 17       	cp	r22, r18
     a4c:	73 07       	cpc	r23, r19
     a4e:	84 07       	cpc	r24, r20
     a50:	ba 07       	cpc	r27, r26
     a52:	20 f0       	brcs	.+8      	; 0xa5c <__divsf3_pse+0xae>
     a54:	62 1b       	sub	r22, r18
     a56:	73 0b       	sbc	r23, r19
     a58:	84 0b       	sbc	r24, r20
     a5a:	ba 0b       	sbc	r27, r26
     a5c:	ee 1f       	adc	r30, r30
     a5e:	88 f7       	brcc	.-30     	; 0xa42 <__divsf3_pse+0x94>
     a60:	e0 95       	com	r30
     a62:	08 95       	ret

00000a64 <__fixsfsi>:
     a64:	0e 94 39 05 	call	0xa72	; 0xa72 <__fixunssfsi>
     a68:	68 94       	set
     a6a:	b1 11       	cpse	r27, r1
     a6c:	0c 94 f0 05 	jmp	0xbe0	; 0xbe0 <__fp_szero>
     a70:	08 95       	ret

00000a72 <__fixunssfsi>:
     a72:	0e 94 d5 05 	call	0xbaa	; 0xbaa <__fp_splitA>
     a76:	88 f0       	brcs	.+34     	; 0xa9a <__fixunssfsi+0x28>
     a78:	9f 57       	subi	r25, 0x7F	; 127
     a7a:	98 f0       	brcs	.+38     	; 0xaa2 <__fixunssfsi+0x30>
     a7c:	b9 2f       	mov	r27, r25
     a7e:	99 27       	eor	r25, r25
     a80:	b7 51       	subi	r27, 0x17	; 23
     a82:	b0 f0       	brcs	.+44     	; 0xab0 <__fixunssfsi+0x3e>
     a84:	e1 f0       	breq	.+56     	; 0xabe <__fixunssfsi+0x4c>
     a86:	66 0f       	add	r22, r22
     a88:	77 1f       	adc	r23, r23
     a8a:	88 1f       	adc	r24, r24
     a8c:	99 1f       	adc	r25, r25
     a8e:	1a f0       	brmi	.+6      	; 0xa96 <__fixunssfsi+0x24>
     a90:	ba 95       	dec	r27
     a92:	c9 f7       	brne	.-14     	; 0xa86 <__fixunssfsi+0x14>
     a94:	14 c0       	rjmp	.+40     	; 0xabe <__fixunssfsi+0x4c>
     a96:	b1 30       	cpi	r27, 0x01	; 1
     a98:	91 f0       	breq	.+36     	; 0xabe <__fixunssfsi+0x4c>
     a9a:	0e 94 ef 05 	call	0xbde	; 0xbde <__fp_zero>
     a9e:	b1 e0       	ldi	r27, 0x01	; 1
     aa0:	08 95       	ret
     aa2:	0c 94 ef 05 	jmp	0xbde	; 0xbde <__fp_zero>
     aa6:	67 2f       	mov	r22, r23
     aa8:	78 2f       	mov	r23, r24
     aaa:	88 27       	eor	r24, r24
     aac:	b8 5f       	subi	r27, 0xF8	; 248
     aae:	39 f0       	breq	.+14     	; 0xabe <__fixunssfsi+0x4c>
     ab0:	b9 3f       	cpi	r27, 0xF9	; 249
     ab2:	cc f3       	brlt	.-14     	; 0xaa6 <__fixunssfsi+0x34>
     ab4:	86 95       	lsr	r24
     ab6:	77 95       	ror	r23
     ab8:	67 95       	ror	r22
     aba:	b3 95       	inc	r27
     abc:	d9 f7       	brne	.-10     	; 0xab4 <__fixunssfsi+0x42>
     abe:	3e f4       	brtc	.+14     	; 0xace <__fixunssfsi+0x5c>
     ac0:	90 95       	com	r25
     ac2:	80 95       	com	r24
     ac4:	70 95       	com	r23
     ac6:	61 95       	neg	r22
     ac8:	7f 4f       	sbci	r23, 0xFF	; 255
     aca:	8f 4f       	sbci	r24, 0xFF	; 255
     acc:	9f 4f       	sbci	r25, 0xFF	; 255
     ace:	08 95       	ret

00000ad0 <__floatunsisf>:
     ad0:	e8 94       	clt
     ad2:	09 c0       	rjmp	.+18     	; 0xae6 <__floatsisf+0x12>

00000ad4 <__floatsisf>:
     ad4:	97 fb       	bst	r25, 7
     ad6:	3e f4       	brtc	.+14     	; 0xae6 <__floatsisf+0x12>
     ad8:	90 95       	com	r25
     ada:	80 95       	com	r24
     adc:	70 95       	com	r23
     ade:	61 95       	neg	r22
     ae0:	7f 4f       	sbci	r23, 0xFF	; 255
     ae2:	8f 4f       	sbci	r24, 0xFF	; 255
     ae4:	9f 4f       	sbci	r25, 0xFF	; 255
     ae6:	99 23       	and	r25, r25
     ae8:	a9 f0       	breq	.+42     	; 0xb14 <__floatsisf+0x40>
     aea:	f9 2f       	mov	r31, r25
     aec:	96 e9       	ldi	r25, 0x96	; 150
     aee:	bb 27       	eor	r27, r27
     af0:	93 95       	inc	r25
     af2:	f6 95       	lsr	r31
     af4:	87 95       	ror	r24
     af6:	77 95       	ror	r23
     af8:	67 95       	ror	r22
     afa:	b7 95       	ror	r27
     afc:	f1 11       	cpse	r31, r1
     afe:	f8 cf       	rjmp	.-16     	; 0xaf0 <__floatsisf+0x1c>
     b00:	fa f4       	brpl	.+62     	; 0xb40 <__floatsisf+0x6c>
     b02:	bb 0f       	add	r27, r27
     b04:	11 f4       	brne	.+4      	; 0xb0a <__floatsisf+0x36>
     b06:	60 ff       	sbrs	r22, 0
     b08:	1b c0       	rjmp	.+54     	; 0xb40 <__floatsisf+0x6c>
     b0a:	6f 5f       	subi	r22, 0xFF	; 255
     b0c:	7f 4f       	sbci	r23, 0xFF	; 255
     b0e:	8f 4f       	sbci	r24, 0xFF	; 255
     b10:	9f 4f       	sbci	r25, 0xFF	; 255
     b12:	16 c0       	rjmp	.+44     	; 0xb40 <__floatsisf+0x6c>
     b14:	88 23       	and	r24, r24
     b16:	11 f0       	breq	.+4      	; 0xb1c <__floatsisf+0x48>
     b18:	96 e9       	ldi	r25, 0x96	; 150
     b1a:	11 c0       	rjmp	.+34     	; 0xb3e <__floatsisf+0x6a>
     b1c:	77 23       	and	r23, r23
     b1e:	21 f0       	breq	.+8      	; 0xb28 <__floatsisf+0x54>
     b20:	9e e8       	ldi	r25, 0x8E	; 142
     b22:	87 2f       	mov	r24, r23
     b24:	76 2f       	mov	r23, r22
     b26:	05 c0       	rjmp	.+10     	; 0xb32 <__floatsisf+0x5e>
     b28:	66 23       	and	r22, r22
     b2a:	71 f0       	breq	.+28     	; 0xb48 <__floatsisf+0x74>
     b2c:	96 e8       	ldi	r25, 0x86	; 134
     b2e:	86 2f       	mov	r24, r22
     b30:	70 e0       	ldi	r23, 0x00	; 0
     b32:	60 e0       	ldi	r22, 0x00	; 0
     b34:	2a f0       	brmi	.+10     	; 0xb40 <__floatsisf+0x6c>
     b36:	9a 95       	dec	r25
     b38:	66 0f       	add	r22, r22
     b3a:	77 1f       	adc	r23, r23
     b3c:	88 1f       	adc	r24, r24
     b3e:	da f7       	brpl	.-10     	; 0xb36 <__floatsisf+0x62>
     b40:	88 0f       	add	r24, r24
     b42:	96 95       	lsr	r25
     b44:	87 95       	ror	r24
     b46:	97 f9       	bld	r25, 7
     b48:	08 95       	ret

00000b4a <__fp_inf>:
     b4a:	97 f9       	bld	r25, 7
     b4c:	9f 67       	ori	r25, 0x7F	; 127
     b4e:	80 e8       	ldi	r24, 0x80	; 128
     b50:	70 e0       	ldi	r23, 0x00	; 0
     b52:	60 e0       	ldi	r22, 0x00	; 0
     b54:	08 95       	ret

00000b56 <__fp_nan>:
     b56:	9f ef       	ldi	r25, 0xFF	; 255
     b58:	80 ec       	ldi	r24, 0xC0	; 192
     b5a:	08 95       	ret

00000b5c <__fp_pscA>:
     b5c:	00 24       	eor	r0, r0
     b5e:	0a 94       	dec	r0
     b60:	16 16       	cp	r1, r22
     b62:	17 06       	cpc	r1, r23
     b64:	18 06       	cpc	r1, r24
     b66:	09 06       	cpc	r0, r25
     b68:	08 95       	ret

00000b6a <__fp_pscB>:
     b6a:	00 24       	eor	r0, r0
     b6c:	0a 94       	dec	r0
     b6e:	12 16       	cp	r1, r18
     b70:	13 06       	cpc	r1, r19
     b72:	14 06       	cpc	r1, r20
     b74:	05 06       	cpc	r0, r21
     b76:	08 95       	ret

00000b78 <__fp_round>:
     b78:	09 2e       	mov	r0, r25
     b7a:	03 94       	inc	r0
     b7c:	00 0c       	add	r0, r0
     b7e:	11 f4       	brne	.+4      	; 0xb84 <__fp_round+0xc>
     b80:	88 23       	and	r24, r24
     b82:	52 f0       	brmi	.+20     	; 0xb98 <__fp_round+0x20>
     b84:	bb 0f       	add	r27, r27
     b86:	40 f4       	brcc	.+16     	; 0xb98 <__fp_round+0x20>
     b88:	bf 2b       	or	r27, r31
     b8a:	11 f4       	brne	.+4      	; 0xb90 <__fp_round+0x18>
     b8c:	60 ff       	sbrs	r22, 0
     b8e:	04 c0       	rjmp	.+8      	; 0xb98 <__fp_round+0x20>
     b90:	6f 5f       	subi	r22, 0xFF	; 255
     b92:	7f 4f       	sbci	r23, 0xFF	; 255
     b94:	8f 4f       	sbci	r24, 0xFF	; 255
     b96:	9f 4f       	sbci	r25, 0xFF	; 255
     b98:	08 95       	ret

00000b9a <__fp_split3>:
     b9a:	57 fd       	sbrc	r21, 7
     b9c:	90 58       	subi	r25, 0x80	; 128
     b9e:	44 0f       	add	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	59 f0       	breq	.+22     	; 0xbba <__fp_splitA+0x10>
     ba4:	5f 3f       	cpi	r21, 0xFF	; 255
     ba6:	71 f0       	breq	.+28     	; 0xbc4 <__fp_splitA+0x1a>
     ba8:	47 95       	ror	r20

00000baa <__fp_splitA>:
     baa:	88 0f       	add	r24, r24
     bac:	97 fb       	bst	r25, 7
     bae:	99 1f       	adc	r25, r25
     bb0:	61 f0       	breq	.+24     	; 0xbca <__fp_splitA+0x20>
     bb2:	9f 3f       	cpi	r25, 0xFF	; 255
     bb4:	79 f0       	breq	.+30     	; 0xbd4 <__fp_splitA+0x2a>
     bb6:	87 95       	ror	r24
     bb8:	08 95       	ret
     bba:	12 16       	cp	r1, r18
     bbc:	13 06       	cpc	r1, r19
     bbe:	14 06       	cpc	r1, r20
     bc0:	55 1f       	adc	r21, r21
     bc2:	f2 cf       	rjmp	.-28     	; 0xba8 <__fp_split3+0xe>
     bc4:	46 95       	lsr	r20
     bc6:	f1 df       	rcall	.-30     	; 0xbaa <__fp_splitA>
     bc8:	08 c0       	rjmp	.+16     	; 0xbda <__fp_splitA+0x30>
     bca:	16 16       	cp	r1, r22
     bcc:	17 06       	cpc	r1, r23
     bce:	18 06       	cpc	r1, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	f1 cf       	rjmp	.-30     	; 0xbb6 <__fp_splitA+0xc>
     bd4:	86 95       	lsr	r24
     bd6:	71 05       	cpc	r23, r1
     bd8:	61 05       	cpc	r22, r1
     bda:	08 94       	sec
     bdc:	08 95       	ret

00000bde <__fp_zero>:
     bde:	e8 94       	clt

00000be0 <__fp_szero>:
     be0:	bb 27       	eor	r27, r27
     be2:	66 27       	eor	r22, r22
     be4:	77 27       	eor	r23, r23
     be6:	cb 01       	movw	r24, r22
     be8:	97 f9       	bld	r25, 7
     bea:	08 95       	ret

00000bec <__mulsf3>:
     bec:	0e 94 09 06 	call	0xc12	; 0xc12 <__mulsf3x>
     bf0:	0c 94 bc 05 	jmp	0xb78	; 0xb78 <__fp_round>
     bf4:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__fp_pscA>
     bf8:	38 f0       	brcs	.+14     	; 0xc08 <__mulsf3+0x1c>
     bfa:	0e 94 b5 05 	call	0xb6a	; 0xb6a <__fp_pscB>
     bfe:	20 f0       	brcs	.+8      	; 0xc08 <__mulsf3+0x1c>
     c00:	95 23       	and	r25, r21
     c02:	11 f0       	breq	.+4      	; 0xc08 <__mulsf3+0x1c>
     c04:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__fp_inf>
     c08:	0c 94 ab 05 	jmp	0xb56	; 0xb56 <__fp_nan>
     c0c:	11 24       	eor	r1, r1
     c0e:	0c 94 f0 05 	jmp	0xbe0	; 0xbe0 <__fp_szero>

00000c12 <__mulsf3x>:
     c12:	0e 94 cd 05 	call	0xb9a	; 0xb9a <__fp_split3>
     c16:	70 f3       	brcs	.-36     	; 0xbf4 <__mulsf3+0x8>

00000c18 <__mulsf3_pse>:
     c18:	95 9f       	mul	r25, r21
     c1a:	c1 f3       	breq	.-16     	; 0xc0c <__mulsf3+0x20>
     c1c:	95 0f       	add	r25, r21
     c1e:	50 e0       	ldi	r21, 0x00	; 0
     c20:	55 1f       	adc	r21, r21
     c22:	62 9f       	mul	r22, r18
     c24:	f0 01       	movw	r30, r0
     c26:	72 9f       	mul	r23, r18
     c28:	bb 27       	eor	r27, r27
     c2a:	f0 0d       	add	r31, r0
     c2c:	b1 1d       	adc	r27, r1
     c2e:	63 9f       	mul	r22, r19
     c30:	aa 27       	eor	r26, r26
     c32:	f0 0d       	add	r31, r0
     c34:	b1 1d       	adc	r27, r1
     c36:	aa 1f       	adc	r26, r26
     c38:	64 9f       	mul	r22, r20
     c3a:	66 27       	eor	r22, r22
     c3c:	b0 0d       	add	r27, r0
     c3e:	a1 1d       	adc	r26, r1
     c40:	66 1f       	adc	r22, r22
     c42:	82 9f       	mul	r24, r18
     c44:	22 27       	eor	r18, r18
     c46:	b0 0d       	add	r27, r0
     c48:	a1 1d       	adc	r26, r1
     c4a:	62 1f       	adc	r22, r18
     c4c:	73 9f       	mul	r23, r19
     c4e:	b0 0d       	add	r27, r0
     c50:	a1 1d       	adc	r26, r1
     c52:	62 1f       	adc	r22, r18
     c54:	83 9f       	mul	r24, r19
     c56:	a0 0d       	add	r26, r0
     c58:	61 1d       	adc	r22, r1
     c5a:	22 1f       	adc	r18, r18
     c5c:	74 9f       	mul	r23, r20
     c5e:	33 27       	eor	r19, r19
     c60:	a0 0d       	add	r26, r0
     c62:	61 1d       	adc	r22, r1
     c64:	23 1f       	adc	r18, r19
     c66:	84 9f       	mul	r24, r20
     c68:	60 0d       	add	r22, r0
     c6a:	21 1d       	adc	r18, r1
     c6c:	82 2f       	mov	r24, r18
     c6e:	76 2f       	mov	r23, r22
     c70:	6a 2f       	mov	r22, r26
     c72:	11 24       	eor	r1, r1
     c74:	9f 57       	subi	r25, 0x7F	; 127
     c76:	50 40       	sbci	r21, 0x00	; 0
     c78:	9a f0       	brmi	.+38     	; 0xca0 <__mulsf3_pse+0x88>
     c7a:	f1 f0       	breq	.+60     	; 0xcb8 <__mulsf3_pse+0xa0>
     c7c:	88 23       	and	r24, r24
     c7e:	4a f0       	brmi	.+18     	; 0xc92 <__mulsf3_pse+0x7a>
     c80:	ee 0f       	add	r30, r30
     c82:	ff 1f       	adc	r31, r31
     c84:	bb 1f       	adc	r27, r27
     c86:	66 1f       	adc	r22, r22
     c88:	77 1f       	adc	r23, r23
     c8a:	88 1f       	adc	r24, r24
     c8c:	91 50       	subi	r25, 0x01	; 1
     c8e:	50 40       	sbci	r21, 0x00	; 0
     c90:	a9 f7       	brne	.-22     	; 0xc7c <__mulsf3_pse+0x64>
     c92:	9e 3f       	cpi	r25, 0xFE	; 254
     c94:	51 05       	cpc	r21, r1
     c96:	80 f0       	brcs	.+32     	; 0xcb8 <__mulsf3_pse+0xa0>
     c98:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <__fp_inf>
     c9c:	0c 94 f0 05 	jmp	0xbe0	; 0xbe0 <__fp_szero>
     ca0:	5f 3f       	cpi	r21, 0xFF	; 255
     ca2:	e4 f3       	brlt	.-8      	; 0xc9c <__mulsf3_pse+0x84>
     ca4:	98 3e       	cpi	r25, 0xE8	; 232
     ca6:	d4 f3       	brlt	.-12     	; 0xc9c <__mulsf3_pse+0x84>
     ca8:	86 95       	lsr	r24
     caa:	77 95       	ror	r23
     cac:	67 95       	ror	r22
     cae:	b7 95       	ror	r27
     cb0:	f7 95       	ror	r31
     cb2:	e7 95       	ror	r30
     cb4:	9f 5f       	subi	r25, 0xFF	; 255
     cb6:	c1 f7       	brne	.-16     	; 0xca8 <__mulsf3_pse+0x90>
     cb8:	fe 2b       	or	r31, r30
     cba:	88 0f       	add	r24, r24
     cbc:	91 1d       	adc	r25, r1
     cbe:	96 95       	lsr	r25
     cc0:	87 95       	ror	r24
     cc2:	97 f9       	bld	r25, 7
     cc4:	08 95       	ret

00000cc6 <__udivmodsi4>:
     cc6:	a1 e2       	ldi	r26, 0x21	; 33
     cc8:	1a 2e       	mov	r1, r26
     cca:	aa 1b       	sub	r26, r26
     ccc:	bb 1b       	sub	r27, r27
     cce:	fd 01       	movw	r30, r26
     cd0:	0d c0       	rjmp	.+26     	; 0xcec <__udivmodsi4_ep>

00000cd2 <__udivmodsi4_loop>:
     cd2:	aa 1f       	adc	r26, r26
     cd4:	bb 1f       	adc	r27, r27
     cd6:	ee 1f       	adc	r30, r30
     cd8:	ff 1f       	adc	r31, r31
     cda:	a2 17       	cp	r26, r18
     cdc:	b3 07       	cpc	r27, r19
     cde:	e4 07       	cpc	r30, r20
     ce0:	f5 07       	cpc	r31, r21
     ce2:	20 f0       	brcs	.+8      	; 0xcec <__udivmodsi4_ep>
     ce4:	a2 1b       	sub	r26, r18
     ce6:	b3 0b       	sbc	r27, r19
     ce8:	e4 0b       	sbc	r30, r20
     cea:	f5 0b       	sbc	r31, r21

00000cec <__udivmodsi4_ep>:
     cec:	66 1f       	adc	r22, r22
     cee:	77 1f       	adc	r23, r23
     cf0:	88 1f       	adc	r24, r24
     cf2:	99 1f       	adc	r25, r25
     cf4:	1a 94       	dec	r1
     cf6:	69 f7       	brne	.-38     	; 0xcd2 <__udivmodsi4_loop>
     cf8:	60 95       	com	r22
     cfa:	70 95       	com	r23
     cfc:	80 95       	com	r24
     cfe:	90 95       	com	r25
     d00:	9b 01       	movw	r18, r22
     d02:	ac 01       	movw	r20, r24
     d04:	bd 01       	movw	r22, r26
     d06:	cf 01       	movw	r24, r30
     d08:	08 95       	ret

00000d0a <strcmp>:
     d0a:	fb 01       	movw	r30, r22
     d0c:	dc 01       	movw	r26, r24
     d0e:	8d 91       	ld	r24, X+
     d10:	01 90       	ld	r0, Z+
     d12:	80 19       	sub	r24, r0
     d14:	01 10       	cpse	r0, r1
     d16:	d9 f3       	breq	.-10     	; 0xd0e <strcmp+0x4>
     d18:	99 0b       	sbc	r25, r25
     d1a:	08 95       	ret

00000d1c <fdevopen>:
     d1c:	0f 93       	push	r16
     d1e:	1f 93       	push	r17
     d20:	cf 93       	push	r28
     d22:	df 93       	push	r29
     d24:	00 97       	sbiw	r24, 0x00	; 0
     d26:	31 f4       	brne	.+12     	; 0xd34 <fdevopen+0x18>
     d28:	61 15       	cp	r22, r1
     d2a:	71 05       	cpc	r23, r1
     d2c:	19 f4       	brne	.+6      	; 0xd34 <fdevopen+0x18>
     d2e:	80 e0       	ldi	r24, 0x00	; 0
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	3a c0       	rjmp	.+116    	; 0xda8 <fdevopen+0x8c>
     d34:	8b 01       	movw	r16, r22
     d36:	ec 01       	movw	r28, r24
     d38:	6e e0       	ldi	r22, 0x0E	; 14
     d3a:	70 e0       	ldi	r23, 0x00	; 0
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	0e 94 00 09 	call	0x1200	; 0x1200 <calloc>
     d44:	fc 01       	movw	r30, r24
     d46:	89 2b       	or	r24, r25
     d48:	91 f3       	breq	.-28     	; 0xd2e <fdevopen+0x12>
     d4a:	80 e8       	ldi	r24, 0x80	; 128
     d4c:	83 83       	std	Z+3, r24	; 0x03
     d4e:	01 15       	cp	r16, r1
     d50:	11 05       	cpc	r17, r1
     d52:	71 f0       	breq	.+28     	; 0xd70 <fdevopen+0x54>
     d54:	13 87       	std	Z+11, r17	; 0x0b
     d56:	02 87       	std	Z+10, r16	; 0x0a
     d58:	81 e8       	ldi	r24, 0x81	; 129
     d5a:	83 83       	std	Z+3, r24	; 0x03
     d5c:	80 91 1b 06 	lds	r24, 0x061B	; 0x80061b <__iob>
     d60:	90 91 1c 06 	lds	r25, 0x061C	; 0x80061c <__iob+0x1>
     d64:	89 2b       	or	r24, r25
     d66:	21 f4       	brne	.+8      	; 0xd70 <fdevopen+0x54>
     d68:	f0 93 1c 06 	sts	0x061C, r31	; 0x80061c <__iob+0x1>
     d6c:	e0 93 1b 06 	sts	0x061B, r30	; 0x80061b <__iob>
     d70:	20 97       	sbiw	r28, 0x00	; 0
     d72:	c9 f0       	breq	.+50     	; 0xda6 <fdevopen+0x8a>
     d74:	d1 87       	std	Z+9, r29	; 0x09
     d76:	c0 87       	std	Z+8, r28	; 0x08
     d78:	83 81       	ldd	r24, Z+3	; 0x03
     d7a:	82 60       	ori	r24, 0x02	; 2
     d7c:	83 83       	std	Z+3, r24	; 0x03
     d7e:	80 91 1d 06 	lds	r24, 0x061D	; 0x80061d <__iob+0x2>
     d82:	90 91 1e 06 	lds	r25, 0x061E	; 0x80061e <__iob+0x3>
     d86:	89 2b       	or	r24, r25
     d88:	71 f4       	brne	.+28     	; 0xda6 <fdevopen+0x8a>
     d8a:	f0 93 1e 06 	sts	0x061E, r31	; 0x80061e <__iob+0x3>
     d8e:	e0 93 1d 06 	sts	0x061D, r30	; 0x80061d <__iob+0x2>
     d92:	80 91 1f 06 	lds	r24, 0x061F	; 0x80061f <__iob+0x4>
     d96:	90 91 20 06 	lds	r25, 0x0620	; 0x800620 <__iob+0x5>
     d9a:	89 2b       	or	r24, r25
     d9c:	21 f4       	brne	.+8      	; 0xda6 <fdevopen+0x8a>
     d9e:	f0 93 20 06 	sts	0x0620, r31	; 0x800620 <__iob+0x5>
     da2:	e0 93 1f 06 	sts	0x061F, r30	; 0x80061f <__iob+0x4>
     da6:	cf 01       	movw	r24, r30
     da8:	df 91       	pop	r29
     daa:	cf 91       	pop	r28
     dac:	1f 91       	pop	r17
     dae:	0f 91       	pop	r16
     db0:	08 95       	ret

00000db2 <printf>:
     db2:	a0 e0       	ldi	r26, 0x00	; 0
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	ef ed       	ldi	r30, 0xDF	; 223
     db8:	f6 e0       	ldi	r31, 0x06	; 6
     dba:	0c 94 04 0b 	jmp	0x1608	; 0x1608 <__prologue_saves__+0x20>
     dbe:	ae 01       	movw	r20, r28
     dc0:	4b 5f       	subi	r20, 0xFB	; 251
     dc2:	5f 4f       	sbci	r21, 0xFF	; 255
     dc4:	fa 01       	movw	r30, r20
     dc6:	61 91       	ld	r22, Z+
     dc8:	71 91       	ld	r23, Z+
     dca:	af 01       	movw	r20, r30
     dcc:	80 91 1d 06 	lds	r24, 0x061D	; 0x80061d <__iob+0x2>
     dd0:	90 91 1e 06 	lds	r25, 0x061E	; 0x80061e <__iob+0x3>
     dd4:	0e 94 1f 07 	call	0xe3e	; 0xe3e <vfprintf>
     dd8:	e2 e0       	ldi	r30, 0x02	; 2
     dda:	0c 94 20 0b 	jmp	0x1640	; 0x1640 <__epilogue_restores__+0x20>

00000dde <puts>:
     dde:	0f 93       	push	r16
     de0:	1f 93       	push	r17
     de2:	cf 93       	push	r28
     de4:	df 93       	push	r29
     de6:	e0 91 1d 06 	lds	r30, 0x061D	; 0x80061d <__iob+0x2>
     dea:	f0 91 1e 06 	lds	r31, 0x061E	; 0x80061e <__iob+0x3>
     dee:	23 81       	ldd	r18, Z+3	; 0x03
     df0:	21 ff       	sbrs	r18, 1
     df2:	1b c0       	rjmp	.+54     	; 0xe2a <puts+0x4c>
     df4:	8c 01       	movw	r16, r24
     df6:	d0 e0       	ldi	r29, 0x00	; 0
     df8:	c0 e0       	ldi	r28, 0x00	; 0
     dfa:	f8 01       	movw	r30, r16
     dfc:	81 91       	ld	r24, Z+
     dfe:	8f 01       	movw	r16, r30
     e00:	60 91 1d 06 	lds	r22, 0x061D	; 0x80061d <__iob+0x2>
     e04:	70 91 1e 06 	lds	r23, 0x061E	; 0x80061e <__iob+0x3>
     e08:	db 01       	movw	r26, r22
     e0a:	18 96       	adiw	r26, 0x08	; 8
     e0c:	ed 91       	ld	r30, X+
     e0e:	fc 91       	ld	r31, X
     e10:	19 97       	sbiw	r26, 0x09	; 9
     e12:	88 23       	and	r24, r24
     e14:	31 f0       	breq	.+12     	; 0xe22 <puts+0x44>
     e16:	09 95       	icall
     e18:	89 2b       	or	r24, r25
     e1a:	79 f3       	breq	.-34     	; 0xdfa <puts+0x1c>
     e1c:	df ef       	ldi	r29, 0xFF	; 255
     e1e:	cf ef       	ldi	r28, 0xFF	; 255
     e20:	ec cf       	rjmp	.-40     	; 0xdfa <puts+0x1c>
     e22:	8a e0       	ldi	r24, 0x0A	; 10
     e24:	09 95       	icall
     e26:	89 2b       	or	r24, r25
     e28:	19 f0       	breq	.+6      	; 0xe30 <puts+0x52>
     e2a:	8f ef       	ldi	r24, 0xFF	; 255
     e2c:	9f ef       	ldi	r25, 0xFF	; 255
     e2e:	02 c0       	rjmp	.+4      	; 0xe34 <puts+0x56>
     e30:	8d 2f       	mov	r24, r29
     e32:	9c 2f       	mov	r25, r28
     e34:	df 91       	pop	r29
     e36:	cf 91       	pop	r28
     e38:	1f 91       	pop	r17
     e3a:	0f 91       	pop	r16
     e3c:	08 95       	ret

00000e3e <vfprintf>:
     e3e:	ab e0       	ldi	r26, 0x0B	; 11
     e40:	b0 e0       	ldi	r27, 0x00	; 0
     e42:	e5 e2       	ldi	r30, 0x25	; 37
     e44:	f7 e0       	ldi	r31, 0x07	; 7
     e46:	0c 94 f4 0a 	jmp	0x15e8	; 0x15e8 <__prologue_saves__>
     e4a:	6c 01       	movw	r12, r24
     e4c:	7b 01       	movw	r14, r22
     e4e:	8a 01       	movw	r16, r20
     e50:	fc 01       	movw	r30, r24
     e52:	17 82       	std	Z+7, r1	; 0x07
     e54:	16 82       	std	Z+6, r1	; 0x06
     e56:	83 81       	ldd	r24, Z+3	; 0x03
     e58:	81 ff       	sbrs	r24, 1
     e5a:	cc c1       	rjmp	.+920    	; 0x11f4 <vfprintf+0x3b6>
     e5c:	ce 01       	movw	r24, r28
     e5e:	01 96       	adiw	r24, 0x01	; 1
     e60:	3c 01       	movw	r6, r24
     e62:	f6 01       	movw	r30, r12
     e64:	93 81       	ldd	r25, Z+3	; 0x03
     e66:	f7 01       	movw	r30, r14
     e68:	93 fd       	sbrc	r25, 3
     e6a:	85 91       	lpm	r24, Z+
     e6c:	93 ff       	sbrs	r25, 3
     e6e:	81 91       	ld	r24, Z+
     e70:	7f 01       	movw	r14, r30
     e72:	88 23       	and	r24, r24
     e74:	09 f4       	brne	.+2      	; 0xe78 <vfprintf+0x3a>
     e76:	ba c1       	rjmp	.+884    	; 0x11ec <vfprintf+0x3ae>
     e78:	85 32       	cpi	r24, 0x25	; 37
     e7a:	39 f4       	brne	.+14     	; 0xe8a <vfprintf+0x4c>
     e7c:	93 fd       	sbrc	r25, 3
     e7e:	85 91       	lpm	r24, Z+
     e80:	93 ff       	sbrs	r25, 3
     e82:	81 91       	ld	r24, Z+
     e84:	7f 01       	movw	r14, r30
     e86:	85 32       	cpi	r24, 0x25	; 37
     e88:	29 f4       	brne	.+10     	; 0xe94 <vfprintf+0x56>
     e8a:	b6 01       	movw	r22, r12
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <fputc>
     e92:	e7 cf       	rjmp	.-50     	; 0xe62 <vfprintf+0x24>
     e94:	91 2c       	mov	r9, r1
     e96:	21 2c       	mov	r2, r1
     e98:	31 2c       	mov	r3, r1
     e9a:	ff e1       	ldi	r31, 0x1F	; 31
     e9c:	f3 15       	cp	r31, r3
     e9e:	d8 f0       	brcs	.+54     	; 0xed6 <vfprintf+0x98>
     ea0:	8b 32       	cpi	r24, 0x2B	; 43
     ea2:	79 f0       	breq	.+30     	; 0xec2 <vfprintf+0x84>
     ea4:	38 f4       	brcc	.+14     	; 0xeb4 <vfprintf+0x76>
     ea6:	80 32       	cpi	r24, 0x20	; 32
     ea8:	79 f0       	breq	.+30     	; 0xec8 <vfprintf+0x8a>
     eaa:	83 32       	cpi	r24, 0x23	; 35
     eac:	a1 f4       	brne	.+40     	; 0xed6 <vfprintf+0x98>
     eae:	23 2d       	mov	r18, r3
     eb0:	20 61       	ori	r18, 0x10	; 16
     eb2:	1d c0       	rjmp	.+58     	; 0xeee <vfprintf+0xb0>
     eb4:	8d 32       	cpi	r24, 0x2D	; 45
     eb6:	61 f0       	breq	.+24     	; 0xed0 <vfprintf+0x92>
     eb8:	80 33       	cpi	r24, 0x30	; 48
     eba:	69 f4       	brne	.+26     	; 0xed6 <vfprintf+0x98>
     ebc:	23 2d       	mov	r18, r3
     ebe:	21 60       	ori	r18, 0x01	; 1
     ec0:	16 c0       	rjmp	.+44     	; 0xeee <vfprintf+0xb0>
     ec2:	83 2d       	mov	r24, r3
     ec4:	82 60       	ori	r24, 0x02	; 2
     ec6:	38 2e       	mov	r3, r24
     ec8:	e3 2d       	mov	r30, r3
     eca:	e4 60       	ori	r30, 0x04	; 4
     ecc:	3e 2e       	mov	r3, r30
     ece:	2a c0       	rjmp	.+84     	; 0xf24 <vfprintf+0xe6>
     ed0:	f3 2d       	mov	r31, r3
     ed2:	f8 60       	ori	r31, 0x08	; 8
     ed4:	1d c0       	rjmp	.+58     	; 0xf10 <vfprintf+0xd2>
     ed6:	37 fc       	sbrc	r3, 7
     ed8:	2d c0       	rjmp	.+90     	; 0xf34 <vfprintf+0xf6>
     eda:	20 ed       	ldi	r18, 0xD0	; 208
     edc:	28 0f       	add	r18, r24
     ede:	2a 30       	cpi	r18, 0x0A	; 10
     ee0:	40 f0       	brcs	.+16     	; 0xef2 <vfprintf+0xb4>
     ee2:	8e 32       	cpi	r24, 0x2E	; 46
     ee4:	b9 f4       	brne	.+46     	; 0xf14 <vfprintf+0xd6>
     ee6:	36 fc       	sbrc	r3, 6
     ee8:	81 c1       	rjmp	.+770    	; 0x11ec <vfprintf+0x3ae>
     eea:	23 2d       	mov	r18, r3
     eec:	20 64       	ori	r18, 0x40	; 64
     eee:	32 2e       	mov	r3, r18
     ef0:	19 c0       	rjmp	.+50     	; 0xf24 <vfprintf+0xe6>
     ef2:	36 fe       	sbrs	r3, 6
     ef4:	06 c0       	rjmp	.+12     	; 0xf02 <vfprintf+0xc4>
     ef6:	8a e0       	ldi	r24, 0x0A	; 10
     ef8:	98 9e       	mul	r9, r24
     efa:	20 0d       	add	r18, r0
     efc:	11 24       	eor	r1, r1
     efe:	92 2e       	mov	r9, r18
     f00:	11 c0       	rjmp	.+34     	; 0xf24 <vfprintf+0xe6>
     f02:	ea e0       	ldi	r30, 0x0A	; 10
     f04:	2e 9e       	mul	r2, r30
     f06:	20 0d       	add	r18, r0
     f08:	11 24       	eor	r1, r1
     f0a:	22 2e       	mov	r2, r18
     f0c:	f3 2d       	mov	r31, r3
     f0e:	f0 62       	ori	r31, 0x20	; 32
     f10:	3f 2e       	mov	r3, r31
     f12:	08 c0       	rjmp	.+16     	; 0xf24 <vfprintf+0xe6>
     f14:	8c 36       	cpi	r24, 0x6C	; 108
     f16:	21 f4       	brne	.+8      	; 0xf20 <vfprintf+0xe2>
     f18:	83 2d       	mov	r24, r3
     f1a:	80 68       	ori	r24, 0x80	; 128
     f1c:	38 2e       	mov	r3, r24
     f1e:	02 c0       	rjmp	.+4      	; 0xf24 <vfprintf+0xe6>
     f20:	88 36       	cpi	r24, 0x68	; 104
     f22:	41 f4       	brne	.+16     	; 0xf34 <vfprintf+0xf6>
     f24:	f7 01       	movw	r30, r14
     f26:	93 fd       	sbrc	r25, 3
     f28:	85 91       	lpm	r24, Z+
     f2a:	93 ff       	sbrs	r25, 3
     f2c:	81 91       	ld	r24, Z+
     f2e:	7f 01       	movw	r14, r30
     f30:	81 11       	cpse	r24, r1
     f32:	b3 cf       	rjmp	.-154    	; 0xe9a <vfprintf+0x5c>
     f34:	98 2f       	mov	r25, r24
     f36:	9f 7d       	andi	r25, 0xDF	; 223
     f38:	95 54       	subi	r25, 0x45	; 69
     f3a:	93 30       	cpi	r25, 0x03	; 3
     f3c:	28 f4       	brcc	.+10     	; 0xf48 <vfprintf+0x10a>
     f3e:	0c 5f       	subi	r16, 0xFC	; 252
     f40:	1f 4f       	sbci	r17, 0xFF	; 255
     f42:	9f e3       	ldi	r25, 0x3F	; 63
     f44:	99 83       	std	Y+1, r25	; 0x01
     f46:	0d c0       	rjmp	.+26     	; 0xf62 <vfprintf+0x124>
     f48:	83 36       	cpi	r24, 0x63	; 99
     f4a:	31 f0       	breq	.+12     	; 0xf58 <vfprintf+0x11a>
     f4c:	83 37       	cpi	r24, 0x73	; 115
     f4e:	71 f0       	breq	.+28     	; 0xf6c <vfprintf+0x12e>
     f50:	83 35       	cpi	r24, 0x53	; 83
     f52:	09 f0       	breq	.+2      	; 0xf56 <vfprintf+0x118>
     f54:	59 c0       	rjmp	.+178    	; 0x1008 <vfprintf+0x1ca>
     f56:	21 c0       	rjmp	.+66     	; 0xf9a <vfprintf+0x15c>
     f58:	f8 01       	movw	r30, r16
     f5a:	80 81       	ld	r24, Z
     f5c:	89 83       	std	Y+1, r24	; 0x01
     f5e:	0e 5f       	subi	r16, 0xFE	; 254
     f60:	1f 4f       	sbci	r17, 0xFF	; 255
     f62:	88 24       	eor	r8, r8
     f64:	83 94       	inc	r8
     f66:	91 2c       	mov	r9, r1
     f68:	53 01       	movw	r10, r6
     f6a:	13 c0       	rjmp	.+38     	; 0xf92 <vfprintf+0x154>
     f6c:	28 01       	movw	r4, r16
     f6e:	f2 e0       	ldi	r31, 0x02	; 2
     f70:	4f 0e       	add	r4, r31
     f72:	51 1c       	adc	r5, r1
     f74:	f8 01       	movw	r30, r16
     f76:	a0 80       	ld	r10, Z
     f78:	b1 80       	ldd	r11, Z+1	; 0x01
     f7a:	36 fe       	sbrs	r3, 6
     f7c:	03 c0       	rjmp	.+6      	; 0xf84 <vfprintf+0x146>
     f7e:	69 2d       	mov	r22, r9
     f80:	70 e0       	ldi	r23, 0x00	; 0
     f82:	02 c0       	rjmp	.+4      	; 0xf88 <vfprintf+0x14a>
     f84:	6f ef       	ldi	r22, 0xFF	; 255
     f86:	7f ef       	ldi	r23, 0xFF	; 255
     f88:	c5 01       	movw	r24, r10
     f8a:	0e 94 4f 0a 	call	0x149e	; 0x149e <strnlen>
     f8e:	4c 01       	movw	r8, r24
     f90:	82 01       	movw	r16, r4
     f92:	f3 2d       	mov	r31, r3
     f94:	ff 77       	andi	r31, 0x7F	; 127
     f96:	3f 2e       	mov	r3, r31
     f98:	16 c0       	rjmp	.+44     	; 0xfc6 <vfprintf+0x188>
     f9a:	28 01       	movw	r4, r16
     f9c:	22 e0       	ldi	r18, 0x02	; 2
     f9e:	42 0e       	add	r4, r18
     fa0:	51 1c       	adc	r5, r1
     fa2:	f8 01       	movw	r30, r16
     fa4:	a0 80       	ld	r10, Z
     fa6:	b1 80       	ldd	r11, Z+1	; 0x01
     fa8:	36 fe       	sbrs	r3, 6
     faa:	03 c0       	rjmp	.+6      	; 0xfb2 <vfprintf+0x174>
     fac:	69 2d       	mov	r22, r9
     fae:	70 e0       	ldi	r23, 0x00	; 0
     fb0:	02 c0       	rjmp	.+4      	; 0xfb6 <vfprintf+0x178>
     fb2:	6f ef       	ldi	r22, 0xFF	; 255
     fb4:	7f ef       	ldi	r23, 0xFF	; 255
     fb6:	c5 01       	movw	r24, r10
     fb8:	0e 94 3d 0a 	call	0x147a	; 0x147a <strnlen_P>
     fbc:	4c 01       	movw	r8, r24
     fbe:	f3 2d       	mov	r31, r3
     fc0:	f0 68       	ori	r31, 0x80	; 128
     fc2:	3f 2e       	mov	r3, r31
     fc4:	82 01       	movw	r16, r4
     fc6:	33 fc       	sbrc	r3, 3
     fc8:	1b c0       	rjmp	.+54     	; 0x1000 <vfprintf+0x1c2>
     fca:	82 2d       	mov	r24, r2
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	88 16       	cp	r8, r24
     fd0:	99 06       	cpc	r9, r25
     fd2:	b0 f4       	brcc	.+44     	; 0x1000 <vfprintf+0x1c2>
     fd4:	b6 01       	movw	r22, r12
     fd6:	80 e2       	ldi	r24, 0x20	; 32
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <fputc>
     fde:	2a 94       	dec	r2
     fe0:	f4 cf       	rjmp	.-24     	; 0xfca <vfprintf+0x18c>
     fe2:	f5 01       	movw	r30, r10
     fe4:	37 fc       	sbrc	r3, 7
     fe6:	85 91       	lpm	r24, Z+
     fe8:	37 fe       	sbrs	r3, 7
     fea:	81 91       	ld	r24, Z+
     fec:	5f 01       	movw	r10, r30
     fee:	b6 01       	movw	r22, r12
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <fputc>
     ff6:	21 10       	cpse	r2, r1
     ff8:	2a 94       	dec	r2
     ffa:	21 e0       	ldi	r18, 0x01	; 1
     ffc:	82 1a       	sub	r8, r18
     ffe:	91 08       	sbc	r9, r1
    1000:	81 14       	cp	r8, r1
    1002:	91 04       	cpc	r9, r1
    1004:	71 f7       	brne	.-36     	; 0xfe2 <vfprintf+0x1a4>
    1006:	e8 c0       	rjmp	.+464    	; 0x11d8 <vfprintf+0x39a>
    1008:	84 36       	cpi	r24, 0x64	; 100
    100a:	11 f0       	breq	.+4      	; 0x1010 <vfprintf+0x1d2>
    100c:	89 36       	cpi	r24, 0x69	; 105
    100e:	41 f5       	brne	.+80     	; 0x1060 <vfprintf+0x222>
    1010:	f8 01       	movw	r30, r16
    1012:	37 fe       	sbrs	r3, 7
    1014:	07 c0       	rjmp	.+14     	; 0x1024 <vfprintf+0x1e6>
    1016:	60 81       	ld	r22, Z
    1018:	71 81       	ldd	r23, Z+1	; 0x01
    101a:	82 81       	ldd	r24, Z+2	; 0x02
    101c:	93 81       	ldd	r25, Z+3	; 0x03
    101e:	0c 5f       	subi	r16, 0xFC	; 252
    1020:	1f 4f       	sbci	r17, 0xFF	; 255
    1022:	08 c0       	rjmp	.+16     	; 0x1034 <vfprintf+0x1f6>
    1024:	60 81       	ld	r22, Z
    1026:	71 81       	ldd	r23, Z+1	; 0x01
    1028:	07 2e       	mov	r0, r23
    102a:	00 0c       	add	r0, r0
    102c:	88 0b       	sbc	r24, r24
    102e:	99 0b       	sbc	r25, r25
    1030:	0e 5f       	subi	r16, 0xFE	; 254
    1032:	1f 4f       	sbci	r17, 0xFF	; 255
    1034:	f3 2d       	mov	r31, r3
    1036:	ff 76       	andi	r31, 0x6F	; 111
    1038:	3f 2e       	mov	r3, r31
    103a:	97 ff       	sbrs	r25, 7
    103c:	09 c0       	rjmp	.+18     	; 0x1050 <vfprintf+0x212>
    103e:	90 95       	com	r25
    1040:	80 95       	com	r24
    1042:	70 95       	com	r23
    1044:	61 95       	neg	r22
    1046:	7f 4f       	sbci	r23, 0xFF	; 255
    1048:	8f 4f       	sbci	r24, 0xFF	; 255
    104a:	9f 4f       	sbci	r25, 0xFF	; 255
    104c:	f0 68       	ori	r31, 0x80	; 128
    104e:	3f 2e       	mov	r3, r31
    1050:	2a e0       	ldi	r18, 0x0A	; 10
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	a3 01       	movw	r20, r6
    1056:	0e 94 96 0a 	call	0x152c	; 0x152c <__ultoa_invert>
    105a:	88 2e       	mov	r8, r24
    105c:	86 18       	sub	r8, r6
    105e:	45 c0       	rjmp	.+138    	; 0x10ea <vfprintf+0x2ac>
    1060:	85 37       	cpi	r24, 0x75	; 117
    1062:	31 f4       	brne	.+12     	; 0x1070 <vfprintf+0x232>
    1064:	23 2d       	mov	r18, r3
    1066:	2f 7e       	andi	r18, 0xEF	; 239
    1068:	b2 2e       	mov	r11, r18
    106a:	2a e0       	ldi	r18, 0x0A	; 10
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	25 c0       	rjmp	.+74     	; 0x10ba <vfprintf+0x27c>
    1070:	93 2d       	mov	r25, r3
    1072:	99 7f       	andi	r25, 0xF9	; 249
    1074:	b9 2e       	mov	r11, r25
    1076:	8f 36       	cpi	r24, 0x6F	; 111
    1078:	c1 f0       	breq	.+48     	; 0x10aa <vfprintf+0x26c>
    107a:	18 f4       	brcc	.+6      	; 0x1082 <vfprintf+0x244>
    107c:	88 35       	cpi	r24, 0x58	; 88
    107e:	79 f0       	breq	.+30     	; 0x109e <vfprintf+0x260>
    1080:	b5 c0       	rjmp	.+362    	; 0x11ec <vfprintf+0x3ae>
    1082:	80 37       	cpi	r24, 0x70	; 112
    1084:	19 f0       	breq	.+6      	; 0x108c <vfprintf+0x24e>
    1086:	88 37       	cpi	r24, 0x78	; 120
    1088:	21 f0       	breq	.+8      	; 0x1092 <vfprintf+0x254>
    108a:	b0 c0       	rjmp	.+352    	; 0x11ec <vfprintf+0x3ae>
    108c:	e9 2f       	mov	r30, r25
    108e:	e0 61       	ori	r30, 0x10	; 16
    1090:	be 2e       	mov	r11, r30
    1092:	b4 fe       	sbrs	r11, 4
    1094:	0d c0       	rjmp	.+26     	; 0x10b0 <vfprintf+0x272>
    1096:	fb 2d       	mov	r31, r11
    1098:	f4 60       	ori	r31, 0x04	; 4
    109a:	bf 2e       	mov	r11, r31
    109c:	09 c0       	rjmp	.+18     	; 0x10b0 <vfprintf+0x272>
    109e:	34 fe       	sbrs	r3, 4
    10a0:	0a c0       	rjmp	.+20     	; 0x10b6 <vfprintf+0x278>
    10a2:	29 2f       	mov	r18, r25
    10a4:	26 60       	ori	r18, 0x06	; 6
    10a6:	b2 2e       	mov	r11, r18
    10a8:	06 c0       	rjmp	.+12     	; 0x10b6 <vfprintf+0x278>
    10aa:	28 e0       	ldi	r18, 0x08	; 8
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	05 c0       	rjmp	.+10     	; 0x10ba <vfprintf+0x27c>
    10b0:	20 e1       	ldi	r18, 0x10	; 16
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	02 c0       	rjmp	.+4      	; 0x10ba <vfprintf+0x27c>
    10b6:	20 e1       	ldi	r18, 0x10	; 16
    10b8:	32 e0       	ldi	r19, 0x02	; 2
    10ba:	f8 01       	movw	r30, r16
    10bc:	b7 fe       	sbrs	r11, 7
    10be:	07 c0       	rjmp	.+14     	; 0x10ce <vfprintf+0x290>
    10c0:	60 81       	ld	r22, Z
    10c2:	71 81       	ldd	r23, Z+1	; 0x01
    10c4:	82 81       	ldd	r24, Z+2	; 0x02
    10c6:	93 81       	ldd	r25, Z+3	; 0x03
    10c8:	0c 5f       	subi	r16, 0xFC	; 252
    10ca:	1f 4f       	sbci	r17, 0xFF	; 255
    10cc:	06 c0       	rjmp	.+12     	; 0x10da <vfprintf+0x29c>
    10ce:	60 81       	ld	r22, Z
    10d0:	71 81       	ldd	r23, Z+1	; 0x01
    10d2:	80 e0       	ldi	r24, 0x00	; 0
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	0e 5f       	subi	r16, 0xFE	; 254
    10d8:	1f 4f       	sbci	r17, 0xFF	; 255
    10da:	a3 01       	movw	r20, r6
    10dc:	0e 94 96 0a 	call	0x152c	; 0x152c <__ultoa_invert>
    10e0:	88 2e       	mov	r8, r24
    10e2:	86 18       	sub	r8, r6
    10e4:	fb 2d       	mov	r31, r11
    10e6:	ff 77       	andi	r31, 0x7F	; 127
    10e8:	3f 2e       	mov	r3, r31
    10ea:	36 fe       	sbrs	r3, 6
    10ec:	0d c0       	rjmp	.+26     	; 0x1108 <vfprintf+0x2ca>
    10ee:	23 2d       	mov	r18, r3
    10f0:	2e 7f       	andi	r18, 0xFE	; 254
    10f2:	a2 2e       	mov	r10, r18
    10f4:	89 14       	cp	r8, r9
    10f6:	58 f4       	brcc	.+22     	; 0x110e <vfprintf+0x2d0>
    10f8:	34 fe       	sbrs	r3, 4
    10fa:	0b c0       	rjmp	.+22     	; 0x1112 <vfprintf+0x2d4>
    10fc:	32 fc       	sbrc	r3, 2
    10fe:	09 c0       	rjmp	.+18     	; 0x1112 <vfprintf+0x2d4>
    1100:	83 2d       	mov	r24, r3
    1102:	8e 7e       	andi	r24, 0xEE	; 238
    1104:	a8 2e       	mov	r10, r24
    1106:	05 c0       	rjmp	.+10     	; 0x1112 <vfprintf+0x2d4>
    1108:	b8 2c       	mov	r11, r8
    110a:	a3 2c       	mov	r10, r3
    110c:	03 c0       	rjmp	.+6      	; 0x1114 <vfprintf+0x2d6>
    110e:	b8 2c       	mov	r11, r8
    1110:	01 c0       	rjmp	.+2      	; 0x1114 <vfprintf+0x2d6>
    1112:	b9 2c       	mov	r11, r9
    1114:	a4 fe       	sbrs	r10, 4
    1116:	0f c0       	rjmp	.+30     	; 0x1136 <vfprintf+0x2f8>
    1118:	fe 01       	movw	r30, r28
    111a:	e8 0d       	add	r30, r8
    111c:	f1 1d       	adc	r31, r1
    111e:	80 81       	ld	r24, Z
    1120:	80 33       	cpi	r24, 0x30	; 48
    1122:	21 f4       	brne	.+8      	; 0x112c <vfprintf+0x2ee>
    1124:	9a 2d       	mov	r25, r10
    1126:	99 7e       	andi	r25, 0xE9	; 233
    1128:	a9 2e       	mov	r10, r25
    112a:	09 c0       	rjmp	.+18     	; 0x113e <vfprintf+0x300>
    112c:	a2 fe       	sbrs	r10, 2
    112e:	06 c0       	rjmp	.+12     	; 0x113c <vfprintf+0x2fe>
    1130:	b3 94       	inc	r11
    1132:	b3 94       	inc	r11
    1134:	04 c0       	rjmp	.+8      	; 0x113e <vfprintf+0x300>
    1136:	8a 2d       	mov	r24, r10
    1138:	86 78       	andi	r24, 0x86	; 134
    113a:	09 f0       	breq	.+2      	; 0x113e <vfprintf+0x300>
    113c:	b3 94       	inc	r11
    113e:	a3 fc       	sbrc	r10, 3
    1140:	11 c0       	rjmp	.+34     	; 0x1164 <vfprintf+0x326>
    1142:	a0 fe       	sbrs	r10, 0
    1144:	06 c0       	rjmp	.+12     	; 0x1152 <vfprintf+0x314>
    1146:	b2 14       	cp	r11, r2
    1148:	88 f4       	brcc	.+34     	; 0x116c <vfprintf+0x32e>
    114a:	28 0c       	add	r2, r8
    114c:	92 2c       	mov	r9, r2
    114e:	9b 18       	sub	r9, r11
    1150:	0e c0       	rjmp	.+28     	; 0x116e <vfprintf+0x330>
    1152:	b2 14       	cp	r11, r2
    1154:	60 f4       	brcc	.+24     	; 0x116e <vfprintf+0x330>
    1156:	b6 01       	movw	r22, r12
    1158:	80 e2       	ldi	r24, 0x20	; 32
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <fputc>
    1160:	b3 94       	inc	r11
    1162:	f7 cf       	rjmp	.-18     	; 0x1152 <vfprintf+0x314>
    1164:	b2 14       	cp	r11, r2
    1166:	18 f4       	brcc	.+6      	; 0x116e <vfprintf+0x330>
    1168:	2b 18       	sub	r2, r11
    116a:	02 c0       	rjmp	.+4      	; 0x1170 <vfprintf+0x332>
    116c:	98 2c       	mov	r9, r8
    116e:	21 2c       	mov	r2, r1
    1170:	a4 fe       	sbrs	r10, 4
    1172:	10 c0       	rjmp	.+32     	; 0x1194 <vfprintf+0x356>
    1174:	b6 01       	movw	r22, r12
    1176:	80 e3       	ldi	r24, 0x30	; 48
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <fputc>
    117e:	a2 fe       	sbrs	r10, 2
    1180:	17 c0       	rjmp	.+46     	; 0x11b0 <vfprintf+0x372>
    1182:	a1 fc       	sbrc	r10, 1
    1184:	03 c0       	rjmp	.+6      	; 0x118c <vfprintf+0x34e>
    1186:	88 e7       	ldi	r24, 0x78	; 120
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	02 c0       	rjmp	.+4      	; 0x1190 <vfprintf+0x352>
    118c:	88 e5       	ldi	r24, 0x58	; 88
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	b6 01       	movw	r22, r12
    1192:	0c c0       	rjmp	.+24     	; 0x11ac <vfprintf+0x36e>
    1194:	8a 2d       	mov	r24, r10
    1196:	86 78       	andi	r24, 0x86	; 134
    1198:	59 f0       	breq	.+22     	; 0x11b0 <vfprintf+0x372>
    119a:	a1 fe       	sbrs	r10, 1
    119c:	02 c0       	rjmp	.+4      	; 0x11a2 <vfprintf+0x364>
    119e:	8b e2       	ldi	r24, 0x2B	; 43
    11a0:	01 c0       	rjmp	.+2      	; 0x11a4 <vfprintf+0x366>
    11a2:	80 e2       	ldi	r24, 0x20	; 32
    11a4:	a7 fc       	sbrc	r10, 7
    11a6:	8d e2       	ldi	r24, 0x2D	; 45
    11a8:	b6 01       	movw	r22, r12
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <fputc>
    11b0:	89 14       	cp	r8, r9
    11b2:	38 f4       	brcc	.+14     	; 0x11c2 <vfprintf+0x384>
    11b4:	b6 01       	movw	r22, r12
    11b6:	80 e3       	ldi	r24, 0x30	; 48
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <fputc>
    11be:	9a 94       	dec	r9
    11c0:	f7 cf       	rjmp	.-18     	; 0x11b0 <vfprintf+0x372>
    11c2:	8a 94       	dec	r8
    11c4:	f3 01       	movw	r30, r6
    11c6:	e8 0d       	add	r30, r8
    11c8:	f1 1d       	adc	r31, r1
    11ca:	80 81       	ld	r24, Z
    11cc:	b6 01       	movw	r22, r12
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <fputc>
    11d4:	81 10       	cpse	r8, r1
    11d6:	f5 cf       	rjmp	.-22     	; 0x11c2 <vfprintf+0x384>
    11d8:	22 20       	and	r2, r2
    11da:	09 f4       	brne	.+2      	; 0x11de <vfprintf+0x3a0>
    11dc:	42 ce       	rjmp	.-892    	; 0xe62 <vfprintf+0x24>
    11de:	b6 01       	movw	r22, r12
    11e0:	80 e2       	ldi	r24, 0x20	; 32
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	0e 94 5a 0a 	call	0x14b4	; 0x14b4 <fputc>
    11e8:	2a 94       	dec	r2
    11ea:	f6 cf       	rjmp	.-20     	; 0x11d8 <vfprintf+0x39a>
    11ec:	f6 01       	movw	r30, r12
    11ee:	86 81       	ldd	r24, Z+6	; 0x06
    11f0:	97 81       	ldd	r25, Z+7	; 0x07
    11f2:	02 c0       	rjmp	.+4      	; 0x11f8 <vfprintf+0x3ba>
    11f4:	8f ef       	ldi	r24, 0xFF	; 255
    11f6:	9f ef       	ldi	r25, 0xFF	; 255
    11f8:	2b 96       	adiw	r28, 0x0b	; 11
    11fa:	e2 e1       	ldi	r30, 0x12	; 18
    11fc:	0c 94 10 0b 	jmp	0x1620	; 0x1620 <__epilogue_restores__>

00001200 <calloc>:
    1200:	0f 93       	push	r16
    1202:	1f 93       	push	r17
    1204:	cf 93       	push	r28
    1206:	df 93       	push	r29
    1208:	86 9f       	mul	r24, r22
    120a:	80 01       	movw	r16, r0
    120c:	87 9f       	mul	r24, r23
    120e:	10 0d       	add	r17, r0
    1210:	96 9f       	mul	r25, r22
    1212:	10 0d       	add	r17, r0
    1214:	11 24       	eor	r1, r1
    1216:	c8 01       	movw	r24, r16
    1218:	0e 94 1c 09 	call	0x1238	; 0x1238 <malloc>
    121c:	ec 01       	movw	r28, r24
    121e:	00 97       	sbiw	r24, 0x00	; 0
    1220:	29 f0       	breq	.+10     	; 0x122c <calloc+0x2c>
    1222:	a8 01       	movw	r20, r16
    1224:	60 e0       	ldi	r22, 0x00	; 0
    1226:	70 e0       	ldi	r23, 0x00	; 0
    1228:	0e 94 48 0a 	call	0x1490	; 0x1490 <memset>
    122c:	ce 01       	movw	r24, r28
    122e:	df 91       	pop	r29
    1230:	cf 91       	pop	r28
    1232:	1f 91       	pop	r17
    1234:	0f 91       	pop	r16
    1236:	08 95       	ret

00001238 <malloc>:
    1238:	0f 93       	push	r16
    123a:	1f 93       	push	r17
    123c:	cf 93       	push	r28
    123e:	df 93       	push	r29
    1240:	82 30       	cpi	r24, 0x02	; 2
    1242:	91 05       	cpc	r25, r1
    1244:	10 f4       	brcc	.+4      	; 0x124a <malloc+0x12>
    1246:	82 e0       	ldi	r24, 0x02	; 2
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	e0 91 23 06 	lds	r30, 0x0623	; 0x800623 <__flp>
    124e:	f0 91 24 06 	lds	r31, 0x0624	; 0x800624 <__flp+0x1>
    1252:	20 e0       	ldi	r18, 0x00	; 0
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	a0 e0       	ldi	r26, 0x00	; 0
    1258:	b0 e0       	ldi	r27, 0x00	; 0
    125a:	30 97       	sbiw	r30, 0x00	; 0
    125c:	19 f1       	breq	.+70     	; 0x12a4 <malloc+0x6c>
    125e:	40 81       	ld	r20, Z
    1260:	51 81       	ldd	r21, Z+1	; 0x01
    1262:	02 81       	ldd	r16, Z+2	; 0x02
    1264:	13 81       	ldd	r17, Z+3	; 0x03
    1266:	48 17       	cp	r20, r24
    1268:	59 07       	cpc	r21, r25
    126a:	c8 f0       	brcs	.+50     	; 0x129e <malloc+0x66>
    126c:	84 17       	cp	r24, r20
    126e:	95 07       	cpc	r25, r21
    1270:	69 f4       	brne	.+26     	; 0x128c <malloc+0x54>
    1272:	10 97       	sbiw	r26, 0x00	; 0
    1274:	31 f0       	breq	.+12     	; 0x1282 <malloc+0x4a>
    1276:	12 96       	adiw	r26, 0x02	; 2
    1278:	0c 93       	st	X, r16
    127a:	12 97       	sbiw	r26, 0x02	; 2
    127c:	13 96       	adiw	r26, 0x03	; 3
    127e:	1c 93       	st	X, r17
    1280:	27 c0       	rjmp	.+78     	; 0x12d0 <malloc+0x98>
    1282:	00 93 23 06 	sts	0x0623, r16	; 0x800623 <__flp>
    1286:	10 93 24 06 	sts	0x0624, r17	; 0x800624 <__flp+0x1>
    128a:	22 c0       	rjmp	.+68     	; 0x12d0 <malloc+0x98>
    128c:	21 15       	cp	r18, r1
    128e:	31 05       	cpc	r19, r1
    1290:	19 f0       	breq	.+6      	; 0x1298 <malloc+0x60>
    1292:	42 17       	cp	r20, r18
    1294:	53 07       	cpc	r21, r19
    1296:	18 f4       	brcc	.+6      	; 0x129e <malloc+0x66>
    1298:	9a 01       	movw	r18, r20
    129a:	bd 01       	movw	r22, r26
    129c:	ef 01       	movw	r28, r30
    129e:	df 01       	movw	r26, r30
    12a0:	f8 01       	movw	r30, r16
    12a2:	db cf       	rjmp	.-74     	; 0x125a <malloc+0x22>
    12a4:	21 15       	cp	r18, r1
    12a6:	31 05       	cpc	r19, r1
    12a8:	f9 f0       	breq	.+62     	; 0x12e8 <malloc+0xb0>
    12aa:	28 1b       	sub	r18, r24
    12ac:	39 0b       	sbc	r19, r25
    12ae:	24 30       	cpi	r18, 0x04	; 4
    12b0:	31 05       	cpc	r19, r1
    12b2:	80 f4       	brcc	.+32     	; 0x12d4 <malloc+0x9c>
    12b4:	8a 81       	ldd	r24, Y+2	; 0x02
    12b6:	9b 81       	ldd	r25, Y+3	; 0x03
    12b8:	61 15       	cp	r22, r1
    12ba:	71 05       	cpc	r23, r1
    12bc:	21 f0       	breq	.+8      	; 0x12c6 <malloc+0x8e>
    12be:	fb 01       	movw	r30, r22
    12c0:	93 83       	std	Z+3, r25	; 0x03
    12c2:	82 83       	std	Z+2, r24	; 0x02
    12c4:	04 c0       	rjmp	.+8      	; 0x12ce <malloc+0x96>
    12c6:	90 93 24 06 	sts	0x0624, r25	; 0x800624 <__flp+0x1>
    12ca:	80 93 23 06 	sts	0x0623, r24	; 0x800623 <__flp>
    12ce:	fe 01       	movw	r30, r28
    12d0:	32 96       	adiw	r30, 0x02	; 2
    12d2:	44 c0       	rjmp	.+136    	; 0x135c <malloc+0x124>
    12d4:	fe 01       	movw	r30, r28
    12d6:	e2 0f       	add	r30, r18
    12d8:	f3 1f       	adc	r31, r19
    12da:	81 93       	st	Z+, r24
    12dc:	91 93       	st	Z+, r25
    12de:	22 50       	subi	r18, 0x02	; 2
    12e0:	31 09       	sbc	r19, r1
    12e2:	39 83       	std	Y+1, r19	; 0x01
    12e4:	28 83       	st	Y, r18
    12e6:	3a c0       	rjmp	.+116    	; 0x135c <malloc+0x124>
    12e8:	20 91 21 06 	lds	r18, 0x0621	; 0x800621 <__brkval>
    12ec:	30 91 22 06 	lds	r19, 0x0622	; 0x800622 <__brkval+0x1>
    12f0:	23 2b       	or	r18, r19
    12f2:	41 f4       	brne	.+16     	; 0x1304 <malloc+0xcc>
    12f4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    12f8:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    12fc:	30 93 22 06 	sts	0x0622, r19	; 0x800622 <__brkval+0x1>
    1300:	20 93 21 06 	sts	0x0621, r18	; 0x800621 <__brkval>
    1304:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1308:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    130c:	21 15       	cp	r18, r1
    130e:	31 05       	cpc	r19, r1
    1310:	41 f4       	brne	.+16     	; 0x1322 <malloc+0xea>
    1312:	2d b7       	in	r18, 0x3d	; 61
    1314:	3e b7       	in	r19, 0x3e	; 62
    1316:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    131a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    131e:	24 1b       	sub	r18, r20
    1320:	35 0b       	sbc	r19, r21
    1322:	e0 91 21 06 	lds	r30, 0x0621	; 0x800621 <__brkval>
    1326:	f0 91 22 06 	lds	r31, 0x0622	; 0x800622 <__brkval+0x1>
    132a:	e2 17       	cp	r30, r18
    132c:	f3 07       	cpc	r31, r19
    132e:	a0 f4       	brcc	.+40     	; 0x1358 <malloc+0x120>
    1330:	2e 1b       	sub	r18, r30
    1332:	3f 0b       	sbc	r19, r31
    1334:	28 17       	cp	r18, r24
    1336:	39 07       	cpc	r19, r25
    1338:	78 f0       	brcs	.+30     	; 0x1358 <malloc+0x120>
    133a:	ac 01       	movw	r20, r24
    133c:	4e 5f       	subi	r20, 0xFE	; 254
    133e:	5f 4f       	sbci	r21, 0xFF	; 255
    1340:	24 17       	cp	r18, r20
    1342:	35 07       	cpc	r19, r21
    1344:	48 f0       	brcs	.+18     	; 0x1358 <malloc+0x120>
    1346:	4e 0f       	add	r20, r30
    1348:	5f 1f       	adc	r21, r31
    134a:	50 93 22 06 	sts	0x0622, r21	; 0x800622 <__brkval+0x1>
    134e:	40 93 21 06 	sts	0x0621, r20	; 0x800621 <__brkval>
    1352:	81 93       	st	Z+, r24
    1354:	91 93       	st	Z+, r25
    1356:	02 c0       	rjmp	.+4      	; 0x135c <malloc+0x124>
    1358:	e0 e0       	ldi	r30, 0x00	; 0
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	cf 01       	movw	r24, r30
    135e:	df 91       	pop	r29
    1360:	cf 91       	pop	r28
    1362:	1f 91       	pop	r17
    1364:	0f 91       	pop	r16
    1366:	08 95       	ret

00001368 <free>:
    1368:	cf 93       	push	r28
    136a:	df 93       	push	r29
    136c:	00 97       	sbiw	r24, 0x00	; 0
    136e:	09 f4       	brne	.+2      	; 0x1372 <free+0xa>
    1370:	81 c0       	rjmp	.+258    	; 0x1474 <free+0x10c>
    1372:	fc 01       	movw	r30, r24
    1374:	32 97       	sbiw	r30, 0x02	; 2
    1376:	13 82       	std	Z+3, r1	; 0x03
    1378:	12 82       	std	Z+2, r1	; 0x02
    137a:	a0 91 23 06 	lds	r26, 0x0623	; 0x800623 <__flp>
    137e:	b0 91 24 06 	lds	r27, 0x0624	; 0x800624 <__flp+0x1>
    1382:	10 97       	sbiw	r26, 0x00	; 0
    1384:	81 f4       	brne	.+32     	; 0x13a6 <free+0x3e>
    1386:	20 81       	ld	r18, Z
    1388:	31 81       	ldd	r19, Z+1	; 0x01
    138a:	82 0f       	add	r24, r18
    138c:	93 1f       	adc	r25, r19
    138e:	20 91 21 06 	lds	r18, 0x0621	; 0x800621 <__brkval>
    1392:	30 91 22 06 	lds	r19, 0x0622	; 0x800622 <__brkval+0x1>
    1396:	28 17       	cp	r18, r24
    1398:	39 07       	cpc	r19, r25
    139a:	51 f5       	brne	.+84     	; 0x13f0 <free+0x88>
    139c:	f0 93 22 06 	sts	0x0622, r31	; 0x800622 <__brkval+0x1>
    13a0:	e0 93 21 06 	sts	0x0621, r30	; 0x800621 <__brkval>
    13a4:	67 c0       	rjmp	.+206    	; 0x1474 <free+0x10c>
    13a6:	ed 01       	movw	r28, r26
    13a8:	20 e0       	ldi	r18, 0x00	; 0
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	ce 17       	cp	r28, r30
    13ae:	df 07       	cpc	r29, r31
    13b0:	40 f4       	brcc	.+16     	; 0x13c2 <free+0x5a>
    13b2:	4a 81       	ldd	r20, Y+2	; 0x02
    13b4:	5b 81       	ldd	r21, Y+3	; 0x03
    13b6:	9e 01       	movw	r18, r28
    13b8:	41 15       	cp	r20, r1
    13ba:	51 05       	cpc	r21, r1
    13bc:	f1 f0       	breq	.+60     	; 0x13fa <free+0x92>
    13be:	ea 01       	movw	r28, r20
    13c0:	f5 cf       	rjmp	.-22     	; 0x13ac <free+0x44>
    13c2:	d3 83       	std	Z+3, r29	; 0x03
    13c4:	c2 83       	std	Z+2, r28	; 0x02
    13c6:	40 81       	ld	r20, Z
    13c8:	51 81       	ldd	r21, Z+1	; 0x01
    13ca:	84 0f       	add	r24, r20
    13cc:	95 1f       	adc	r25, r21
    13ce:	c8 17       	cp	r28, r24
    13d0:	d9 07       	cpc	r29, r25
    13d2:	59 f4       	brne	.+22     	; 0x13ea <free+0x82>
    13d4:	88 81       	ld	r24, Y
    13d6:	99 81       	ldd	r25, Y+1	; 0x01
    13d8:	84 0f       	add	r24, r20
    13da:	95 1f       	adc	r25, r21
    13dc:	02 96       	adiw	r24, 0x02	; 2
    13de:	91 83       	std	Z+1, r25	; 0x01
    13e0:	80 83       	st	Z, r24
    13e2:	8a 81       	ldd	r24, Y+2	; 0x02
    13e4:	9b 81       	ldd	r25, Y+3	; 0x03
    13e6:	93 83       	std	Z+3, r25	; 0x03
    13e8:	82 83       	std	Z+2, r24	; 0x02
    13ea:	21 15       	cp	r18, r1
    13ec:	31 05       	cpc	r19, r1
    13ee:	29 f4       	brne	.+10     	; 0x13fa <free+0x92>
    13f0:	f0 93 24 06 	sts	0x0624, r31	; 0x800624 <__flp+0x1>
    13f4:	e0 93 23 06 	sts	0x0623, r30	; 0x800623 <__flp>
    13f8:	3d c0       	rjmp	.+122    	; 0x1474 <free+0x10c>
    13fa:	e9 01       	movw	r28, r18
    13fc:	fb 83       	std	Y+3, r31	; 0x03
    13fe:	ea 83       	std	Y+2, r30	; 0x02
    1400:	49 91       	ld	r20, Y+
    1402:	59 91       	ld	r21, Y+
    1404:	c4 0f       	add	r28, r20
    1406:	d5 1f       	adc	r29, r21
    1408:	ec 17       	cp	r30, r28
    140a:	fd 07       	cpc	r31, r29
    140c:	61 f4       	brne	.+24     	; 0x1426 <free+0xbe>
    140e:	80 81       	ld	r24, Z
    1410:	91 81       	ldd	r25, Z+1	; 0x01
    1412:	84 0f       	add	r24, r20
    1414:	95 1f       	adc	r25, r21
    1416:	02 96       	adiw	r24, 0x02	; 2
    1418:	e9 01       	movw	r28, r18
    141a:	99 83       	std	Y+1, r25	; 0x01
    141c:	88 83       	st	Y, r24
    141e:	82 81       	ldd	r24, Z+2	; 0x02
    1420:	93 81       	ldd	r25, Z+3	; 0x03
    1422:	9b 83       	std	Y+3, r25	; 0x03
    1424:	8a 83       	std	Y+2, r24	; 0x02
    1426:	e0 e0       	ldi	r30, 0x00	; 0
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	12 96       	adiw	r26, 0x02	; 2
    142c:	8d 91       	ld	r24, X+
    142e:	9c 91       	ld	r25, X
    1430:	13 97       	sbiw	r26, 0x03	; 3
    1432:	00 97       	sbiw	r24, 0x00	; 0
    1434:	19 f0       	breq	.+6      	; 0x143c <free+0xd4>
    1436:	fd 01       	movw	r30, r26
    1438:	dc 01       	movw	r26, r24
    143a:	f7 cf       	rjmp	.-18     	; 0x142a <free+0xc2>
    143c:	8d 91       	ld	r24, X+
    143e:	9c 91       	ld	r25, X
    1440:	11 97       	sbiw	r26, 0x01	; 1
    1442:	9d 01       	movw	r18, r26
    1444:	2e 5f       	subi	r18, 0xFE	; 254
    1446:	3f 4f       	sbci	r19, 0xFF	; 255
    1448:	82 0f       	add	r24, r18
    144a:	93 1f       	adc	r25, r19
    144c:	20 91 21 06 	lds	r18, 0x0621	; 0x800621 <__brkval>
    1450:	30 91 22 06 	lds	r19, 0x0622	; 0x800622 <__brkval+0x1>
    1454:	28 17       	cp	r18, r24
    1456:	39 07       	cpc	r19, r25
    1458:	69 f4       	brne	.+26     	; 0x1474 <free+0x10c>
    145a:	30 97       	sbiw	r30, 0x00	; 0
    145c:	29 f4       	brne	.+10     	; 0x1468 <free+0x100>
    145e:	10 92 24 06 	sts	0x0624, r1	; 0x800624 <__flp+0x1>
    1462:	10 92 23 06 	sts	0x0623, r1	; 0x800623 <__flp>
    1466:	02 c0       	rjmp	.+4      	; 0x146c <free+0x104>
    1468:	13 82       	std	Z+3, r1	; 0x03
    146a:	12 82       	std	Z+2, r1	; 0x02
    146c:	b0 93 22 06 	sts	0x0622, r27	; 0x800622 <__brkval+0x1>
    1470:	a0 93 21 06 	sts	0x0621, r26	; 0x800621 <__brkval>
    1474:	df 91       	pop	r29
    1476:	cf 91       	pop	r28
    1478:	08 95       	ret

0000147a <strnlen_P>:
    147a:	fc 01       	movw	r30, r24
    147c:	05 90       	lpm	r0, Z+
    147e:	61 50       	subi	r22, 0x01	; 1
    1480:	70 40       	sbci	r23, 0x00	; 0
    1482:	01 10       	cpse	r0, r1
    1484:	d8 f7       	brcc	.-10     	; 0x147c <strnlen_P+0x2>
    1486:	80 95       	com	r24
    1488:	90 95       	com	r25
    148a:	8e 0f       	add	r24, r30
    148c:	9f 1f       	adc	r25, r31
    148e:	08 95       	ret

00001490 <memset>:
    1490:	dc 01       	movw	r26, r24
    1492:	01 c0       	rjmp	.+2      	; 0x1496 <memset+0x6>
    1494:	6d 93       	st	X+, r22
    1496:	41 50       	subi	r20, 0x01	; 1
    1498:	50 40       	sbci	r21, 0x00	; 0
    149a:	e0 f7       	brcc	.-8      	; 0x1494 <memset+0x4>
    149c:	08 95       	ret

0000149e <strnlen>:
    149e:	fc 01       	movw	r30, r24
    14a0:	61 50       	subi	r22, 0x01	; 1
    14a2:	70 40       	sbci	r23, 0x00	; 0
    14a4:	01 90       	ld	r0, Z+
    14a6:	01 10       	cpse	r0, r1
    14a8:	d8 f7       	brcc	.-10     	; 0x14a0 <strnlen+0x2>
    14aa:	80 95       	com	r24
    14ac:	90 95       	com	r25
    14ae:	8e 0f       	add	r24, r30
    14b0:	9f 1f       	adc	r25, r31
    14b2:	08 95       	ret

000014b4 <fputc>:
    14b4:	0f 93       	push	r16
    14b6:	1f 93       	push	r17
    14b8:	cf 93       	push	r28
    14ba:	df 93       	push	r29
    14bc:	fb 01       	movw	r30, r22
    14be:	23 81       	ldd	r18, Z+3	; 0x03
    14c0:	21 fd       	sbrc	r18, 1
    14c2:	03 c0       	rjmp	.+6      	; 0x14ca <fputc+0x16>
    14c4:	8f ef       	ldi	r24, 0xFF	; 255
    14c6:	9f ef       	ldi	r25, 0xFF	; 255
    14c8:	2c c0       	rjmp	.+88     	; 0x1522 <fputc+0x6e>
    14ca:	22 ff       	sbrs	r18, 2
    14cc:	16 c0       	rjmp	.+44     	; 0x14fa <fputc+0x46>
    14ce:	46 81       	ldd	r20, Z+6	; 0x06
    14d0:	57 81       	ldd	r21, Z+7	; 0x07
    14d2:	24 81       	ldd	r18, Z+4	; 0x04
    14d4:	35 81       	ldd	r19, Z+5	; 0x05
    14d6:	42 17       	cp	r20, r18
    14d8:	53 07       	cpc	r21, r19
    14da:	44 f4       	brge	.+16     	; 0x14ec <fputc+0x38>
    14dc:	a0 81       	ld	r26, Z
    14de:	b1 81       	ldd	r27, Z+1	; 0x01
    14e0:	9d 01       	movw	r18, r26
    14e2:	2f 5f       	subi	r18, 0xFF	; 255
    14e4:	3f 4f       	sbci	r19, 0xFF	; 255
    14e6:	31 83       	std	Z+1, r19	; 0x01
    14e8:	20 83       	st	Z, r18
    14ea:	8c 93       	st	X, r24
    14ec:	26 81       	ldd	r18, Z+6	; 0x06
    14ee:	37 81       	ldd	r19, Z+7	; 0x07
    14f0:	2f 5f       	subi	r18, 0xFF	; 255
    14f2:	3f 4f       	sbci	r19, 0xFF	; 255
    14f4:	37 83       	std	Z+7, r19	; 0x07
    14f6:	26 83       	std	Z+6, r18	; 0x06
    14f8:	14 c0       	rjmp	.+40     	; 0x1522 <fputc+0x6e>
    14fa:	8b 01       	movw	r16, r22
    14fc:	ec 01       	movw	r28, r24
    14fe:	fb 01       	movw	r30, r22
    1500:	00 84       	ldd	r0, Z+8	; 0x08
    1502:	f1 85       	ldd	r31, Z+9	; 0x09
    1504:	e0 2d       	mov	r30, r0
    1506:	09 95       	icall
    1508:	89 2b       	or	r24, r25
    150a:	e1 f6       	brne	.-72     	; 0x14c4 <fputc+0x10>
    150c:	d8 01       	movw	r26, r16
    150e:	16 96       	adiw	r26, 0x06	; 6
    1510:	8d 91       	ld	r24, X+
    1512:	9c 91       	ld	r25, X
    1514:	17 97       	sbiw	r26, 0x07	; 7
    1516:	01 96       	adiw	r24, 0x01	; 1
    1518:	17 96       	adiw	r26, 0x07	; 7
    151a:	9c 93       	st	X, r25
    151c:	8e 93       	st	-X, r24
    151e:	16 97       	sbiw	r26, 0x06	; 6
    1520:	ce 01       	movw	r24, r28
    1522:	df 91       	pop	r29
    1524:	cf 91       	pop	r28
    1526:	1f 91       	pop	r17
    1528:	0f 91       	pop	r16
    152a:	08 95       	ret

0000152c <__ultoa_invert>:
    152c:	fa 01       	movw	r30, r20
    152e:	aa 27       	eor	r26, r26
    1530:	28 30       	cpi	r18, 0x08	; 8
    1532:	51 f1       	breq	.+84     	; 0x1588 <__ultoa_invert+0x5c>
    1534:	20 31       	cpi	r18, 0x10	; 16
    1536:	81 f1       	breq	.+96     	; 0x1598 <__ultoa_invert+0x6c>
    1538:	e8 94       	clt
    153a:	6f 93       	push	r22
    153c:	6e 7f       	andi	r22, 0xFE	; 254
    153e:	6e 5f       	subi	r22, 0xFE	; 254
    1540:	7f 4f       	sbci	r23, 0xFF	; 255
    1542:	8f 4f       	sbci	r24, 0xFF	; 255
    1544:	9f 4f       	sbci	r25, 0xFF	; 255
    1546:	af 4f       	sbci	r26, 0xFF	; 255
    1548:	b1 e0       	ldi	r27, 0x01	; 1
    154a:	3e d0       	rcall	.+124    	; 0x15c8 <__ultoa_invert+0x9c>
    154c:	b4 e0       	ldi	r27, 0x04	; 4
    154e:	3c d0       	rcall	.+120    	; 0x15c8 <__ultoa_invert+0x9c>
    1550:	67 0f       	add	r22, r23
    1552:	78 1f       	adc	r23, r24
    1554:	89 1f       	adc	r24, r25
    1556:	9a 1f       	adc	r25, r26
    1558:	a1 1d       	adc	r26, r1
    155a:	68 0f       	add	r22, r24
    155c:	79 1f       	adc	r23, r25
    155e:	8a 1f       	adc	r24, r26
    1560:	91 1d       	adc	r25, r1
    1562:	a1 1d       	adc	r26, r1
    1564:	6a 0f       	add	r22, r26
    1566:	71 1d       	adc	r23, r1
    1568:	81 1d       	adc	r24, r1
    156a:	91 1d       	adc	r25, r1
    156c:	a1 1d       	adc	r26, r1
    156e:	20 d0       	rcall	.+64     	; 0x15b0 <__ultoa_invert+0x84>
    1570:	09 f4       	brne	.+2      	; 0x1574 <__ultoa_invert+0x48>
    1572:	68 94       	set
    1574:	3f 91       	pop	r19
    1576:	2a e0       	ldi	r18, 0x0A	; 10
    1578:	26 9f       	mul	r18, r22
    157a:	11 24       	eor	r1, r1
    157c:	30 19       	sub	r19, r0
    157e:	30 5d       	subi	r19, 0xD0	; 208
    1580:	31 93       	st	Z+, r19
    1582:	de f6       	brtc	.-74     	; 0x153a <__ultoa_invert+0xe>
    1584:	cf 01       	movw	r24, r30
    1586:	08 95       	ret
    1588:	46 2f       	mov	r20, r22
    158a:	47 70       	andi	r20, 0x07	; 7
    158c:	40 5d       	subi	r20, 0xD0	; 208
    158e:	41 93       	st	Z+, r20
    1590:	b3 e0       	ldi	r27, 0x03	; 3
    1592:	0f d0       	rcall	.+30     	; 0x15b2 <__ultoa_invert+0x86>
    1594:	c9 f7       	brne	.-14     	; 0x1588 <__ultoa_invert+0x5c>
    1596:	f6 cf       	rjmp	.-20     	; 0x1584 <__ultoa_invert+0x58>
    1598:	46 2f       	mov	r20, r22
    159a:	4f 70       	andi	r20, 0x0F	; 15
    159c:	40 5d       	subi	r20, 0xD0	; 208
    159e:	4a 33       	cpi	r20, 0x3A	; 58
    15a0:	18 f0       	brcs	.+6      	; 0x15a8 <__ultoa_invert+0x7c>
    15a2:	49 5d       	subi	r20, 0xD9	; 217
    15a4:	31 fd       	sbrc	r19, 1
    15a6:	40 52       	subi	r20, 0x20	; 32
    15a8:	41 93       	st	Z+, r20
    15aa:	02 d0       	rcall	.+4      	; 0x15b0 <__ultoa_invert+0x84>
    15ac:	a9 f7       	brne	.-22     	; 0x1598 <__ultoa_invert+0x6c>
    15ae:	ea cf       	rjmp	.-44     	; 0x1584 <__ultoa_invert+0x58>
    15b0:	b4 e0       	ldi	r27, 0x04	; 4
    15b2:	a6 95       	lsr	r26
    15b4:	97 95       	ror	r25
    15b6:	87 95       	ror	r24
    15b8:	77 95       	ror	r23
    15ba:	67 95       	ror	r22
    15bc:	ba 95       	dec	r27
    15be:	c9 f7       	brne	.-14     	; 0x15b2 <__ultoa_invert+0x86>
    15c0:	00 97       	sbiw	r24, 0x00	; 0
    15c2:	61 05       	cpc	r22, r1
    15c4:	71 05       	cpc	r23, r1
    15c6:	08 95       	ret
    15c8:	9b 01       	movw	r18, r22
    15ca:	ac 01       	movw	r20, r24
    15cc:	0a 2e       	mov	r0, r26
    15ce:	06 94       	lsr	r0
    15d0:	57 95       	ror	r21
    15d2:	47 95       	ror	r20
    15d4:	37 95       	ror	r19
    15d6:	27 95       	ror	r18
    15d8:	ba 95       	dec	r27
    15da:	c9 f7       	brne	.-14     	; 0x15ce <__ultoa_invert+0xa2>
    15dc:	62 0f       	add	r22, r18
    15de:	73 1f       	adc	r23, r19
    15e0:	84 1f       	adc	r24, r20
    15e2:	95 1f       	adc	r25, r21
    15e4:	a0 1d       	adc	r26, r0
    15e6:	08 95       	ret

000015e8 <__prologue_saves__>:
    15e8:	2f 92       	push	r2
    15ea:	3f 92       	push	r3
    15ec:	4f 92       	push	r4
    15ee:	5f 92       	push	r5
    15f0:	6f 92       	push	r6
    15f2:	7f 92       	push	r7
    15f4:	8f 92       	push	r8
    15f6:	9f 92       	push	r9
    15f8:	af 92       	push	r10
    15fa:	bf 92       	push	r11
    15fc:	cf 92       	push	r12
    15fe:	df 92       	push	r13
    1600:	ef 92       	push	r14
    1602:	ff 92       	push	r15
    1604:	0f 93       	push	r16
    1606:	1f 93       	push	r17
    1608:	cf 93       	push	r28
    160a:	df 93       	push	r29
    160c:	cd b7       	in	r28, 0x3d	; 61
    160e:	de b7       	in	r29, 0x3e	; 62
    1610:	ca 1b       	sub	r28, r26
    1612:	db 0b       	sbc	r29, r27
    1614:	0f b6       	in	r0, 0x3f	; 63
    1616:	f8 94       	cli
    1618:	de bf       	out	0x3e, r29	; 62
    161a:	0f be       	out	0x3f, r0	; 63
    161c:	cd bf       	out	0x3d, r28	; 61
    161e:	09 94       	ijmp

00001620 <__epilogue_restores__>:
    1620:	2a 88       	ldd	r2, Y+18	; 0x12
    1622:	39 88       	ldd	r3, Y+17	; 0x11
    1624:	48 88       	ldd	r4, Y+16	; 0x10
    1626:	5f 84       	ldd	r5, Y+15	; 0x0f
    1628:	6e 84       	ldd	r6, Y+14	; 0x0e
    162a:	7d 84       	ldd	r7, Y+13	; 0x0d
    162c:	8c 84       	ldd	r8, Y+12	; 0x0c
    162e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1630:	aa 84       	ldd	r10, Y+10	; 0x0a
    1632:	b9 84       	ldd	r11, Y+9	; 0x09
    1634:	c8 84       	ldd	r12, Y+8	; 0x08
    1636:	df 80       	ldd	r13, Y+7	; 0x07
    1638:	ee 80       	ldd	r14, Y+6	; 0x06
    163a:	fd 80       	ldd	r15, Y+5	; 0x05
    163c:	0c 81       	ldd	r16, Y+4	; 0x04
    163e:	1b 81       	ldd	r17, Y+3	; 0x03
    1640:	aa 81       	ldd	r26, Y+2	; 0x02
    1642:	b9 81       	ldd	r27, Y+1	; 0x01
    1644:	ce 0f       	add	r28, r30
    1646:	d1 1d       	adc	r29, r1
    1648:	0f b6       	in	r0, 0x3f	; 63
    164a:	f8 94       	cli
    164c:	de bf       	out	0x3e, r29	; 62
    164e:	0f be       	out	0x3f, r0	; 63
    1650:	cd bf       	out	0x3d, r28	; 61
    1652:	ed 01       	movw	r28, r26
    1654:	08 95       	ret

00001656 <_exit>:
    1656:	f8 94       	cli

00001658 <__stop_program>:
    1658:	ff cf       	rjmp	.-2      	; 0x1658 <__stop_program>
