
StopWatch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000003fe  00000492  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  0080010e  0080010e  000004a0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000510  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b72  00000000  00000000  00000598  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008bb  00000000  00000000  0000110a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000069e  00000000  00000000  000019c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000130  00000000  00000000  00002064  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000458  00000000  00000000  00002194  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000408  00000000  00000000  000025ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  000029f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ef       	ldi	r30, 0xFE	; 254
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 31       	cpi	r26, 0x1B	; 27
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 77 01 	call	0x2ee	; 0x2ee <main>
  9e:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <FND4digit_init>:
			FND_DATA_PORT = FND4digit_font[i];
			_delay_ms(400);
		}
	}
	return;
}
  a6:	84 b1       	in	r24, 0x04	; 4
  a8:	8f 60       	ori	r24, 0x0F	; 15
  aa:	84 b9       	out	0x04, r24	; 4
  ac:	85 b1       	in	r24, 0x05	; 5
  ae:	80 7f       	andi	r24, 0xF0	; 240
  b0:	85 b9       	out	0x05, r24	; 5
  b2:	8a b1       	in	r24, 0x0a	; 10
  b4:	8f ef       	ldi	r24, 0xFF	; 255
  b6:	8a b9       	out	0x0a, r24	; 10
  b8:	9b b1       	in	r25, 0x0b	; 11
  ba:	8b b9       	out	0x0b, r24	; 11
  bc:	08 95       	ret

000000be <FND_update_value>:

void FND_update_value(int number)
{
  be:	cf 93       	push	r28
  c0:	df 93       	push	r29
  c2:	ec 01       	movw	r28, r24
	FND[0] = FND4digit_font[number % 10];
  c4:	e3 e1       	ldi	r30, 0x13	; 19
  c6:	f1 e0       	ldi	r31, 0x01	; 1
  c8:	2a e0       	ldi	r18, 0x0A	; 10
  ca:	30 e0       	ldi	r19, 0x00	; 0
  cc:	b9 01       	movw	r22, r18
  ce:	0e 94 d5 01 	call	0x3aa	; 0x3aa <__divmodhi4>
  d2:	dc 01       	movw	r26, r24
  d4:	ac 5f       	subi	r26, 0xFC	; 252
  d6:	be 4f       	sbci	r27, 0xFE	; 254
  d8:	8c 91       	ld	r24, X
  da:	80 83       	st	Z, r24
	FND[1] = FND4digit_font[number /10 % 10];
  dc:	cb 01       	movw	r24, r22
  de:	b9 01       	movw	r22, r18
  e0:	0e 94 d5 01 	call	0x3aa	; 0x3aa <__divmodhi4>
  e4:	dc 01       	movw	r26, r24
  e6:	ac 5f       	subi	r26, 0xFC	; 252
  e8:	be 4f       	sbci	r27, 0xFE	; 254
  ea:	8c 91       	ld	r24, X
  ec:	81 83       	std	Z+1, r24	; 0x01
	FND[2] = FND4digit_font[number /100 % 10];
  ee:	ce 01       	movw	r24, r28
  f0:	64 e6       	ldi	r22, 0x64	; 100
  f2:	70 e0       	ldi	r23, 0x00	; 0
  f4:	0e 94 d5 01 	call	0x3aa	; 0x3aa <__divmodhi4>
  f8:	cb 01       	movw	r24, r22
  fa:	b9 01       	movw	r22, r18
  fc:	0e 94 d5 01 	call	0x3aa	; 0x3aa <__divmodhi4>
 100:	dc 01       	movw	r26, r24
 102:	ac 5f       	subi	r26, 0xFC	; 252
 104:	be 4f       	sbci	r27, 0xFE	; 254
 106:	8c 91       	ld	r24, X
 108:	82 83       	std	Z+2, r24	; 0x02
	FND[3] = FND4digit_font[number /1000 % 10];
 10a:	ce 01       	movw	r24, r28
 10c:	68 ee       	ldi	r22, 0xE8	; 232
 10e:	73 e0       	ldi	r23, 0x03	; 3
 110:	0e 94 d5 01 	call	0x3aa	; 0x3aa <__divmodhi4>
 114:	cb 01       	movw	r24, r22
 116:	b9 01       	movw	r22, r18
 118:	0e 94 d5 01 	call	0x3aa	; 0x3aa <__divmodhi4>
 11c:	dc 01       	movw	r26, r24
 11e:	ac 5f       	subi	r26, 0xFC	; 252
 120:	be 4f       	sbci	r27, 0xFE	; 254
 122:	8c 91       	ld	r24, X
 124:	83 83       	std	Z+3, r24	; 0x03
	return;
}
 126:	df 91       	pop	r29
 128:	cf 91       	pop	r28
 12a:	08 95       	ret

0000012c <FND_update_time>:

void FND_update_time(int msec, char sec)
{
 12c:	0f 93       	push	r16
 12e:	1f 93       	push	r17
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
 134:	8c 01       	movw	r16, r24
 136:	26 2f       	mov	r18, r22
	FND[0] = FND4digit_font[msec /10 % 10];
 138:	c3 e1       	ldi	r28, 0x13	; 19
 13a:	d1 e0       	ldi	r29, 0x01	; 1
 13c:	ea e0       	ldi	r30, 0x0A	; 10
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	bf 01       	movw	r22, r30
 142:	0e 94 d5 01 	call	0x3aa	; 0x3aa <__divmodhi4>
 146:	cb 01       	movw	r24, r22
 148:	bf 01       	movw	r22, r30
 14a:	0e 94 d5 01 	call	0x3aa	; 0x3aa <__divmodhi4>
 14e:	dc 01       	movw	r26, r24
 150:	ac 5f       	subi	r26, 0xFC	; 252
 152:	be 4f       	sbci	r27, 0xFE	; 254
 154:	8c 91       	ld	r24, X
 156:	88 83       	st	Y, r24
	FND[1] = FND4digit_font[msec /100 % 10];
 158:	c8 01       	movw	r24, r16
 15a:	64 e6       	ldi	r22, 0x64	; 100
 15c:	70 e0       	ldi	r23, 0x00	; 0
 15e:	0e 94 d5 01 	call	0x3aa	; 0x3aa <__divmodhi4>
 162:	cb 01       	movw	r24, r22
 164:	bf 01       	movw	r22, r30
 166:	0e 94 d5 01 	call	0x3aa	; 0x3aa <__divmodhi4>
 16a:	fc 01       	movw	r30, r24
 16c:	ec 5f       	subi	r30, 0xFC	; 252
 16e:	fe 4f       	sbci	r31, 0xFE	; 254
 170:	80 81       	ld	r24, Z
 172:	89 83       	std	Y+1, r24	; 0x01
	FND[2] = FND4digit_font[sec % 10] & (~(1<< FND_p));
 174:	8d ec       	ldi	r24, 0xCD	; 205
 176:	28 9f       	mul	r18, r24
 178:	e1 2d       	mov	r30, r1
 17a:	11 24       	eor	r1, r1
 17c:	e6 95       	lsr	r30
 17e:	e6 95       	lsr	r30
 180:	e6 95       	lsr	r30
 182:	3e 2f       	mov	r19, r30
 184:	33 0f       	add	r19, r19
 186:	93 2f       	mov	r25, r19
 188:	99 0f       	add	r25, r25
 18a:	99 0f       	add	r25, r25
 18c:	93 0f       	add	r25, r19
 18e:	29 1b       	sub	r18, r25
 190:	a2 2f       	mov	r26, r18
 192:	b0 e0       	ldi	r27, 0x00	; 0
 194:	ac 5f       	subi	r26, 0xFC	; 252
 196:	be 4f       	sbci	r27, 0xFE	; 254
 198:	9c 91       	ld	r25, X
 19a:	9b 7f       	andi	r25, 0xFB	; 251
 19c:	9a 83       	std	Y+2, r25	; 0x02
	FND[3] = FND4digit_font[sec /10 % 10];
 19e:	e8 9f       	mul	r30, r24
 1a0:	81 2d       	mov	r24, r1
 1a2:	11 24       	eor	r1, r1
 1a4:	86 95       	lsr	r24
 1a6:	86 95       	lsr	r24
 1a8:	86 95       	lsr	r24
 1aa:	88 0f       	add	r24, r24
 1ac:	98 2f       	mov	r25, r24
 1ae:	99 0f       	add	r25, r25
 1b0:	99 0f       	add	r25, r25
 1b2:	89 0f       	add	r24, r25
 1b4:	e8 1b       	sub	r30, r24
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	ec 5f       	subi	r30, 0xFC	; 252
 1ba:	fe 4f       	sbci	r31, 0xFE	; 254
 1bc:	80 81       	ld	r24, Z
 1be:	8b 83       	std	Y+3, r24	; 0x03
	return;
}
 1c0:	df 91       	pop	r29
 1c2:	cf 91       	pop	r28
 1c4:	1f 91       	pop	r17
 1c6:	0f 91       	pop	r16
 1c8:	08 95       	ret

000001ca <__vector_14>:
int msec = 0;					//static -> 처음 할당될때 메모리 받아서 반납하지 않음
char i = 0, sec = 0, min = 0;

//isr은 가급적 빨리 실행해야 되기 때문에 딜레이 x, 함수호출x ...
ISR(TIMER0_COMPA_vect)						//interrupt 걸리면 실행하는 내용 //Interrupt Service Routine
{						
 1ca:	1f 92       	push	r1
 1cc:	0f 92       	push	r0
 1ce:	0f b6       	in	r0, 0x3f	; 63
 1d0:	0f 92       	push	r0
 1d2:	11 24       	eor	r1, r1
 1d4:	2f 93       	push	r18
 1d6:	3f 93       	push	r19
 1d8:	4f 93       	push	r20
 1da:	5f 93       	push	r21
 1dc:	6f 93       	push	r22
 1de:	7f 93       	push	r23
 1e0:	8f 93       	push	r24
 1e2:	9f 93       	push	r25
 1e4:	af 93       	push	r26
 1e6:	bf 93       	push	r27
 1e8:	ef 93       	push	r30
 1ea:	ff 93       	push	r31
	//static int msec = 0;					//static -> 처음 할당될때 메모리 받아서 반납하지 않음
	//static char i = 0, sec = 0, min = 0;
	if(start_flag) msec++;
 1ec:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <start_flag>
 1f0:	88 23       	and	r24, r24
 1f2:	49 f0       	breq	.+18     	; 0x206 <__vector_14+0x3c>
 1f4:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <msec>
 1f8:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <msec+0x1>
 1fc:	01 96       	adiw	r24, 0x01	; 1
 1fe:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <msec+0x1>
 202:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <msec>
		
	if(msec >= 1000)
 206:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <msec>
 20a:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <msec+0x1>
 20e:	28 3e       	cpi	r18, 0xE8	; 232
 210:	83 e0       	ldi	r24, 0x03	; 3
 212:	38 07       	cpc	r19, r24
 214:	bc f0       	brlt	.+46     	; 0x244 <__vector_14+0x7a>
	{
		msec = 0;
 216:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <msec+0x1>
 21a:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <msec>
		sec++; //fnd 출력이 바뀌는 시점
 21e:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <sec>
 222:	8f 5f       	subi	r24, 0xFF	; 255
		if(sec >= 60)
 224:	8c 33       	cpi	r24, 0x3C	; 60
 226:	08 f4       	brcc	.+2      	; 0x22a <__vector_14+0x60>
 228:	4c c0       	rjmp	.+152    	; 0x2c2 <__vector_14+0xf8>
		{
			sec = 0;
 22a:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <sec>
			min++;
 22e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 232:	8f 5f       	subi	r24, 0xFF	; 255
			if(min >= 60) min = 0;
 234:	8c 33       	cpi	r24, 0x3C	; 60
 236:	18 f4       	brcc	.+6      	; 0x23e <__vector_14+0x74>
		msec = 0;
		sec++; //fnd 출력이 바뀌는 시점
		if(sec >= 60)
		{
			sec = 0;
			min++;
 238:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
 23c:	44 c0       	rjmp	.+136    	; 0x2c6 <__vector_14+0xfc>
			if(min >= 60) min = 0;
 23e:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
 242:	41 c0       	rjmp	.+130    	; 0x2c6 <__vector_14+0xfc>
		//if(w_flag)
		//FND_clock(sec, min);
	}
	
	
	if(!(msec % 10)) 
 244:	c9 01       	movw	r24, r18
 246:	6a e0       	ldi	r22, 0x0A	; 10
 248:	70 e0       	ldi	r23, 0x00	; 0
 24a:	0e 94 d5 01 	call	0x3aa	; 0x3aa <__divmodhi4>
 24e:	89 2b       	or	r24, r25
 250:	39 f4       	brne	.+14     	; 0x260 <__vector_14+0x96>
	{
		if(w_flag)
 252:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <w_flag>
 256:	88 23       	and	r24, r24
 258:	19 f0       	breq	.+6      	; 0x260 <__vector_14+0x96>
			time_flag = 1;
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <time_flag>
	}
	
	if(clear_flag)
 260:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <clear_flag>
 264:	88 23       	and	r24, r24
 266:	79 f0       	breq	.+30     	; 0x286 <__vector_14+0xbc>
	{
		clear_flag = 0;
 268:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <clear_flag>
		FND_update_time(msec, sec);
 26c:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <sec>
 270:	c9 01       	movw	r24, r18
 272:	0e 94 96 00 	call	0x12c	; 0x12c <FND_update_time>
		msec = 0;
 276:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <msec+0x1>
 27a:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <msec>
		sec = 0;
 27e:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <sec>
		min = 0;
 282:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
		
	}
	
	i++;
 286:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <i>
 28a:	8f 5f       	subi	r24, 0xFF	; 255
 	
 	if(i >=4) i = 0;
 28c:	84 30       	cpi	r24, 0x04	; 4
 28e:	18 f4       	brcc	.+6      	; 0x296 <__vector_14+0xcc>
		sec = 0;
		min = 0;
		
	}
	
	i++;
 290:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <i>
 294:	02 c0       	rjmp	.+4      	; 0x29a <__vector_14+0xd0>
 	
 	if(i >=4) i = 0;
 296:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <i>
	
	FND_COM_PORT &= 0b11110000;
 29a:	85 b1       	in	r24, 0x05	; 5
 29c:	80 7f       	andi	r24, 0xF0	; 240
 29e:	85 b9       	out	0x05, r24	; 5
	FND_COM_PORT |= FND4digit_digit[i];
 2a0:	95 b1       	in	r25, 0x05	; 5
 2a2:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <i>
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	e0 50       	subi	r30, 0x00	; 0
 2aa:	ff 4f       	sbci	r31, 0xFF	; 255
 2ac:	80 81       	ld	r24, Z
 2ae:	89 2b       	or	r24, r25
 2b0:	85 b9       	out	0x05, r24	; 5
	FND_DATA_PORT = FND[i];
 2b2:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <i>
 2b6:	f0 e0       	ldi	r31, 0x00	; 0
 2b8:	ed 5e       	subi	r30, 0xED	; 237
 2ba:	fe 4f       	sbci	r31, 0xFE	; 254
 2bc:	80 81       	ld	r24, Z
 2be:	8b b9       	out	0x0b, r24	; 11

	
} 
 2c0:	05 c0       	rjmp	.+10     	; 0x2cc <__vector_14+0x102>
	if(start_flag) msec++;
		
	if(msec >= 1000)
	{
		msec = 0;
		sec++; //fnd 출력이 바뀌는 시점
 2c2:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <sec>
		//if(w_flag)
		//FND_clock(sec, min);
	}
	
	
	if(!(msec % 10)) 
 2c6:	20 e0       	ldi	r18, 0x00	; 0
 2c8:	30 e0       	ldi	r19, 0x00	; 0
 2ca:	c3 cf       	rjmp	.-122    	; 0x252 <__vector_14+0x88>
	FND_COM_PORT &= 0b11110000;
	FND_COM_PORT |= FND4digit_digit[i];
	FND_DATA_PORT = FND[i];

	
} 
 2cc:	ff 91       	pop	r31
 2ce:	ef 91       	pop	r30
 2d0:	bf 91       	pop	r27
 2d2:	af 91       	pop	r26
 2d4:	9f 91       	pop	r25
 2d6:	8f 91       	pop	r24
 2d8:	7f 91       	pop	r23
 2da:	6f 91       	pop	r22
 2dc:	5f 91       	pop	r21
 2de:	4f 91       	pop	r20
 2e0:	3f 91       	pop	r19
 2e2:	2f 91       	pop	r18
 2e4:	0f 90       	pop	r0
 2e6:	0f be       	out	0x3f, r0	; 63
 2e8:	0f 90       	pop	r0
 2ea:	1f 90       	pop	r1
 2ec:	18 95       	reti

000002ee <main>:

int main(void)
{
    char long_key_flag = 1;
	
	DDRB |= 1<<PORTB5;						//포트 b의 5번핀만 set -> 출력으로 설정//PORTB5는 5로 define 되어있음
 2ee:	25 9a       	sbi	0x04, 5	; 4
	//dotmatrix_init();
	FND4digit_init();
 2f0:	0e 94 53 00 	call	0xa6	; 0xa6 <FND4digit_init>
	DDRB &= ~(1<<PORTB4 | 1<<PORTB5); //버튼 
 2f4:	84 b1       	in	r24, 0x04	; 4
 2f6:	8f 7c       	andi	r24, 0xCF	; 207
 2f8:	84 b9       	out	0x04, r24	; 4
	FND_update_value(0);
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	0e 94 5f 00 	call	0xbe	; 0xbe <FND_update_value>
	Timer0_init();							//8bit 메모리 => 0~255까지 셀 수 있음
 302:	0e 94 c7 01 	call	0x38e	; 0x38e <Timer0_init>
	sei();									//전체(글로벌) interrupt on/off (interrupt 활성화) 
 306:	78 94       	sei
	
} 

int main(void)
{
    char long_key_flag = 1;
 308:	c1 e0       	ldi	r28, 0x01	; 1
				_delay_ms(1);
				if(!(PINB & 0b00100000))
				{
					start_flag = 0;
					w_flag = 0;
					clear_flag = 1;
 30a:	d1 e0       	ldi	r29, 0x01	; 1
											//cli() : interrupt 해제 / 처리중 interrupt가 들어오면 안될때 강제적으로 막을때 사용
													//인터럽트 서비스 루틴에서 현재 서비스 루틴이 다른 경로에의해 간섭이나 처리에 영향을 받지않도록 cli로막는다
		
	while(1)
	{ 
		if(time_flag) 
 30c:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <time_flag>
 310:	88 23       	and	r24, r24
 312:	51 f0       	breq	.+20     	; 0x328 <main+0x3a>
		{
			FND_update_time(msec, sec);
 314:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <sec>
 318:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <msec>
 31c:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <msec+0x1>
 320:	0e 94 96 00 	call	0x12c	; 0x12c <FND_update_time>
			time_flag = 0;
 324:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <time_flag>
		}
		if(long_key_flag)
 328:	cc 23       	and	r28, r28
 32a:	51 f1       	breq	.+84     	; 0x380 <main+0x92>
		{
			if(!(PINB & 0b00010000))
 32c:	1c 99       	sbic	0x03, 4	; 3
 32e:	16 c0       	rjmp	.+44     	; 0x35c <main+0x6e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 330:	8f e9       	ldi	r24, 0x9F	; 159
 332:	9f e0       	ldi	r25, 0x0F	; 15
 334:	01 97       	sbiw	r24, 0x01	; 1
 336:	f1 f7       	brne	.-4      	; 0x334 <main+0x46>
 338:	00 c0       	rjmp	.+0      	; 0x33a <main+0x4c>
 33a:	00 00       	nop
			{
				_delay_ms(1);
				if(!(PINB & 0b00010000))
 33c:	1c 99       	sbic	0x03, 4	; 3
 33e:	e6 cf       	rjmp	.-52     	; 0x30c <main+0x1e>
				{
					start_flag = 1;
 340:	d0 93 1a 01 	sts	0x011A, r29	; 0x80011a <start_flag>
					if(w_flag) w_flag = 0;
 344:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <w_flag>
 348:	88 23       	and	r24, r24
 34a:	21 f0       	breq	.+8      	; 0x354 <main+0x66>
 34c:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <w_flag>
					else w_flag = 1;
					long_key_flag = 0;
 350:	c0 e0       	ldi	r28, 0x00	; 0
 352:	dc cf       	rjmp	.-72     	; 0x30c <main+0x1e>
				_delay_ms(1);
				if(!(PINB & 0b00010000))
				{
					start_flag = 1;
					if(w_flag) w_flag = 0;
					else w_flag = 1;
 354:	d0 93 17 01 	sts	0x0117, r29	; 0x800117 <w_flag>
					long_key_flag = 0;
 358:	c0 e0       	ldi	r28, 0x00	; 0
 35a:	d8 cf       	rjmp	.-80     	; 0x30c <main+0x1e>
				}
				
			}
			else if(!(PINB & 0b00100000))
 35c:	1d 99       	sbic	0x03, 5	; 3
 35e:	d6 cf       	rjmp	.-84     	; 0x30c <main+0x1e>
 360:	8f e9       	ldi	r24, 0x9F	; 159
 362:	9f e0       	ldi	r25, 0x0F	; 15
 364:	01 97       	sbiw	r24, 0x01	; 1
 366:	f1 f7       	brne	.-4      	; 0x364 <main+0x76>
 368:	00 c0       	rjmp	.+0      	; 0x36a <main+0x7c>
 36a:	00 00       	nop
			{
				_delay_ms(1);
				if(!(PINB & 0b00100000))
 36c:	1d 99       	sbic	0x03, 5	; 3
 36e:	ce cf       	rjmp	.-100    	; 0x30c <main+0x1e>
				{
					start_flag = 0;
 370:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <start_flag>
					w_flag = 0;
 374:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <w_flag>
					clear_flag = 1;
 378:	d0 93 19 01 	sts	0x0119, r29	; 0x800119 <clear_flag>
					long_key_flag = 0;
 37c:	c0 e0       	ldi	r28, 0x00	; 0
 37e:	c6 cf       	rjmp	.-116    	; 0x30c <main+0x1e>
				}
			}
		}
		else
		{
			if((PINB & 0b00010000) && (PINB & 0b00100000))
 380:	1c 9b       	sbis	0x03, 4	; 3
 382:	c4 cf       	rjmp	.-120    	; 0x30c <main+0x1e>
 384:	c3 b1       	in	r28, 0x03	; 3
 386:	c5 fb       	bst	r28, 5
 388:	cc 27       	eor	r28, r28
 38a:	c0 f9       	bld	r28, 0
 38c:	bf cf       	rjmp	.-130    	; 0x30c <main+0x1e>

0000038e <Timer0_init>:
*/

void Timer0_init(void)
{
	//타이머 초기화
	TCCR0A |= 1 << WGM01;					//0b00000010;  //CTC Mode
 38e:	84 b5       	in	r24, 0x24	; 36
 390:	82 60       	ori	r24, 0x02	; 2
 392:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS00 | 1 << CS01);		//0b00000011;  //64분주 사용(하위 3bit : 011)
 394:	85 b5       	in	r24, 0x25	; 37
 396:	83 60       	ori	r24, 0x03	; 3
 398:	85 bd       	out	0x25, r24	; 37
	OCR0A = 249;							//비교할 값 => (16,000,000 / 64) / 1000 = 250 (0 ~ "249")			//1ms 주기
 39a:	89 ef       	ldi	r24, 0xF9	; 249
 39c:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= 1 << OCIE0A;                  //0b00000010; //어떤 interrupt 걸리게 할건지 정하는	// OC0A 비교 매치 인터럽트 활성화
 39e:	ee e6       	ldi	r30, 0x6E	; 110
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	80 81       	ld	r24, Z
 3a4:	82 60       	ori	r24, 0x02	; 2
 3a6:	80 83       	st	Z, r24
 3a8:	08 95       	ret

000003aa <__divmodhi4>:
 3aa:	97 fb       	bst	r25, 7
 3ac:	07 2e       	mov	r0, r23
 3ae:	16 f4       	brtc	.+4      	; 0x3b4 <__divmodhi4+0xa>
 3b0:	00 94       	com	r0
 3b2:	07 d0       	rcall	.+14     	; 0x3c2 <__divmodhi4_neg1>
 3b4:	77 fd       	sbrc	r23, 7
 3b6:	09 d0       	rcall	.+18     	; 0x3ca <__divmodhi4_neg2>
 3b8:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <__udivmodhi4>
 3bc:	07 fc       	sbrc	r0, 7
 3be:	05 d0       	rcall	.+10     	; 0x3ca <__divmodhi4_neg2>
 3c0:	3e f4       	brtc	.+14     	; 0x3d0 <__divmodhi4_exit>

000003c2 <__divmodhi4_neg1>:
 3c2:	90 95       	com	r25
 3c4:	81 95       	neg	r24
 3c6:	9f 4f       	sbci	r25, 0xFF	; 255
 3c8:	08 95       	ret

000003ca <__divmodhi4_neg2>:
 3ca:	70 95       	com	r23
 3cc:	61 95       	neg	r22
 3ce:	7f 4f       	sbci	r23, 0xFF	; 255

000003d0 <__divmodhi4_exit>:
 3d0:	08 95       	ret

000003d2 <__udivmodhi4>:
 3d2:	aa 1b       	sub	r26, r26
 3d4:	bb 1b       	sub	r27, r27
 3d6:	51 e1       	ldi	r21, 0x11	; 17
 3d8:	07 c0       	rjmp	.+14     	; 0x3e8 <__udivmodhi4_ep>

000003da <__udivmodhi4_loop>:
 3da:	aa 1f       	adc	r26, r26
 3dc:	bb 1f       	adc	r27, r27
 3de:	a6 17       	cp	r26, r22
 3e0:	b7 07       	cpc	r27, r23
 3e2:	10 f0       	brcs	.+4      	; 0x3e8 <__udivmodhi4_ep>
 3e4:	a6 1b       	sub	r26, r22
 3e6:	b7 0b       	sbc	r27, r23

000003e8 <__udivmodhi4_ep>:
 3e8:	88 1f       	adc	r24, r24
 3ea:	99 1f       	adc	r25, r25
 3ec:	5a 95       	dec	r21
 3ee:	a9 f7       	brne	.-22     	; 0x3da <__udivmodhi4_loop>
 3f0:	80 95       	com	r24
 3f2:	90 95       	com	r25
 3f4:	bc 01       	movw	r22, r24
 3f6:	cd 01       	movw	r24, r26
 3f8:	08 95       	ret

000003fa <_exit>:
 3fa:	f8 94       	cli

000003fc <__stop_program>:
 3fc:	ff cf       	rjmp	.-2      	; 0x3fc <__stop_program>
